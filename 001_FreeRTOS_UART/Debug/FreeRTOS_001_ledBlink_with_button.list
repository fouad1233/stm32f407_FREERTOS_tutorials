
FreeRTOS_001_ledBlink_with_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800bfe0  0800bfe0  0001bfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c074  0800c074  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c074  0800c074  0001c074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c07c  0800c07c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000053a8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005428  20005428  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f063  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004eb6  00000000  00000000  0003f156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001948  00000000  00000000  00044010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001352  00000000  00000000  00045958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000063ef  00000000  00000000  00046caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002038e  00000000  00000000  0004d099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5fa1  00000000  00000000  0006d427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006cfc  00000000  00000000  001433c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfc8 	.word	0x0800bfc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800bfc8 	.word	0x0800bfc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc7e 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f928 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f892 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8be 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8ec 	bl	80006c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f008 f9d8 	bl	800889c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of button */
  buttonHandle = osThreadNew(buttonControlTest, NULL, &button_attributes);
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <main+0x48>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x4c>)
 80004f2:	f008 fa1d 	bl	8008930 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x50>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of led */
  ledHandle = osThreadNew(ledFlashTask, NULL, &led_attributes);
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x54>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x58>)
 8000502:	f008 fa15 	bl	8008930 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <main+0x5c>)
 800050a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050c:	f008 f9ea 	bl	80088e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x44>
 8000512:	bf00      	nop
 8000514:	0800c014 	.word	0x0800c014
 8000518:	08000929 	.word	0x08000929
 800051c:	20000190 	.word	0x20000190
 8000520:	0800c038 	.word	0x0800c038
 8000524:	08000971 	.word	0x08000971
 8000528:	20000194 	.word	0x20000194

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00b fca6 	bl	800be8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a28      	ldr	r2, [pc, #160]	; (80005fc <SystemClock_Config+0xd0>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xd4>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000588:	2303      	movs	r3, #3
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fe96 	bl	80042ec <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005c6:	f000 fa21 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f8f9 	bl	80047dc <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005f0:	f000 fa0c 	bl	8000a0c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f003 f86f 	bl	8003724 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f9de 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000009c 	.word	0x2000009c
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f003 f984 	bl	80039ac <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 f9af 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000f0 	.word	0x200000f0
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f004 fbb1 	bl	8004e78 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f976 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000138 	.word	0x20000138
 8000728:	40013000 	.word	0x40013000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b72      	ldr	r3, [pc, #456]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a71      	ldr	r2, [pc, #452]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b68      	ldr	r3, [pc, #416]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b64      	ldr	r3, [pc, #400]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b61      	ldr	r3, [pc, #388]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b5d      	ldr	r3, [pc, #372]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5c      	ldr	r2, [pc, #368]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a55      	ldr	r2, [pc, #340]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4e      	ldr	r2, [pc, #312]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4849      	ldr	r0, [pc, #292]	; (8000914 <MX_GPIO_Init+0x1e8>)
 80007f0:	f000 fe4a 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	4847      	ldr	r0, [pc, #284]	; (8000918 <MX_GPIO_Init+0x1ec>)
 80007fa:	f000 fe45 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <MX_GPIO_Init+0x1f0>)
 8000806:	f000 fe3f 	bl	8001488 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	483c      	ldr	r0, [pc, #240]	; (8000914 <MX_GPIO_Init+0x1e8>)
 8000822:	f000 fc7d 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fc6f 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x1ec>)
 800085e:	f000 fc5f 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_GPIO_Init+0x1f4>)
 8000878:	f000 fc52 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4825      	ldr	r0, [pc, #148]	; (8000924 <MX_GPIO_Init+0x1f8>)
 8000890:	f000 fc46 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_GPIO_Init+0x1f8>)
 80008b2:	f000 fc35 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_GPIO_Init+0x1f0>)
 80008d0:	f000 fc26 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_GPIO_Init+0x1f0>)
 80008e8:	f000 fc1a 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fc0d 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400

08000928 <buttonControlTest>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_buttonControlTest */
void buttonControlTest(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000930:	f00a feec 	bl	800b70c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 8000934:	2101      	movs	r1, #1
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <buttonControlTest+0x40>)
 8000938:	f000 fd8e 	bl	8001458 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d1f8      	bne.n	8000934 <buttonControlTest+0xc>
		  //wait to raise hand from button
		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET);
 8000942:	bf00      	nop
 8000944:	2101      	movs	r1, #1
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <buttonControlTest+0x40>)
 8000948:	f000 fd86 	bl	8001458 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d0f8      	beq.n	8000944 <buttonControlTest+0x1c>
		  buttonCounter +=1;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <buttonControlTest+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <buttonControlTest+0x44>)
 800095c:	701a      	strb	r2, [r3, #0]
		  osDelay(10);
 800095e:	200a      	movs	r0, #10
 8000960:	f008 f878 	bl	8008a54 <osDelay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 8000964:	e7e6      	b.n	8000934 <buttonControlTest+0xc>
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000
 800096c:	20000198 	.word	0x20000198

08000970 <ledFlashTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledFlashTask */
void ledFlashTask(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledFlashTask */
  /* Infinite loop */
  for(;;)
  {
	  if(buttonCounter == 0){
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <ledFlashTask+0x94>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d106      	bne.n	800098e <ledFlashTask+0x1e>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin | LD4_Pin |LD5_Pin| LD6_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000986:	4820      	ldr	r0, [pc, #128]	; (8000a08 <ledFlashTask+0x98>)
 8000988:	f000 fd7e 	bl	8001488 <HAL_GPIO_WritePin>
 800098c:	e7f4      	b.n	8000978 <ledFlashTask+0x8>
	  }
	  else if (buttonCounter == 1 ){
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <ledFlashTask+0x94>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d109      	bne.n	80009aa <ledFlashTask+0x3a>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin | LD4_Pin |LD5_Pin| LD6_Pin);
 8000996:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800099a:	481b      	ldr	r0, [pc, #108]	; (8000a08 <ledFlashTask+0x98>)
 800099c:	f000 fd8d 	bl	80014ba <HAL_GPIO_TogglePin>
		  osDelay(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a4:	f008 f856 	bl	8008a54 <osDelay>
 80009a8:	e7e6      	b.n	8000978 <ledFlashTask+0x8>

	  }
	  else if (buttonCounter == 2 ){
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <ledFlashTask+0x94>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d109      	bne.n	80009c6 <ledFlashTask+0x56>
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin | LD4_Pin |LD5_Pin| LD6_Pin);
 80009b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <ledFlashTask+0x98>)
 80009b8:	f000 fd7f 	bl	80014ba <HAL_GPIO_TogglePin>
	  		  osDelay(750);
 80009bc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80009c0:	f008 f848 	bl	8008a54 <osDelay>
 80009c4:	e7d8      	b.n	8000978 <ledFlashTask+0x8>

	  }
	  else if (buttonCounter == 3 ){
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <ledFlashTask+0x94>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d109      	bne.n	80009e2 <ledFlashTask+0x72>
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin | LD4_Pin |LD5_Pin| LD6_Pin);
 80009ce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <ledFlashTask+0x98>)
 80009d4:	f000 fd71 	bl	80014ba <HAL_GPIO_TogglePin>
	  		  osDelay(500);
 80009d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009dc:	f008 f83a 	bl	8008a54 <osDelay>
 80009e0:	e7ca      	b.n	8000978 <ledFlashTask+0x8>

	  }
	  else if (buttonCounter == 4 ){
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <ledFlashTask+0x94>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d108      	bne.n	80009fc <ledFlashTask+0x8c>
	  	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin | LD4_Pin |LD5_Pin| LD6_Pin);
 80009ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <ledFlashTask+0x98>)
 80009f0:	f000 fd63 	bl	80014ba <HAL_GPIO_TogglePin>
	  	  		  osDelay(250);
 80009f4:	20fa      	movs	r0, #250	; 0xfa
 80009f6:	f008 f82d 	bl	8008a54 <osDelay>
 80009fa:	e7bd      	b.n	8000978 <ledFlashTask+0x8>

	  }
	  else{
		  buttonCounter = 0;
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <ledFlashTask+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	  if(buttonCounter == 0){
 8000a02:	e7b9      	b.n	8000978 <ledFlashTask+0x8>
 8000a04:	20000198 	.word	0x20000198
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x54>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_MspInit+0x54>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_MspInit+0x54>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_MspInit+0x54>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	210f      	movs	r1, #15
 8000a5a:	f06f 0001 	mvn.w	r0, #1
 8000a5e:	f000 fb28 	bl	80010b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12c      	bne.n	8000aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x8c>)
 8000acc:	f000 fb28 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40005400 	.word	0x40005400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <HAL_I2S_MspInit+0xf0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d15a      	bne.n	8000be6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b34:	23c0      	movs	r3, #192	; 0xc0
 8000b36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 f857 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b4c:	f7ff ff5e 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <HAL_I2S_MspInit+0xf8>)
 8000bc0:	f000 faae 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_I2S_MspInit+0xfc>)
 8000be2:	f000 fa9d 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	; 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40003c00 	.word	0x40003c00
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020800 	.word	0x40020800

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5a:	23e0      	movs	r3, #224	; 0xe0
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_SPI_MspInit+0x8c>)
 8000c76:	f000 fa53 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8d8 	bl	8000e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cc4:	f009 fcbe 	bl	800a644 <xTaskGetSchedulerState>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cce:	f00a faa3 	bl	800b218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <OTG_FS_IRQHandler+0x10>)
 8000cde:	f000 fee7 	bl	8001ab0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004f00 	.word	0x20004f00

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f00b f8ce 	bl	800bebc <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20020000 	.word	0x20020000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	2000019c 	.word	0x2000019c
 8000d54:	20005428 	.word	0x20005428

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f00b f88d 	bl	800bec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fb8d 	bl	80004cc <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000dc0:	0800c084 	.word	0x0800c084
  ldr r2, =_sbss
 8000dc4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000dc8:	20005428 	.word	0x20005428

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f94f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe08 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f967 	bl	8001106 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e50:	f000 f92f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200001a0 	.word	0x200001a0

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200001a0 	.word	0x200001a0

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e16b      	b.n	8001414 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 815a 	bne.w	800140e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80b4 	beq.w	800140e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a5f      	ldr	r2, [pc, #380]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a5b      	ldr	r2, [pc, #364]	; (8001430 <HAL_GPIO_Init+0x310>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x226>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x222>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x21e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x320>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x21a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <HAL_GPIO_Init+0x324>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x216>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x328>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x212>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x32c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_GPIO_Init+0x330>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x20a>
 8001326:	2307      	movs	r3, #7
 8001328:	e00e      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132a:	2308      	movs	r3, #8
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132e:	2306      	movs	r3, #6
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x310>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_GPIO_Init+0x334>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_GPIO_Init+0x334>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_GPIO_Init+0x334>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae90 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e001      	b.n	800147a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af02      	add	r7, sp, #8
 80014f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e059      	b.n	80015b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f00a f94a 	bl	800b7b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800152e:	d102      	bne.n	8001536 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fd9a 	bl	8005074 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1a      	ldrb	r2, [r3, #16]
 8001548:	f88d 2000 	strb.w	r2, [sp]
 800154c:	3304      	adds	r3, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f003 fd1b 	bl	8004f8a <USB_CoreInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e026      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fd92 	bl	8005096 <USB_SetCurrentMode>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e017      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c1a      	ldrb	r2, [r3, #16]
 800158c:	f88d 2000 	strb.w	r2, [sp]
 8001590:	3304      	adds	r3, #4
 8001592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001594:	f003 ff34 	bl	8005400 <USB_HostInit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e004      	b.n	80015b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015d8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_HCD_HC_Init+0x2c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e09d      	b.n	8001724 <HAL_HCD_HC_Init+0x168>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3319      	adds	r3, #25
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3314      	adds	r3, #20
 8001614:	787a      	ldrb	r2, [r7, #1]
 8001616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3315      	adds	r3, #21
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3326      	adds	r3, #38	; 0x26
 800163c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	78bb      	ldrb	r3, [r7, #2]
 8001646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3316      	adds	r3, #22
 800165a:	4602      	mov	r2, r0
 800165c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fbc8 	bl	8001df8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da0a      	bge.n	8001686 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3317      	adds	r3, #23
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e009      	b.n	800169a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3317      	adds	r3, #23
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 f812 	bl	80056c8 <USB_GetHostSpeed>
 80016a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10b      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2bbc      	cmp	r3, #188	; 0xbc
 80016c0:	d901      	bls.n	80016c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016c2:	23bc      	movs	r3, #188	; 0xbc
 80016c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3318      	adds	r3, #24
 80016d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	b298      	uxth	r0, r3
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3328      	adds	r3, #40	; 0x28
 80016f0:	4602      	mov	r2, r0
 80016f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	787c      	ldrb	r4, [r7, #1]
 80016fe:	78ba      	ldrb	r2, [r7, #2]
 8001700:	78f9      	ldrb	r1, [r7, #3]
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	f004 f801 	bl	8005718 <USB_HC_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_HCD_HC_Halt+0x1e>
 8001746:	2302      	movs	r3, #2
 8001748:	e00f      	b.n	800176a <HAL_HCD_HC_Halt+0x3e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fb93 	bl	8005e86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4603      	mov	r3, r0
 8001784:	70fb      	strb	r3, [r7, #3]
 8001786:	460b      	mov	r3, r1
 8001788:	70bb      	strb	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3317      	adds	r3, #23
 800179e:	78ba      	ldrb	r2, [r7, #2]
 80017a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3326      	adds	r3, #38	; 0x26
 80017b2:	787a      	ldrb	r2, [r7, #1]
 80017b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017b6:	7c3b      	ldrb	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d114      	bne.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	332a      	adds	r3, #42	; 0x2a
 80017cc:	2203      	movs	r2, #3
 80017ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3319      	adds	r3, #25
 80017e0:	7f3a      	ldrb	r2, [r7, #28]
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e009      	b.n	80017fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	332a      	adds	r3, #42	; 0x2a
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017fa:	787b      	ldrb	r3, [r7, #1]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	f200 8102 	bhi.w	8001a06 <HAL_HCD_HC_SubmitRequest+0x292>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	080019f1 	.word	0x080019f1
 8001810:	080018dd 	.word	0x080018dd
 8001814:	08001967 	.word	0x08001967
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001818:	7c3b      	ldrb	r3, [r7, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	f040 80f5 	bne.w	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d12d      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001826:	8b3b      	ldrh	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	333d      	adds	r3, #61	; 0x3d
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	333d      	adds	r3, #61	; 0x3d
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	332a      	adds	r3, #42	; 0x2a
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800186a:	e0ce      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	332a      	adds	r3, #42	; 0x2a
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e0c3      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	331a      	adds	r3, #26
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	f040 80b8 	bne.w	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	333c      	adds	r3, #60	; 0x3c
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	332a      	adds	r3, #42	; 0x2a
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
      break;
 80018c4:	e0a1      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	332a      	adds	r3, #42	; 0x2a
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e096      	b.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018dc:	78bb      	ldrb	r3, [r7, #2]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d120      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333d      	adds	r3, #61	; 0x3d
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	332a      	adds	r3, #42	; 0x2a
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800190c:	e07e      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	; 0x2a
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e073      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	333c      	adds	r3, #60	; 0x3c
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	332a      	adds	r3, #42	; 0x2a
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e05d      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	332a      	adds	r3, #42	; 0x2a
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
      break;
 8001964:	e052      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d120      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	333d      	adds	r3, #61	; 0x3d
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	332a      	adds	r3, #42	; 0x2a
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001996:	e039      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	; 0x2a
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
      break;
 80019ac:	e02e      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	333c      	adds	r3, #60	; 0x3c
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	332a      	adds	r3, #42	; 0x2a
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e018      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	332a      	adds	r3, #42	; 0x2a
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
      break;
 80019ee:	e00d      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	332a      	adds	r3, #42	; 0x2a
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e002      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	332c      	adds	r3, #44	; 0x2c
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	8b39      	ldrh	r1, [r7, #24]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4403      	add	r3, r0
 8001a30:	3334      	adds	r3, #52	; 0x34
 8001a32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	334c      	adds	r3, #76	; 0x4c
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	3338      	adds	r3, #56	; 0x38
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3315      	adds	r3, #21
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	334d      	adds	r3, #77	; 0x4d
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	3310      	adds	r3, #16
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	1d19      	adds	r1, r3, #4
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	799b      	ldrb	r3, [r3, #6]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f003 ff66 	bl	8005970 <USB_HC_StartXfer>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fc5b 	bl	8005382 <USB_GetMode>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80fb 	bne.w	8001cca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fc1e 	bl	800531a <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80f1 	beq.w	8001cc8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fc15 	bl	800531a <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001afa:	d104      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fc05 	bl	800531a <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b1a:	d104      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fbf5 	bl	800531a <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b3a:	d104      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fbe5 	bl	800531a <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d103      	bne.n	8001b62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fbd7 	bl	800531a <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b76:	d120      	bne.n	8001bba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d113      	bne.n	8001bba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b92:	2110      	movs	r1, #16
 8001b94:	6938      	ldr	r0, [r7, #16]
 8001b96:	f003 faca 	bl	800512e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b9a:	6938      	ldr	r0, [r7, #16]
 8001b9c:	f003 faf9 	bl	8005192 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7a5b      	ldrb	r3, [r3, #9]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d105      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fcea 	bl	8005588 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f009 fe7b 	bl	800b8b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fbab 	bl	800531a <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bce:	d102      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 fd33 	bl	800363c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fb9d 	bl	800531a <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d106      	bne.n	8001bf8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f009 fe44 	bl	800b878 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fb8c 	bl	800531a <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c0c:	d139      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f926 	bl	8005e64 <USB_HC_ReadInterrupt>
 8001c18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e025      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d018      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4a:	d106      	bne.n	8001c5a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f905 	bl	8001e62 <HCD_HC_IN_IRQHandler>
 8001c58:	e005      	b.n	8001c66 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 ff67 	bl	8002b34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	795b      	ldrb	r3, [r3, #5]
 8001c70:	461a      	mov	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3d3      	bcc.n	8001c20 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fb47 	bl	800531a <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d101      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x1ea>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_IRQHandler+0x1ec>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0210 	bic.w	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 fbe4 	bl	800347e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0210 	orr.w	r2, r2, #16
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e000      	b.n	8001cca <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cc8:	bf00      	nop
    }
  }
}
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_HCD_Start+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e013      	b.n	8001d0e <HAL_HCD_Start+0x3e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fcae 	bl	8005656 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 f9a7 	bl	8005052 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_HCD_Stop+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00d      	b.n	8001d48 <HAL_HCD_Stop+0x32>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fa01 	bl	8006140 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fc50 	bl	8005602 <USB_ResetPort>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	334c      	adds	r3, #76	; 0x4c
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3338      	adds	r3, #56	; 0x38
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fc92 	bl	80056f6 <USB_GetCurrentFrame>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fc6d 	bl	80056c8 <USB_GetHostSpeed>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	331a      	adds	r3, #26
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	331b      	adds	r3, #27
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3325      	adds	r3, #37	; 0x25
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3324      	adds	r3, #36	; 0x24
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fa5d 	bl	8005340 <USB_ReadChInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d11a      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	334d      	adds	r3, #77	; 0x4d
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 ffe1 	bl	8005e86 <USB_HC_Halt>
 8001ec4:	e09e      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fa36 	bl	8005340 <USB_ReadChInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ede:	d11b      	bne.n	8001f18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	334d      	adds	r3, #77	; 0x4d
 8001f04:	2208      	movs	r2, #8
 8001f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ffb8 	bl	8005e86 <USB_HC_Halt>
 8001f16:	e075      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fa0d 	bl	8005340 <USB_ReadChInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11a      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2308      	movs	r3, #8
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	334d      	adds	r3, #77	; 0x4d
 8001f52:	2206      	movs	r2, #6
 8001f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 ff91 	bl	8005e86 <USB_HC_Halt>
 8001f64:	e04e      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f9e6 	bl	8005340 <USB_ReadChInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d11b      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	334d      	adds	r3, #77	; 0x4d
 8001fa4:	2209      	movs	r2, #9
 8001fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 ff68 	bl	8005e86 <USB_HC_Halt>
 8001fb6:	e025      	b.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 f9bd 	bl	8005340 <USB_ReadChInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d119      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334d      	adds	r3, #77	; 0x4d
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 ff41 	bl	8005e86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f997 	bl	8005340 <USB_ReadChInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201c:	d112      	bne.n	8002044 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f003 ff2d 	bl	8005e86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	f000 bd75 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f003 f977 	bl	8005340 <USB_ReadChInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 8128 	bne.w	80022ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	461a      	mov	r2, r3
 800206c:	2320      	movs	r3, #32
 800206e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	331b      	adds	r3, #27
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d119      	bne.n	80020ba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	331b      	adds	r3, #27
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01b      	beq.n	80020fa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3330      	adds	r3, #48	; 0x30
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	1ac9      	subs	r1, r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4403      	add	r3, r0
 80020f6:	3338      	adds	r3, #56	; 0x38
 80020f8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	334d      	adds	r3, #77	; 0x4d
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3344      	adds	r3, #68	; 0x44
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	2301      	movs	r3, #1
 8002132:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3326      	adds	r3, #38	; 0x26
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3326      	adds	r3, #38	; 0x26
 800215a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800215c:	2b02      	cmp	r3, #2
 800215e:	d110      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fe8c 	bl	8005e86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	2310      	movs	r3, #16
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e03d      	b.n	80021fe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3326      	adds	r3, #38	; 0x26
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d00a      	beq.n	80021ae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3326      	adds	r3, #38	; 0x26
 80021a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d127      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	0151      	lsls	r1, r2, #5
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	440a      	add	r2, r1
 80021c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334c      	adds	r3, #76	; 0x4c
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	334c      	adds	r3, #76	; 0x4c
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f009 fb67 	bl	800b8cc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	799b      	ldrb	r3, [r3, #6]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d13b      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3338      	adds	r3, #56	; 0x38
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4403      	add	r3, r0
 8002226:	3328      	adds	r3, #40	; 0x28
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	440b      	add	r3, r1
 800222c:	1e59      	subs	r1, r3, #1
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4403      	add	r3, r0
 800223c:	3328      	adds	r3, #40	; 0x28
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8470 	beq.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333c      	adds	r3, #60	; 0x3c
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333c      	adds	r3, #60	; 0x3c
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	f000 bc58 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	; 0x3c
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2d8      	uxtb	r0, r3
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	333c      	adds	r3, #60	; 0x3c
 80022a6:	4602      	mov	r2, r0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	f000 bc40 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 f842 	bl	8005340 <USB_ReadChInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d131      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	461a      	mov	r2, r3
 80022d4:	2320      	movs	r3, #32
 80022d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	331a      	adds	r3, #26
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	f040 841f 	bne.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	331b      	adds	r3, #27
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	334d      	adds	r3, #77	; 0x4d
 8002314:	2203      	movs	r2, #3
 8002316:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fdb0 	bl	8005e86 <USB_HC_Halt>
 8002326:	f000 bc02 	b.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f804 	bl	8005340 <USB_ReadChInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 8305 	bne.w	800294e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2302      	movs	r3, #2
 8002354:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334d      	adds	r3, #77	; 0x4d
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d114      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	334d      	adds	r3, #77	; 0x4d
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334c      	adds	r3, #76	; 0x4c
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e2cc      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334d      	adds	r3, #77	; 0x4d
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d114      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	; 0x4d
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334c      	adds	r3, #76	; 0x4c
 80023d0:	2205      	movs	r2, #5
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e2ac      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	334d      	adds	r3, #77	; 0x4d
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b07      	cmp	r3, #7
 80023ea:	d00b      	beq.n	8002404 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334d      	adds	r3, #77	; 0x4d
 80023fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023fe:	2b09      	cmp	r3, #9
 8002400:	f040 80a6 	bne.w	8002550 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	334d      	adds	r3, #77	; 0x4d
 8002414:	2202      	movs	r2, #2
 8002416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3344      	adds	r3, #68	; 0x44
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4403      	add	r3, r0
 8002438:	3344      	adds	r3, #68	; 0x44
 800243a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3344      	adds	r3, #68	; 0x44
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d943      	bls.n	80024da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3344      	adds	r3, #68	; 0x44
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	331a      	adds	r3, #26
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d123      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	331b      	adds	r3, #27
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	331c      	adds	r3, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	0151      	lsls	r1, r2, #5
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	440a      	add	r2, r1
 80024ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	334c      	adds	r3, #76	; 0x4c
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024d8:	e229      	b.n	800292e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334c      	adds	r3, #76	; 0x4c
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3326      	adds	r3, #38	; 0x26
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3326      	adds	r3, #38	; 0x26
 8002514:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002516:	2b02      	cmp	r3, #2
 8002518:	f040 8209 	bne.w	800292e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002532:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800253a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800254e:	e1ee      	b.n	800292e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	; 0x4d
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b05      	cmp	r3, #5
 8002564:	f040 80c8 	bne.w	80026f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	; 0x4d
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	331b      	adds	r3, #27
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 81ce 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3326      	adds	r3, #38	; 0x26
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d16b      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3348      	adds	r3, #72	; 0x48
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1c59      	adds	r1, r3, #1
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	3348      	adds	r3, #72	; 0x48
 80025cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3348      	adds	r3, #72	; 0x48
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d943      	bls.n	800266c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3348      	adds	r3, #72	; 0x48
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	331b      	adds	r3, #27
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3344      	adds	r3, #68	; 0x44
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d809      	bhi.n	8002636 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	331c      	adds	r3, #28
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	; 0x4c
 8002666:	2204      	movs	r2, #4
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e014      	b.n	8002696 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334c      	adds	r3, #76	; 0x4c
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e009      	b.n	8002696 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	334c      	adds	r3, #76	; 0x4c
 8002692:	2202      	movs	r2, #2
 8002694:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3326      	adds	r3, #38	; 0x26
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3326      	adds	r3, #38	; 0x26
 80026bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f040 8136 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e11b      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334d      	adds	r3, #77	; 0x4d
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	f040 8081 	bne.w	8002812 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334d      	adds	r3, #77	; 0x4d
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	331b      	adds	r3, #27
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	f040 80fa 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	334c      	adds	r3, #76	; 0x4c
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	0151      	lsls	r1, r2, #5
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	0151      	lsls	r1, r2, #5
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	440a      	add	r2, r1
 8002786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f023 0320 	bic.w	r3, r3, #32
 80027ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3326      	adds	r3, #38	; 0x26
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3326      	adds	r3, #38	; 0x26
 80027d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d8:	2b02      	cmp	r3, #2
 80027da:	f040 80a9 	bne.w	8002930 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e08e      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334d      	adds	r3, #77	; 0x4d
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d143      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334d      	adds	r3, #77	; 0x4d
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	334c      	adds	r3, #76	; 0x4c
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3326      	adds	r3, #38	; 0x26
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3326      	adds	r3, #38	; 0x26
 8002876:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002878:	2b02      	cmp	r3, #2
 800287a:	d159      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002892:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800289a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e03f      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334d      	adds	r3, #77	; 0x4d
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d126      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	334d      	adds	r3, #77	; 0x4d
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3344      	adds	r3, #68	; 0x44
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4403      	add	r3, r0
 80028fa:	3344      	adds	r3, #68	; 0x44
 80028fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	334c      	adds	r3, #76	; 0x4c
 800290e:	2204      	movs	r2, #4
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e00d      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	; 0x4d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	f000 8100 	beq.w	8002b2c <HCD_HC_IN_IRQHandler+0xcca>
 800292c:	e000      	b.n	8002930 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800292e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	; 0x4c
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f008 ffc0 	bl	800b8cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800294c:	e0ef      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fcf2 	bl	8005340 <USB_ReadChInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d12f      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2340      	movs	r3, #64	; 0x40
 8002976:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	; 0x4d
 8002988:	2205      	movs	r2, #5
 800298a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	331a      	adds	r3, #26
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3344      	adds	r3, #68	; 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fa61 	bl	8005e86 <USB_HC_Halt>
 80029c4:	e0b3      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fcb6 	bl	8005340 <USB_ReadChInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	f040 80a7 	bne.w	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3326      	adds	r3, #38	; 0x26
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d11b      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3344      	adds	r3, #68	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334d      	adds	r3, #77	; 0x4d
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fa2d 	bl	8005e86 <USB_HC_Halt>
 8002a2c:	e03f      	b.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3326      	adds	r3, #38	; 0x26
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3326      	adds	r3, #38	; 0x26
 8002a54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d129      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	799b      	ldrb	r3, [r3, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	331b      	adds	r3, #27
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d110      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334d      	adds	r3, #77	; 0x4d
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 f9ec 	bl	8005e86 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	331b      	adds	r3, #27
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d129      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	331b      	adds	r3, #27
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	e000      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b2c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fbf4 	bl	8005340 <USB_ReadChInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d11b      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2304      	movs	r3, #4
 8002b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	; 0x4d
 8002b84:	2207      	movs	r2, #7
 8002b86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 f978 	bl	8005e86 <USB_HC_Halt>
 8002b96:	f000 bc6f 	b.w	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fbcc 	bl	8005340 <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f040 8082 	bne.w	8002cb8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3319      	adds	r3, #25
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d124      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3319      	adds	r3, #25
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334c      	adds	r3, #76	; 0x4c
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334d      	adds	r3, #77	; 0x4d
 8002c14:	2203      	movs	r2, #3
 8002c16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f930 	bl	8005e86 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	331a      	adds	r3, #26
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 841d 	bne.w	8003478 <HCD_HC_OUT_IRQHandler+0x944>
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	331b      	adds	r3, #27
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 8411 	bne.w	8003478 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	; 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d009      	beq.n	8002c80 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	331b      	adds	r3, #27
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	; 0x4d
 8002c90:	2203      	movs	r2, #3
 8002c92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 f8f2 	bl	8005e86 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3344      	adds	r3, #68	; 0x44
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e3df      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fb3d 	bl	8005340 <USB_ReadChInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d111      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 f8c9 	bl	8005e86 <USB_HC_Halt>
 8002cf4:	e3c0      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fb1e 	bl	8005340 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d168      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	; 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fb08 	bl	8005340 <USB_ReadChInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d112      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3319      	adds	r3, #25
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331b      	adds	r3, #27
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	331b      	adds	r3, #27
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	2301      	movs	r3, #1
 8002dba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	334d      	adds	r3, #77	; 0x4d
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 f854 	bl	8005e86 <USB_HC_Halt>
 8002dde:	e34b      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 faa9 	bl	8005340 <USB_ReadChInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d139      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	334d      	adds	r3, #77	; 0x4d
 8002e08:	2205      	movs	r2, #5
 8002e0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331a      	adds	r3, #26
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3319      	adds	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3344      	adds	r3, #68	; 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f817 	bl	8005e86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	e305      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fa63 	bl	8005340 <USB_ReadChInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d11a      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	2308      	movs	r3, #8
 8002e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	334d      	adds	r3, #77	; 0x4d
 8002ea6:	2206      	movs	r2, #6
 8002ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 ffe7 	bl	8005e86 <USB_HC_Halt>
 8002eb8:	e2de      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 fa3c 	bl	8005340 <USB_ReadChInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d144      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3344      	adds	r3, #68	; 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334d      	adds	r3, #77	; 0x4d
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3319      	adds	r3, #25
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d114      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3318      	adds	r3, #24
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3319      	adds	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 ff9f 	bl	8005e86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2310      	movs	r3, #16
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e28d      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 f9eb 	bl	8005340 <USB_ReadChInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d169      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	799b      	ldrb	r3, [r3, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d111      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	334d      	adds	r3, #77	; 0x4d
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 ff74 	bl	8005e86 <USB_HC_Halt>
 8002f9e:	e049      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	; 0x44
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4403      	add	r3, r0
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3344      	adds	r3, #68	; 0x44
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d922      	bls.n	8003020 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3344      	adds	r3, #68	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	334c      	adds	r3, #76	; 0x4c
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	; 0x4c
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f008 fc57 	bl	800b8cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800301e:	e009      	b.n	8003034 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	; 0x4c
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e217      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f002 f975 	bl	8005340 <USB_ReadChInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d11b      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	334d      	adds	r3, #77	; 0x4d
 8003072:	2209      	movs	r2, #9
 8003074:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f002 ff01 	bl	8005e86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003096:	6093      	str	r3, [r2, #8]
 8003098:	e1ee      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 f94c 	bl	8005340 <USB_ReadChInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f040 81df 	bne.w	8003472 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2302      	movs	r3, #2
 80030c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334d      	adds	r3, #77	; 0x4d
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 8093 	bne.w	8003204 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334d      	adds	r3, #77	; 0x4d
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334c      	adds	r3, #76	; 0x4c
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3326      	adds	r3, #38	; 0x26
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d00b      	beq.n	8003134 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3326      	adds	r3, #38	; 0x26
 800312c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800312e:	2b03      	cmp	r3, #3
 8003130:	f040 8190 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	799b      	ldrb	r3, [r3, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d115      	bne.n	8003168 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	333d      	adds	r3, #61	; 0x3d
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	f083 0301 	eor.w	r3, r3, #1
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	333d      	adds	r3, #61	; 0x3d
 8003164:	4602      	mov	r2, r0
 8003166:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	799b      	ldrb	r3, [r3, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	f040 8171 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3334      	adds	r3, #52	; 0x34
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8165 	beq.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3334      	adds	r3, #52	; 0x34
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	440b      	add	r3, r1
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4403      	add	r3, r0
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 813f 	beq.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	333d      	adds	r3, #61	; 0x3d
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2d8      	uxtb	r0, r3
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	333d      	adds	r3, #61	; 0x3d
 80031fe:	4602      	mov	r2, r0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e127      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334d      	adds	r3, #77	; 0x4d
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d120      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334d      	adds	r3, #77	; 0x4d
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	331b      	adds	r3, #27
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 8107 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334c      	adds	r3, #76	; 0x4c
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e0fb      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334d      	adds	r3, #77	; 0x4d
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d13a      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334d      	adds	r3, #77	; 0x4d
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334c      	adds	r3, #76	; 0x4c
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	331b      	adds	r3, #27
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 80d1 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	331b      	adds	r3, #27
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	0151      	lsls	r1, r2, #5
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	440a      	add	r2, r1
 80032dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6053      	str	r3, [r2, #4]
 80032e6:	e0b5      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	334d      	adds	r3, #77	; 0x4d
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d114      	bne.n	8003328 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	334d      	adds	r3, #77	; 0x4d
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334c      	adds	r3, #76	; 0x4c
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e095      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	; 0x4d
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d114      	bne.n	8003368 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334d      	adds	r3, #77	; 0x4d
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334c      	adds	r3, #76	; 0x4c
 8003362:	2205      	movs	r2, #5
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e075      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	; 0x4d
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b07      	cmp	r3, #7
 800337c:	d00a      	beq.n	8003394 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334d      	adds	r3, #77	; 0x4d
 800338e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003390:	2b09      	cmp	r3, #9
 8003392:	d170      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	; 0x4d
 80033a4:	2202      	movs	r2, #2
 80033a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3344      	adds	r3, #68	; 0x44
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1c59      	adds	r1, r3, #1
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4403      	add	r3, r0
 80033c8:	3344      	adds	r3, #68	; 0x44
 80033ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3344      	adds	r3, #68	; 0x44
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d914      	bls.n	800340c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3344      	adds	r3, #68	; 0x44
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	334c      	adds	r3, #76	; 0x4c
 8003406:	2204      	movs	r2, #4
 8003408:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800340a:	e022      	b.n	8003452 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334c      	adds	r3, #76	; 0x4c
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003436:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800343e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003452:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	334c      	adds	r3, #76	; 0x4c
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f008 fa2e 	bl	800b8cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003470:	e002      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003476:	bf00      	nop
  }
}
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	0c5b      	lsrs	r3, r3, #17
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d004      	beq.n	80034c4 <HCD_RXQLVL_IRQHandler+0x46>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	f000 80b6 	beq.w	800362e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034c2:	e0b7      	b.n	8003634 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80b3 	beq.w	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	332c      	adds	r3, #44	; 0x2c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a7 	beq.w	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3338      	adds	r3, #56	; 0x38
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	18d1      	adds	r1, r2, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	3334      	adds	r3, #52	; 0x34
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4299      	cmp	r1, r3
 800350e:	f200 8083 	bhi.w	8003618 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	332c      	adds	r3, #44	; 0x2c
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	b292      	uxth	r2, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f001 fe9c 	bl	800526a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	332c      	adds	r3, #44	; 0x2c
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	18d1      	adds	r1, r2, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4403      	add	r3, r0
 8003556:	332c      	adds	r3, #44	; 0x2c
 8003558:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3338      	adds	r3, #56	; 0x38
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	18d1      	adds	r1, r2, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4403      	add	r3, r0
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	0cdb      	lsrs	r3, r3, #19
 8003592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003596:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3328      	adds	r3, #40	; 0x28
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d13f      	bne.n	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03c      	beq.n	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	333c      	adds	r3, #60	; 0x3c
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f083 0301 	eor.w	r3, r3, #1
 8003600:	b2d8      	uxtb	r0, r3
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333c      	adds	r3, #60	; 0x3c
 8003612:	4602      	mov	r2, r0
 8003614:	701a      	strb	r2, [r3, #0]
      break;
 8003616:	e00c      	b.n	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334c      	adds	r3, #76	; 0x4c
 8003628:	2204      	movs	r2, #4
 800362a:	701a      	strb	r2, [r3, #0]
      break;
 800362c:	e001      	b.n	8003632 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003632:	bf00      	nop
  }
}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003668:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d10b      	bne.n	800368c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f008 f908 	bl	800b894 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	d132      	bne.n	80036fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d126      	bne.n	80036f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7a5b      	ldrb	r3, [r3, #9]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d113      	bne.n	80036d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ba:	d106      	bne.n	80036ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 ff60 	bl	8005588 <USB_InitFSLSPClkSel>
 80036c8:	e011      	b.n	80036ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 ff59 	bl	8005588 <USB_InitFSLSPClkSel>
 80036d6:	e00a      	b.n	80036ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	79db      	ldrb	r3, [r3, #7]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e6:	461a      	mov	r2, r3
 80036e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f008 f8fe 	bl	800b8f0 <HAL_HCD_PortEnabled_Callback>
 80036f4:	e002      	b.n	80036fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f008 f908 	bl	800b90c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b20      	cmp	r3, #32
 8003704:	d103      	bne.n	800370e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f043 0320 	orr.w	r3, r3, #32
 800370c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6013      	str	r3, [r2, #0]
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e12b      	b.n	800398e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f990 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003788:	f001 fa20 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 800378c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4a81      	ldr	r2, [pc, #516]	; (8003998 <HAL_I2C_Init+0x274>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d807      	bhi.n	80037a8 <HAL_I2C_Init+0x84>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a80      	ldr	r2, [pc, #512]	; (800399c <HAL_I2C_Init+0x278>)
 800379c:	4293      	cmp	r3, r2
 800379e:	bf94      	ite	ls
 80037a0:	2301      	movls	r3, #1
 80037a2:	2300      	movhi	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e006      	b.n	80037b6 <HAL_I2C_Init+0x92>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a7d      	ldr	r2, [pc, #500]	; (80039a0 <HAL_I2C_Init+0x27c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0e7      	b.n	800398e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a78      	ldr	r2, [pc, #480]	; (80039a4 <HAL_I2C_Init+0x280>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0c9b      	lsrs	r3, r3, #18
 80037c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a6a      	ldr	r2, [pc, #424]	; (8003998 <HAL_I2C_Init+0x274>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d802      	bhi.n	80037f8 <HAL_I2C_Init+0xd4>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	e009      	b.n	800380c <HAL_I2C_Init+0xe8>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_I2C_Init+0x284>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	3301      	adds	r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	430b      	orrs	r3, r1
 8003812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800381e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	495c      	ldr	r1, [pc, #368]	; (8003998 <HAL_I2C_Init+0x274>)
 8003828:	428b      	cmp	r3, r1
 800382a:	d819      	bhi.n	8003860 <HAL_I2C_Init+0x13c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e59      	subs	r1, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fbb1 f3f3 	udiv	r3, r1, r3
 800383a:	1c59      	adds	r1, r3, #1
 800383c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003840:	400b      	ands	r3, r1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_I2C_Init+0x138>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e59      	subs	r1, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fbb1 f3f3 	udiv	r3, r1, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	e051      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 800385c:	2304      	movs	r3, #4
 800385e:	e04f      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d111      	bne.n	800388c <HAL_I2C_Init+0x168>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e58      	subs	r0, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e012      	b.n	80038b2 <HAL_I2C_Init+0x18e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	0099      	lsls	r1, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Init+0x196>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e022      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <HAL_I2C_Init+0x1bc>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1e58      	subs	r0, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	440b      	add	r3, r1
 80038d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038de:	e00f      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800392e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6911      	ldr	r1, [r2, #16]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	000186a0 	.word	0x000186a0
 800399c:	001e847f 	.word	0x001e847f
 80039a0:	003d08ff 	.word	0x003d08ff
 80039a4:	431bde83 	.word	0x431bde83
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e128      	b.n	8003c10 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a90      	ldr	r2, [pc, #576]	; (8003c18 <HAL_I2S_Init+0x26c>)
 80039d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd f891 	bl	8000b00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039f4:	f023 030f 	bic.w	r3, r3, #15
 80039f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2202      	movs	r2, #2
 8003a00:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d060      	beq.n	8003acc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a12:	2310      	movs	r3, #16
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e001      	b.n	8003a1c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d802      	bhi.n	8003a2a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f001 f9c4 	bl	8004db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a30:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d125      	bne.n	8003a88 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	3305      	adds	r3, #5
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	e01f      	b.n	8003aa6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	3305      	adds	r3, #5
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e00e      	b.n	8003aa6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	3305      	adds	r3, #5
 8003aa4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_I2S_Init+0x270>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	08db      	lsrs	r3, r3, #3
 8003ab0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003acc:	2302      	movs	r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d902      	bls.n	8003ae0 <HAL_I2S_Init+0x134>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2bff      	cmp	r3, #255	; 0xff
 8003ade:	d907      	bls.n	8003af0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e08f      	b.n	8003c10 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	ea42 0103 	orr.w	r1, r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6851      	ldr	r1, [r2, #4]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6892      	ldr	r2, [r2, #8]
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68d2      	ldr	r2, [r2, #12]
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6992      	ldr	r2, [r2, #24]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d161      	bne.n	8003c00 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <HAL_I2S_Init+0x274>)
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <HAL_I2S_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2S_Init+0x1a4>
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_I2S_Init+0x27c>)
 8003b4e:	e001      	b.n	8003b54 <HAL_I2S_Init+0x1a8>
 8003b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4932      	ldr	r1, [pc, #200]	; (8003c24 <HAL_I2S_Init+0x278>)
 8003b5c:	428a      	cmp	r2, r1
 8003b5e:	d101      	bne.n	8003b64 <HAL_I2S_Init+0x1b8>
 8003b60:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <HAL_I2S_Init+0x27c>)
 8003b62:	e001      	b.n	8003b68 <HAL_I2S_Init+0x1bc>
 8003b64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b6c:	f023 030f 	bic.w	r3, r3, #15
 8003b70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_I2S_Init+0x278>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2S_Init+0x1d4>
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_I2S_Init+0x27c>)
 8003b7e:	e001      	b.n	8003b84 <HAL_I2S_Init+0x1d8>
 8003b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b84:	2202      	movs	r2, #2
 8003b86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <HAL_I2S_Init+0x278>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_I2S_Init+0x1ea>
 8003b92:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_I2S_Init+0x27c>)
 8003b94:	e001      	b.n	8003b9a <HAL_I2S_Init+0x1ee>
 8003b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba6:	d003      	beq.n	8003bb0 <HAL_I2S_Init+0x204>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003be8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_I2S_Init+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2S_Init+0x24c>
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_I2S_Init+0x27c>)
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_Init+0x250>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	897a      	ldrh	r2, [r7, #10]
 8003bfe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08003d23 	.word	0x08003d23
 8003c1c:	cccccccd 	.word	0xcccccccd
 8003c20:	08003e39 	.word	0x08003e39
 8003c24:	40003800 	.word	0x40003800
 8003c28:	40003400 	.word	0x40003400

08003c2c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ffb8 	bl	8003c2c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10e      	bne.n	8003d1a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff93 	bl	8003c40 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d13a      	bne.n	8003db4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d109      	bne.n	8003d5c <I2S_IRQHandler+0x3a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d102      	bne.n	8003d5c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ffb4 	bl	8003cc4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d126      	bne.n	8003db4 <I2S_IRQHandler+0x92>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d11f      	bne.n	8003db4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ff50 	bl	8003c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d136      	bne.n	8003e2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d109      	bne.n	8003dde <I2S_IRQHandler+0xbc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d102      	bne.n	8003dde <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff45 	bl	8003c68 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d122      	bne.n	8003e2e <I2S_IRQHandler+0x10c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d11b      	bne.n	8003e2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff13 	bl	8003c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a92      	ldr	r2, [pc, #584]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e52:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e54:	e001      	b.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a8b      	ldr	r2, [pc, #556]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e70:	4b8a      	ldr	r3, [pc, #552]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e72:	e001      	b.n	8003e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d004      	beq.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8099 	bne.w	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f925 	bl	80040f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9c8 	bl	8004254 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d13a      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d035      	beq.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ee2:	4b6e      	ldr	r3, [pc, #440]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4969      	ldr	r1, [pc, #420]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ef6:	4b69      	ldr	r3, [pc, #420]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f043 0202 	orr.w	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe88 	bl	8003c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	f040 80c3 	bne.w	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80bd 	beq.w	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a49      	ldr	r2, [pc, #292]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4944      	ldr	r1, [pc, #272]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f86:	428b      	cmp	r3, r1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8c:	e001      	b.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f043 0204 	orr.w	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe4a 	bl	8003c54 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc0:	e089      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d107      	bne.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8be 	bl	8004158 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8fd 	bl	80041f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d12f      	bne.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02a      	beq.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004018:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004026:	e001      	b.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4919      	ldr	r1, [pc, #100]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004034:	428b      	cmp	r3, r1
 8004036:	d101      	bne.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800403a:	e001      	b.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800403c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004044:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fdfa 	bl	8003c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d136      	bne.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d031      	beq.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a07      	ldr	r2, [pc, #28]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004080:	e001      	b.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4902      	ldr	r1, [pc, #8]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408e:	428b      	cmp	r3, r1
 8004090:	d106      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004092:	4b02      	ldr	r3, [pc, #8]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004094:	e006      	b.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004096:	bf00      	nop
 8004098:	40003800 	.word	0x40003800
 800409c:	40003400 	.word	0x40003400
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fdc0 	bl	8003c54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	e000      	b.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d6:	bf00      	nop
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c99      	adds	r1, r3, #2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6251      	str	r1, [r2, #36]	; 0x24
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d113      	bne.n	800414e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004134:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ffc9 	bl	80040e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c99      	adds	r1, r3, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6251      	str	r1, [r2, #36]	; 0x24
 800416a:	8819      	ldrh	r1, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <I2SEx_TxISR_I2SExt+0x22>
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <I2SEx_TxISR_I2SExt+0x94>)
 8004178:	e001      	b.n	800417e <I2SEx_TxISR_I2SExt+0x26>
 800417a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417e:	460a      	mov	r2, r1
 8004180:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d121      	bne.n	80041de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <I2SEx_TxISR_I2SExt+0x90>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <I2SEx_TxISR_I2SExt+0x50>
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <I2SEx_TxISR_I2SExt+0x94>)
 80041a6:	e001      	b.n	80041ac <I2SEx_TxISR_I2SExt+0x54>
 80041a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	490d      	ldr	r1, [pc, #52]	; (80041e8 <I2SEx_TxISR_I2SExt+0x90>)
 80041b4:	428b      	cmp	r3, r1
 80041b6:	d101      	bne.n	80041bc <I2SEx_TxISR_I2SExt+0x64>
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <I2SEx_TxISR_I2SExt+0x94>)
 80041ba:	e001      	b.n	80041c0 <I2SEx_TxISR_I2SExt+0x68>
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff81 	bl	80040e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40003800 	.word	0x40003800
 80041ec:	40003400 	.word	0x40003400

080041f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68d8      	ldr	r0, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	1c99      	adds	r1, r3, #2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004208:	b282      	uxth	r2, r0
 800420a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d113      	bne.n	800424c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004232:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff ff4a 	bl	80040e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <I2SEx_RxISR_I2SExt+0x16>
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004268:	e001      	b.n	800426e <I2SEx_RxISR_I2SExt+0x1a>
 800426a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426e:	68d8      	ldr	r0, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	1c99      	adds	r1, r3, #2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	62d1      	str	r1, [r2, #44]	; 0x2c
 800427a:	b282      	uxth	r2, r0
 800427c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d121      	bne.n	80042da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <I2SEx_RxISR_I2SExt+0x90>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <I2SEx_RxISR_I2SExt+0x50>
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <I2SEx_RxISR_I2SExt+0x94>)
 80042a2:	e001      	b.n	80042a8 <I2SEx_RxISR_I2SExt+0x54>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	490d      	ldr	r1, [pc, #52]	; (80042e4 <I2SEx_RxISR_I2SExt+0x90>)
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d101      	bne.n	80042b8 <I2SEx_RxISR_I2SExt+0x64>
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <I2SEx_RxISR_I2SExt+0x94>)
 80042b6:	e001      	b.n	80042bc <I2SEx_RxISR_I2SExt+0x68>
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff03 	bl	80040e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40003800 	.word	0x40003800
 80042e8:	40003400 	.word	0x40003400

080042ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e267      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d075      	beq.n	80043f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00c      	beq.n	8004330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b85      	ldr	r3, [pc, #532]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431e:	2b08      	cmp	r3, #8
 8004320:	d112      	bne.n	8004348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004322:	4b82      	ldr	r3, [pc, #520]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432e:	d10b      	bne.n	8004348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	4b7e      	ldr	r3, [pc, #504]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05b      	beq.n	80043f4 <HAL_RCC_OscConfig+0x108>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d157      	bne.n	80043f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e242      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d106      	bne.n	8004360 <HAL_RCC_OscConfig+0x74>
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a75      	ldr	r2, [pc, #468]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e01d      	b.n	800439c <HAL_RCC_OscConfig+0xb0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x98>
 800436a:	4b70      	ldr	r3, [pc, #448]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6f      	ldr	r2, [pc, #444]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b6d      	ldr	r3, [pc, #436]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6c      	ldr	r2, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0xb0>
 8004384:	4b69      	ldr	r3, [pc, #420]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a68      	ldr	r2, [pc, #416]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a65      	ldr	r2, [pc, #404]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fc fd7a 	bl	8000e9c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fc fd76 	bl	8000e9c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e207      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b5b      	ldr	r3, [pc, #364]	; (800452c <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0xc0>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fc fd66 	bl	8000e9c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fc fd62 	bl	8000e9c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e1f3      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0xe8>
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d063      	beq.n	80044ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004402:	4b4a      	ldr	r3, [pc, #296]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d11c      	bne.n	8004454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800441a:	4b44      	ldr	r3, [pc, #272]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d116      	bne.n	8004454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_RCC_OscConfig+0x152>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d001      	beq.n	800443e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e1c7      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443e:	4b3b      	ldr	r3, [pc, #236]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4937      	ldr	r1, [pc, #220]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004452:	e03a      	b.n	80044ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445c:	4b34      	ldr	r3, [pc, #208]	; (8004530 <HAL_RCC_OscConfig+0x244>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fc fd1b 	bl	8000e9c <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800446a:	f7fc fd17 	bl	8000e9c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e1a8      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4925      	ldr	r1, [pc, #148]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	e015      	b.n	80044ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCC_OscConfig+0x244>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fc fcfa 	bl	8000e9c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ac:	f7fc fcf6 	bl	8000e9c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e187      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	4b1b      	ldr	r3, [pc, #108]	; (800452c <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d036      	beq.n	8004544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <HAL_RCC_OscConfig+0x248>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc fcda 	bl	8000e9c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ec:	f7fc fcd6 	bl	8000e9c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e167      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x240>)
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x200>
 800450a:	e01b      	b.n	8004544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_OscConfig+0x248>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fc fcc3 	bl	8000e9c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	e00e      	b.n	8004538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451a:	f7fc fcbf 	bl	8000e9c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d907      	bls.n	8004538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e150      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
 800452c:	40023800 	.word	0x40023800
 8004530:	42470000 	.word	0x42470000
 8004534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004538:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x470>)
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ea      	bne.n	800451a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8097 	beq.w	8004680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004556:	4b81      	ldr	r3, [pc, #516]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	4b7d      	ldr	r3, [pc, #500]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a7c      	ldr	r2, [pc, #496]	; (800475c <HAL_RCC_OscConfig+0x470>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b7a      	ldr	r3, [pc, #488]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004582:	4b77      	ldr	r3, [pc, #476]	; (8004760 <HAL_RCC_OscConfig+0x474>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458e:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_OscConfig+0x474>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a73      	ldr	r2, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x474>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fc fc7f 	bl	8000e9c <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fc fc7b 	bl	8000e9c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e10c      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_OscConfig+0x474>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2ea>
 80045c8:	4b64      	ldr	r3, [pc, #400]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a63      	ldr	r2, [pc, #396]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	e01c      	b.n	8004610 <HAL_RCC_OscConfig+0x324>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x30c>
 80045de:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a5b      	ldr	r2, [pc, #364]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0x324>
 80045f8:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a57      	ldr	r2, [pc, #348]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a54      	ldr	r2, [pc, #336]	; (800475c <HAL_RCC_OscConfig+0x470>)
 800460a:	f023 0304 	bic.w	r3, r3, #4
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc fc40 	bl	8000e9c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fc fc3c 	bl	8000e9c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0cb      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	4b49      	ldr	r3, [pc, #292]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0ee      	beq.n	8004620 <HAL_RCC_OscConfig+0x334>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004644:	f7fc fc2a 	bl	8000e9c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fc fc26 	bl	8000e9c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0b5      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004662:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ee      	bne.n	800464c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4a38      	ldr	r2, [pc, #224]	; (800475c <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a1 	beq.w	80047cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800468a:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_OscConfig+0x470>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b08      	cmp	r3, #8
 8004694:	d05c      	beq.n	8004750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d141      	bne.n	8004722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b31      	ldr	r3, [pc, #196]	; (8004764 <HAL_RCC_OscConfig+0x478>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fc fbfa 	bl	8000e9c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fc fbf6 	bl	8000e9c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e087      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	019b      	lsls	r3, r3, #6
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	3b01      	subs	r3, #1
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	491b      	ldr	r1, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x470>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x478>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fc fbcf 	bl	8000e9c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004702:	f7fc fbcb 	bl	8000e9c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e05c      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x416>
 8004720:	e054      	b.n	80047cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RCC_OscConfig+0x478>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc fbb8 	bl	8000e9c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc fbb4 	bl	8000e9c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e045      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x470>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x444>
 800474e:	e03d      	b.n	80047cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e038      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
 800475c:	40023800 	.word	0x40023800
 8004760:	40007000 	.word	0x40007000
 8004764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x4ec>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d028      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d121      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d11a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800479e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	3b01      	subs	r3, #1
 80047b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0cc      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b68      	ldr	r3, [pc, #416]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d90c      	bls.n	8004818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b65      	ldr	r3, [pc, #404]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b63      	ldr	r3, [pc, #396]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0b8      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4a58      	ldr	r2, [pc, #352]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800483a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004848:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a52      	ldr	r2, [pc, #328]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004854:	4b50      	ldr	r3, [pc, #320]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	494d      	ldr	r1, [pc, #308]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d044      	beq.n	80048fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d119      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e07f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d003      	beq.n	800489a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004896:	2b03      	cmp	r3, #3
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e06f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e067      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4934      	ldr	r1, [pc, #208]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048cc:	f7fc fae6 	bl	8000e9c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fc fae2 	bl	8000e9c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e04f      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 020c 	and.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1eb      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d20c      	bcs.n	8004924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e032      	b.n	800498a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4916      	ldr	r1, [pc, #88]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	490e      	ldr	r1, [pc, #56]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004962:	f000 f821 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004966:	4602      	mov	r2, r0
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	490a      	ldr	r1, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	5ccb      	ldrb	r3, [r1, r3]
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc fa46 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023c00 	.word	0x40023c00
 8004998:	40023800 	.word	0x40023800
 800499c:	0800c05c 	.word	0x0800c05c
 80049a0:	20000000 	.word	0x20000000
 80049a4:	20000004 	.word	0x20000004

080049a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ac:	b094      	sub	sp, #80	; 0x50
 80049ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	647b      	str	r3, [r7, #68]	; 0x44
 80049b4:	2300      	movs	r3, #0
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	2300      	movs	r3, #0
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c0:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d00d      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x40>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	f200 80e1 	bhi.w	8004b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x34>
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d003      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049da:	e0db      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_GetSysClockFreq+0x204>)
 80049de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049e0:	e0db      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049e2:	4b73      	ldr	r3, [pc, #460]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e6:	e0d8      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e8:	4b6f      	ldr	r3, [pc, #444]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f2:	4b6d      	ldr	r3, [pc, #436]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d063      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fe:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	2200      	movs	r2, #0
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30
 8004a12:	2300      	movs	r3, #0
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
 8004a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	0159      	lsls	r1, r3, #5
 8004a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a2c:	0150      	lsls	r0, r2, #5
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4621      	mov	r1, r4
 8004a34:	1a51      	subs	r1, r2, r1
 8004a36:	6139      	str	r1, [r7, #16]
 8004a38:	4629      	mov	r1, r5
 8004a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	018b      	lsls	r3, r1, #6
 8004a50:	4651      	mov	r1, sl
 8004a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a56:	4651      	mov	r1, sl
 8004a58:	018a      	lsls	r2, r1, #6
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a60:	4659      	mov	r1, fp
 8004a62:	eb63 0901 	sbc.w	r9, r3, r1
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7a:	4690      	mov	r8, r2
 8004a7c:	4699      	mov	r9, r3
 8004a7e:	4623      	mov	r3, r4
 8004a80:	eb18 0303 	adds.w	r3, r8, r3
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	462b      	mov	r3, r5
 8004a88:	eb49 0303 	adc.w	r3, r9, r3
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	024b      	lsls	r3, r1, #9
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	024a      	lsls	r2, r1, #9
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aae:	2200      	movs	r2, #0
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ab8:	f7fb fb8a 	bl	80001d0 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac4:	e058      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac6:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	099b      	lsrs	r3, r3, #6
 8004acc:	2200      	movs	r2, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	0159      	lsls	r1, r3, #5
 8004aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af2:	0150      	lsls	r0, r2, #5
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4641      	mov	r1, r8
 8004afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b18:	ebb2 040a 	subs.w	r4, r2, sl
 8004b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	eb45 0303 	adc.w	r3, r5, r3
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	028b      	lsls	r3, r1, #10
 8004b52:	4621      	mov	r1, r4
 8004b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b58:	4621      	mov	r1, r4
 8004b5a:	028a      	lsls	r2, r1, #10
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b62:	2200      	movs	r2, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	61fa      	str	r2, [r7, #28]
 8004b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b6c:	f7fb fb30 	bl	80001d0 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetSysClockFreq+0x204>)
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3750      	adds	r7, #80	; 0x50
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	007a1200 	.word	0x007a1200

08004bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0a9b      	lsrs	r3, r3, #10
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	0800c06c 	.word	0x0800c06c

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d035      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c1c:	4b62      	ldr	r3, [pc, #392]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fc f93b 	bl	8000e9c <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c2a:	f7fc f937 	bl	8000e9c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0b0      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	019a      	lsls	r2, r3, #6
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	071b      	lsls	r3, r3, #28
 8004c54:	4955      	ldr	r1, [pc, #340]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c5c:	4b52      	ldr	r3, [pc, #328]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fc f91b 	bl	8000e9c <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c6a:	f7fc f917 	bl	8000e9c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e090      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8083 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	4b44      	ldr	r3, [pc, #272]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc f8ed 	bl	8000e9c <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fc f8e9 	bl	8000e9c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e062      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce4:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02f      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d028      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d18:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d114      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fc f8b7 	bl	8000e9c <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fc f8b3 	bl	8000e9c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e02a      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d60:	d10d      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d76:	490d      	ldr	r1, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
 8004d7c:	e005      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d88:	6093      	str	r3, [r2, #8]
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d96:	4905      	ldr	r1, [pc, #20]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	42470068 	.word	0x42470068
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40007000 	.word	0x40007000
 8004db4:	42470e40 	.word	0x42470e40

08004db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d13f      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dec:	d12f      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dee:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004df0:	617b      	str	r3, [r7, #20]
          break;
 8004df2:	e02f      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004df4:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e00:	d108      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e007      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e24:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	617b      	str	r3, [r7, #20]
          break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
          break;
 8004e52:	bf00      	nop
        }
      }
      break;
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e56:	bf00      	nop
    }
  }
  return frequency;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00bb8000 	.word	0x00bb8000
 8004e70:	007a1200 	.word	0x007a1200
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07b      	b.n	8004f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d009      	beq.n	8004eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
 8004ea2:	e005      	b.n	8004eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fe98 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	f003 0104 	and.w	r1, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0210 	and.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	f107 001c 	add.w	r0, r7, #28
 8004f98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d123      	bne.n	8004fec <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9dc 	bl	800539e <USB_CoreReset>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e01b      	b.n	8005024 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9d0 	bl	800539e <USB_CoreReset>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005002:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
 8005016:	e005      	b.n	8005024 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005024:	7fbb      	ldrb	r3, [r7, #30]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10b      	bne.n	8005042 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f043 0206 	orr.w	r2, r3, #6
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504e:	b004      	add	sp, #16
 8005050:	4770      	bx	lr

08005052 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 0201 	bic.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d115      	bne.n	80050e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c4:	200a      	movs	r0, #10
 80050c6:	f7fb fef5 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	330a      	adds	r3, #10
 80050ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f956 	bl	8005382 <USB_GetMode>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d01e      	beq.n	800511a <USB_SetCurrentMode+0x84>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2bc7      	cmp	r3, #199	; 0xc7
 80050e0:	d9f0      	bls.n	80050c4 <USB_SetCurrentMode+0x2e>
 80050e2:	e01a      	b.n	800511a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d115      	bne.n	8005116 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050f6:	200a      	movs	r0, #10
 80050f8:	f7fb fedc 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	330a      	adds	r3, #10
 8005100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f93d 	bl	8005382 <USB_GetMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <USB_SetCurrentMode+0x84>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2bc7      	cmp	r3, #199	; 0xc7
 8005112:	d9f0      	bls.n	80050f6 <USB_SetCurrentMode+0x60>
 8005114:	e001      	b.n	800511a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e005      	b.n	8005126 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2bc8      	cmp	r3, #200	; 0xc8
 800511e:	d101      	bne.n	8005124 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3301      	adds	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005148:	d901      	bls.n	800514e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e01b      	b.n	8005186 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	daf2      	bge.n	800513c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005172:	d901      	bls.n	8005178 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e006      	b.n	8005186 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b20      	cmp	r3, #32
 8005182:	d0f0      	beq.n	8005166 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051aa:	d901      	bls.n	80051b0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e018      	b.n	80051e2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	daf2      	bge.n	800519e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2210      	movs	r2, #16
 80051c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051ce:	d901      	bls.n	80051d4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d0f0      	beq.n	80051c2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b089      	sub	sp, #36	; 0x24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4611      	mov	r1, r2
 80051fa:	461a      	mov	r2, r3
 80051fc:	460b      	mov	r3, r1
 80051fe:	71fb      	strb	r3, [r7, #7]
 8005200:	4613      	mov	r3, r2
 8005202:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800520c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d123      	bne.n	800525c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005214:	88bb      	ldrh	r3, [r7, #4]
 8005216:	3303      	adds	r3, #3
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800521c:	2300      	movs	r3, #0
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e018      	b.n	8005254 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	031a      	lsls	r2, r3, #12
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4413      	add	r3, r2
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	461a      	mov	r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3301      	adds	r3, #1
 800523a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3301      	adds	r3, #1
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d3e2      	bcc.n	8005222 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800526a:	b480      	push	{r7}
 800526c:	b08b      	sub	sp, #44	; 0x2c
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	4613      	mov	r3, r2
 8005276:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	b29b      	uxth	r3, r3
 8005286:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	e014      	b.n	80052c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	3301      	adds	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	3301      	adds	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	3301      	adds	r3, #1
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	3301      	adds	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	3301      	adds	r3, #1
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d3e6      	bcc.n	8005296 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052c8:	8bfb      	ldrh	r3, [r7, #30]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01e      	beq.n	800530c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d8:	461a      	mov	r2, r3
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	fa22 f303 	lsr.w	r3, r2, r3
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	701a      	strb	r2, [r3, #0]
      i++;
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	3301      	adds	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]
      pDest++;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005300:	8bfb      	ldrh	r3, [r7, #30]
 8005302:	3b01      	subs	r3, #1
 8005304:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005306:	8bfb      	ldrh	r3, [r7, #30]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1ea      	bne.n	80052e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800530e:	4618      	mov	r0, r3
 8005310:	372c      	adds	r7, #44	; 0x2c
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4013      	ands	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005374:	68bb      	ldr	r3, [r7, #8]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0301 	and.w	r3, r3, #1
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053b6:	d901      	bls.n	80053bc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e01b      	b.n	80053f4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	daf2      	bge.n	80053aa <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053e0:	d901      	bls.n	80053e6 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e006      	b.n	80053f4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d0f0      	beq.n	80053d4 <USB_CoreReset+0x36>

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005400:	b084      	sub	sp, #16
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800540e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d119      	bne.n	800548a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10a      	bne.n	8005474 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800546c:	f043 0304 	orr.w	r3, r3, #4
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e014      	b.n	800549e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	e009      	b.n	800549e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005498:	f023 0304 	bic.w	r3, r3, #4
 800549c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800549e:	2110      	movs	r1, #16
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fe44 	bl	800512e <USB_FlushTxFifo>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fe6e 	bl	8005192 <USB_FlushRxFifo>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e015      	b.n	80054f2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80054f6:	461a      	mov	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d3e3      	bcc.n	80054c6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <USB_HostInit+0x170>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10b      	bne.n	800552c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <USB_HostInit+0x174>)
 8005520:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <USB_HostInit+0x178>)
 8005526:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800552a:	e009      	b.n	8005540 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <USB_HostInit+0x17c>)
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a11      	ldr	r2, [pc, #68]	; (8005580 <USB_HostInit+0x180>)
 800553c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f043 0210 	orr.w	r2, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <USB_HostInit+0x184>)
 800555a:	4313      	orrs	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800556c:	b004      	add	sp, #16
 800556e:	4770      	bx	lr
 8005570:	40040000 	.word	0x40040000
 8005574:	01000200 	.word	0x01000200
 8005578:	00e00300 	.word	0x00e00300
 800557c:	00600080 	.word	0x00600080
 8005580:	004000e0 	.word	0x004000e0
 8005584:	a3200008 	.word	0xa3200008

08005588 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d0:	461a      	mov	r2, r3
 80055d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055d6:	6053      	str	r3, [r2, #4]
 80055d8:	e00c      	b.n	80055f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d107      	bne.n	80055f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e6:	461a      	mov	r2, r3
 80055e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80055ec:	6053      	str	r3, [r2, #4]
 80055ee:	e001      	b.n	80055f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005622:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800562c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005630:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005632:	2064      	movs	r0, #100	; 0x64
 8005634:	f7fb fc3e 	bl	8000eb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005646:	200a      	movs	r0, #10
 8005648:	f7fb fc34 	bl	8000eb4 <HAL_Delay>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800567a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <USB_DriveVbus+0x44>
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005698:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d109      	bne.n	80056ba <USB_DriveVbus+0x64>
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	0c5b      	lsrs	r3, r3, #17
 80056e6:	f003 0303 	and.w	r3, r3, #3
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	b29b      	uxth	r3, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	70fb      	strb	r3, [r7, #3]
 800572a:	460b      	mov	r3, r1
 800572c:	70bb      	strb	r3, [r7, #2]
 800572e:	4613      	mov	r3, r2
 8005730:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800574c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800574e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005752:	2b03      	cmp	r3, #3
 8005754:	d87c      	bhi.n	8005850 <USB_HC_Init+0x138>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <USB_HC_Init+0x44>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	0800576d 	.word	0x0800576d
 8005760:	08005813 	.word	0x08005813
 8005764:	0800576d 	.word	0x0800576d
 8005768:	080057d5 	.word	0x080057d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	461a      	mov	r2, r3
 800577a:	f240 439d 	movw	r3, #1181	; 0x49d
 800577e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005780:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005784:	2b00      	cmp	r3, #0
 8005786:	da10      	bge.n	80057aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	440a      	add	r2, r1
 800579e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80057a8:	e055      	b.n	8005856 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a6f      	ldr	r2, [pc, #444]	; (800596c <USB_HC_Init+0x254>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d151      	bne.n	8005856 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057d0:	60d3      	str	r3, [r2, #12]
      break;
 80057d2:	e040      	b.n	8005856 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80057e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da34      	bge.n	800585a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	440a      	add	r2, r1
 8005806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800580a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005810:	e023      	b.n	800585a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	461a      	mov	r2, r3
 8005820:	f240 2325 	movw	r3, #549	; 0x225
 8005824:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da17      	bge.n	800585e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	440a      	add	r2, r1
 8005844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005848:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800584c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800584e:	e006      	b.n	800585e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77fb      	strb	r3, [r7, #31]
      break;
 8005854:	e004      	b.n	8005860 <USB_HC_Init+0x148>
      break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <USB_HC_Init+0x148>
      break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <USB_HC_Init+0x148>
      break;
 800585e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058ac:	4313      	orrs	r3, r2
 80058ae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da03      	bge.n	80058cc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e001      	b.n	80058d0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fef9 	bl	80056c8 <USB_GetHostSpeed>
 80058d6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d106      	bne.n	80058ee <USB_HC_Init+0x1d6>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d003      	beq.n	80058ee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f2:	787b      	ldrb	r3, [r7, #1]
 80058f4:	059b      	lsls	r3, r3, #22
 80058f6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058fa:	78bb      	ldrb	r3, [r7, #2]
 80058fc:	02db      	lsls	r3, r3, #11
 80058fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005902:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005904:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005908:	049b      	lsls	r3, r3, #18
 800590a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800590e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005910:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005912:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005916:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	431a      	orrs	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800592c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005930:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005932:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005936:	2b03      	cmp	r3, #3
 8005938:	d003      	beq.n	8005942 <USB_HC_Init+0x22a>
 800593a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10f      	bne.n	8005962 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	440a      	add	r2, r1
 8005958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005960:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005962:	7ffb      	ldrb	r3, [r7, #31]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40040000 	.word	0x40040000

08005970 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	; 0x30
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800598c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a5d      	ldr	r2, [pc, #372]	; (8005b08 <USB_HC_StartXfer+0x198>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d12f      	bne.n	80059f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d11c      	bne.n	80059d6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	7c9b      	ldrb	r3, [r3, #18]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <USB_HC_StartXfer+0x3c>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	7c9b      	ldrb	r3, [r3, #18]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d124      	bne.n	80059f6 <USB_HC_StartXfer+0x86>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	799b      	ldrb	r3, [r3, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d120      	bne.n	80059f6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60d3      	str	r3, [r2, #12]
 80059d4:	e00f      	b.n	80059f6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <USB_HC_StartXfer+0x86>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	795b      	ldrb	r3, [r3, #5]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fb6b 	bl	80060c8 <USB_DoPing>
        return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e232      	b.n	8005e5c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	799b      	ldrb	r3, [r3, #6]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d158      	bne.n	8005ab0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	8a92      	ldrh	r2, [r2, #20]
 8005a10:	fb03 f202 	mul.w	r2, r3, r2
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61da      	str	r2, [r3, #28]
 8005a18:	e07c      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	7c9b      	ldrb	r3, [r3, #18]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d130      	bne.n	8005a84 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	2bbc      	cmp	r3, #188	; 0xbc
 8005a28:	d918      	bls.n	8005a5c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	8a9b      	ldrh	r3, [r3, #20]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d003      	beq.n	8005a4c <USB_HC_StartXfer+0xdc>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d103      	bne.n	8005a54 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e05f      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2201      	movs	r2, #1
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	e05b      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d007      	beq.n	8005a7c <USB_HC_StartXfer+0x10c>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d003      	beq.n	8005a7c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2204      	movs	r2, #4
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	e04b      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2203      	movs	r2, #3
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	e047      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d10d      	bne.n	8005aa6 <USB_HC_StartXfer+0x136>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	8a92      	ldrh	r2, [r2, #20]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d907      	bls.n	8005aa6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	8a92      	ldrh	r2, [r2, #20]
 8005a9c:	fb03 f202 	mul.w	r2, r3, r2
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61da      	str	r2, [r3, #28]
 8005aa4:	e036      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	e031      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d018      	beq.n	8005aea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	8a92      	ldrh	r2, [r2, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	8a92      	ldrh	r2, [r2, #20]
 8005ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005acc:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8005ace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ad0:	8b7b      	ldrh	r3, [r7, #26]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d90b      	bls.n	8005aee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	8a92      	ldrh	r2, [r2, #20]
 8005ae0:	fb03 f202 	mul.w	r2, r3, r2
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61da      	str	r2, [r3, #28]
 8005ae8:	e001      	b.n	8005aee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005aea:	2301      	movs	r3, #1
 8005aec:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	8a92      	ldrh	r2, [r2, #20]
 8005afc:	fb03 f202 	mul.w	r2, r3, r2
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61da      	str	r2, [r3, #28]
 8005b04:	e006      	b.n	8005b14 <USB_HC_StartXfer+0x1a4>
 8005b06:	bf00      	nop
 8005b08:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b1e:	04d9      	lsls	r1, r3, #19
 8005b20:	4ba3      	ldr	r3, [pc, #652]	; (8005db0 <USB_HC_StartXfer+0x440>)
 8005b22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	7d9b      	ldrb	r3, [r3, #22]
 8005b2a:	075b      	lsls	r3, r3, #29
 8005b2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b30:	69f9      	ldr	r1, [r7, #28]
 8005b32:	0148      	lsls	r0, r1, #5
 8005b34:	6a39      	ldr	r1, [r7, #32]
 8005b36:	4401      	add	r1, r0
 8005b38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6999      	ldr	r1, [r3, #24]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	460a      	mov	r2, r1
 8005b58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	7e7b      	ldrb	r3, [r7, #25]
 8005ba2:	075b      	lsls	r3, r3, #29
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	0148      	lsls	r0, r1, #5
 8005ba8:	6a39      	ldr	r1, [r7, #32]
 8005baa:	4401      	add	r1, r0
 8005bac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	799b      	ldrb	r3, [r3, #6]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 80c3 	bne.w	8005d44 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	7c5b      	ldrb	r3, [r3, #17]
 8005bc2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bda:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bfa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	79db      	ldrb	r3, [r3, #7]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d123      	bne.n	8005c4c <USB_HC_StartXfer+0x2dc>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d11f      	bne.n	8005c4c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	7c9b      	ldrb	r3, [r3, #18]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d003      	beq.n	8005c5c <USB_HC_StartXfer+0x2ec>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	7c9b      	ldrb	r3, [r3, #18]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d117      	bne.n	8005c8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d113      	bne.n	8005c8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d10f      	bne.n	8005c8c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	7c9b      	ldrb	r3, [r3, #18]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d162      	bne.n	8005d5a <USB_HC_StartXfer+0x3ea>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d15e      	bne.n	8005d5a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d858      	bhi.n	8005d58 <USB_HC_StartXfer+0x3e8>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <USB_HC_StartXfer+0x33c>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005d01 	.word	0x08005d01
 8005cb8:	08005d23 	.word	0x08005d23
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	6053      	str	r3, [r2, #4]
          break;
 8005cdc:	e03d      	b.n	8005d5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f043 030e 	orr.w	r3, r3, #14
 8005cfc:	6053      	str	r3, [r2, #4]
          break;
 8005cfe:	e02c      	b.n	8005d5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	6a3a      	ldr	r2, [r7, #32]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d1e:	6053      	str	r3, [r2, #4]
          break;
 8005d20:	e01b      	b.n	8005d5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d40:	6053      	str	r3, [r2, #4]
          break;
 8005d42:	e00a      	b.n	8005d5a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	2300      	movs	r3, #0
 8005d54:	6053      	str	r3, [r2, #4]
 8005d56:	e000      	b.n	8005d5a <USB_HC_StartXfer+0x3ea>
          break;
 8005d58:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d70:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	78db      	ldrb	r3, [r3, #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e003      	b.n	8005d8c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d8a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d92:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	461a      	mov	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e055      	b.n	8005e5c <USB_HC_StartXfer+0x4ec>
 8005db0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	78db      	ldrb	r3, [r3, #3]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d14e      	bne.n	8005e5a <USB_HC_StartXfer+0x4ea>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d04a      	beq.n	8005e5a <USB_HC_StartXfer+0x4ea>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	79db      	ldrb	r3, [r3, #7]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d146      	bne.n	8005e5a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	7c9b      	ldrb	r3, [r3, #18]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d831      	bhi.n	8005e38 <USB_HC_StartXfer+0x4c8>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USB_HC_StartXfer+0x46c>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	08005e11 	.word	0x08005e11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	3303      	adds	r3, #3
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005df6:	8afa      	ldrh	r2, [r7, #22]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d91c      	bls.n	8005e3c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f043 0220 	orr.w	r2, r3, #32
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e0e:	e015      	b.n	8005e3c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	3303      	adds	r3, #3
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e1a:	8afa      	ldrh	r2, [r7, #22]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90a      	bls.n	8005e40 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e36:	e003      	b.n	8005e40 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005e38:	bf00      	nop
 8005e3a:	e002      	b.n	8005e42 <USB_HC_StartXfer+0x4d2>
        break;
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <USB_HC_StartXfer+0x4d2>
        break;
 8005e40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	785a      	ldrb	r2, [r3, #1]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2000      	movs	r0, #0
 8005e52:	9000      	str	r0, [sp, #0]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff f9ca 	bl	80051ee <USB_WritePacket>
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	b29b      	uxth	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b089      	sub	sp, #36	; 0x24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	0c9b      	lsrs	r3, r3, #18
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0fdb      	lsrs	r3, r3, #31
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	0fdb      	lsrs	r3, r3, #31
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d10d      	bne.n	8005f08 <USB_HC_Halt+0x82>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <USB_HC_Halt+0x82>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d002      	beq.n	8005f04 <USB_HC_Halt+0x7e>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d101      	bne.n	8005f08 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e0d8      	b.n	80060ba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <USB_HC_Halt+0x8e>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d173      	bne.n	8005ffc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d14a      	bne.n	8005fd6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d133      	bne.n	8005fb4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d82e      	bhi.n	8005ff8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb0:	d0ec      	beq.n	8005f8c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb2:	e081      	b.n	80060b8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fd4:	e070      	b.n	80060b8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ff6:	e05f      	b.n	80060b8 <USB_HC_Halt+0x232>
            break;
 8005ff8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ffa:	e05d      	b.n	80060b8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d133      	bne.n	8006094 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800604a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800606a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	3301      	adds	r3, #1
 8006070:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006078:	d81d      	bhi.n	80060b6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006090:	d0ec      	beq.n	800606c <USB_HC_Halt+0x1e6>
 8006092:	e011      	b.n	80060b8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e000      	b.n	80060b8 <USB_HC_Halt+0x232>
          break;
 80060b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	04da      	lsls	r2, r3, #19
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <USB_DoPing+0x74>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006110:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006118:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	1ff80000 	.word	0x1ff80000

08006140 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fe ff8d 	bl	8005074 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800615a:	2110      	movs	r1, #16
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fe ffe6 	bl	800512e <USB_FlushTxFifo>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff f810 	bl	8005192 <USB_FlushRxFifo>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e01f      	b.n	80061c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006198:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	461a      	mov	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	3301      	adds	r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b0f      	cmp	r3, #15
 80061c6:	d9dc      	bls.n	8006182 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e034      	b.n	8006238 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	461a      	mov	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006214:	d80c      	bhi.n	8006230 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800622c:	d0ec      	beq.n	8006208 <USB_StopHost+0xc8>
 800622e:	e000      	b.n	8006232 <USB_StopHost+0xf2>
        break;
 8006230:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3301      	adds	r3, #1
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b0f      	cmp	r3, #15
 800623c:	d9c7      	bls.n	80061ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006244:	461a      	mov	r2, r3
 8006246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006252:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fe fefc 	bl	8005052 <USB_EnableGlobalInt>

  return ret;
 800625a:	7ffb      	ldrb	r3, [r7, #31]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af04      	add	r7, sp, #16
 800626a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800626c:	2301      	movs	r3, #1
 800626e:	2202      	movs	r2, #2
 8006270:	2102      	movs	r1, #2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fcd1 	bl	8006c1a <USBH_FindInterface>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d002      	beq.n	8006288 <USBH_CDC_InterfaceInit+0x24>
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d901      	bls.n	800628c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006288:	2302      	movs	r3, #2
 800628a:	e13d      	b.n	8006508 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fca6 	bl	8006be2 <USBH_SelectInterface>
 8006296:	4603      	mov	r3, r0
 8006298:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80062a0:	2302      	movs	r3, #2
 80062a2:	e131      	b.n	8006508 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80062aa:	2050      	movs	r0, #80	; 0x50
 80062ac:	f005 fd32 	bl	800bd14 <malloc>
 80062b0:	4603      	mov	r3, r0
 80062b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062c4:	2302      	movs	r3, #2
 80062c6:	e11f      	b.n	8006508 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062c8:	2250      	movs	r2, #80	; 0x50
 80062ca:	2100      	movs	r1, #0
 80062cc:	68b8      	ldr	r0, [r7, #8]
 80062ce:	f005 fddd 	bl	800be8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	211a      	movs	r1, #26
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da15      	bge.n	8006316 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	211a      	movs	r1, #26
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062fa:	781a      	ldrb	r2, [r3, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	211a      	movs	r1, #26
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	4413      	add	r3, r2
 800630c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fa26 	bl	800876e <USBH_AllocPipe>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	7819      	ldrb	r1, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	7858      	ldrb	r0, [r3, #1]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	8952      	ldrh	r2, [r2, #10]
 8006342:	9202      	str	r2, [sp, #8]
 8006344:	2203      	movs	r2, #3
 8006346:	9201      	str	r2, [sp, #4]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	4623      	mov	r3, r4
 800634c:	4602      	mov	r2, r0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f002 f9de 	bl	8008710 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f005 fc53 	bl	800bc08 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	210a      	movs	r1, #10
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc56 	bl	8006c1a <USBH_FindInterface>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2bff      	cmp	r3, #255	; 0xff
 8006376:	d002      	beq.n	800637e <USBH_CDC_InterfaceInit+0x11a>
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d901      	bls.n	8006382 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800637e:	2302      	movs	r3, #2
 8006380:	e0c2      	b.n	8006508 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	211a      	movs	r1, #26
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b25b      	sxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	da16      	bge.n	80063c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	211a      	movs	r1, #26
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063c0:	881a      	ldrh	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	835a      	strh	r2, [r3, #26]
 80063c6:	e015      	b.n	80063f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	211a      	movs	r1, #26
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b25b      	sxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	da16      	bge.n	800643a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	211a      	movs	r1, #26
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	4413      	add	r3, r2
 8006418:	f203 3356 	addw	r3, r3, #854	; 0x356
 800641c:	781a      	ldrb	r2, [r3, #0]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	211a      	movs	r1, #26
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	835a      	strh	r2, [r3, #26]
 8006438:	e015      	b.n	8006466 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	211a      	movs	r1, #26
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	f203 3356 	addw	r3, r3, #854	; 0x356
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	211a      	movs	r1, #26
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006460:	881a      	ldrh	r2, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7b9b      	ldrb	r3, [r3, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f002 f97e 	bl	800876e <USBH_AllocPipe>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7bdb      	ldrb	r3, [r3, #15]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 f974 	bl	800876e <USBH_AllocPipe>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	7b59      	ldrb	r1, [r3, #13]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	7b98      	ldrb	r0, [r3, #14]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	8b12      	ldrh	r2, [r2, #24]
 80064a6:	9202      	str	r2, [sp, #8]
 80064a8:	2202      	movs	r2, #2
 80064aa:	9201      	str	r2, [sp, #4]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	4623      	mov	r3, r4
 80064b0:	4602      	mov	r2, r0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 f92c 	bl	8008710 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	7b19      	ldrb	r1, [r3, #12]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	7bd8      	ldrb	r0, [r3, #15]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	8b52      	ldrh	r2, [r2, #26]
 80064d0:	9202      	str	r2, [sp, #8]
 80064d2:	2202      	movs	r2, #2
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4623      	mov	r3, r4
 80064da:	4602      	mov	r2, r0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 f917 	bl	8008710 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	7b5b      	ldrb	r3, [r3, #13]
 80064ee:	2200      	movs	r2, #0
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f005 fb88 	bl	800bc08 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f005 fb81 	bl	800bc08 <USBH_LL_SetToggle>

  return USBH_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	bd90      	pop	{r4, r7, pc}

08006510 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f002 f90c 	bl	800874e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f002 f937 	bl	80087b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7b1b      	ldrb	r3, [r3, #12]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f002 f8f9 	bl	800874e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7b1b      	ldrb	r3, [r3, #12]
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f002 f924 	bl	80087b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7b5b      	ldrb	r3, [r3, #13]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	7b5b      	ldrb	r3, [r3, #13]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 f8e6 	bl	800874e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	7b5b      	ldrb	r3, [r3, #13]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 f911 	bl	80087b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f005 fbbb 	bl	800bd24 <free>
    phost->pActiveClass->pData = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	2200      	movs	r2, #0
 80065b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3340      	adds	r3, #64	; 0x40
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8b1 	bl	8006742 <GetLineCoding>
 80065e0:	4603      	mov	r3, r0
 80065e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f0:	2102      	movs	r1, #2
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065f6:	7afb      	ldrb	r3, [r7, #11]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006620:	2b04      	cmp	r3, #4
 8006622:	d877      	bhi.n	8006714 <USBH_CDC_Process+0x114>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <USBH_CDC_Process+0x2c>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006641 	.word	0x08006641
 8006630:	08006647 	.word	0x08006647
 8006634:	08006677 	.word	0x08006677
 8006638:	080066eb 	.word	0x080066eb
 800663c:	080066f9 	.word	0x080066f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
      break;
 8006644:	e06d      	b.n	8006722 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f897 	bl	8006780 <SetLineCoding>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006664:	e058      	b.n	8006718 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d055      	beq.n	8006718 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2204      	movs	r2, #4
 8006670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006674:	e050      	b.n	8006718 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3340      	adds	r3, #64	; 0x40
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f860 	bl	8006742 <GetLineCoding>
 8006682:	4603      	mov	r3, r0
 8006684:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d126      	bne.n	80066da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	791b      	ldrb	r3, [r3, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d13b      	bne.n	800671c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d133      	bne.n	800671c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d12b      	bne.n	800671c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d124      	bne.n	800671c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f982 	bl	80069dc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066d8:	e020      	b.n	800671c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d01d      	beq.n	800671c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2204      	movs	r2, #4
 80066e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066e8:	e018      	b.n	800671c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f867 	bl	80067be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8f6 	bl	80068e2 <CDC_ProcessReception>
      break;
 80066f6:	e014      	b.n	8006722 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066f8:	2100      	movs	r1, #0
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f98a 	bl	8007a14 <USBH_ClrFeature>
 8006700:	4603      	mov	r3, r0
 8006702:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006712:	e005      	b.n	8006720 <USBH_CDC_Process+0x120>

    default:
      break;
 8006714:	bf00      	nop
 8006716:	e004      	b.n	8006722 <USBH_CDC_Process+0x122>
      break;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <USBH_CDC_Process+0x122>
      break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <USBH_CDC_Process+0x122>
      break;
 8006720:	bf00      	nop

  }

  return status;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	22a1      	movs	r2, #161	; 0xa1
 8006750:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2207      	movs	r2, #7
 8006768:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2207      	movs	r2, #7
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 fc8b 	bl	800808c <USBH_CtlReq>
 8006776:	4603      	mov	r3, r0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2221      	movs	r2, #33	; 0x21
 800678e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2207      	movs	r2, #7
 80067a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2207      	movs	r2, #7
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fc6c 	bl	800808c <USBH_CtlReq>
 80067b4:	4603      	mov	r3, r0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af02      	add	r7, sp, #8
 80067c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d002      	beq.n	80067e4 <CDC_ProcessTransmission+0x26>
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d023      	beq.n	800682a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067e2:	e07a      	b.n	80068da <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	8b12      	ldrh	r2, [r2, #24]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d90b      	bls.n	8006808 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69d9      	ldr	r1, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8b1a      	ldrh	r2, [r3, #24]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	7b5b      	ldrb	r3, [r3, #13]
 80067fc:	2001      	movs	r0, #1
 80067fe:	9000      	str	r0, [sp, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 ff42 	bl	800868a <USBH_BulkSendData>
 8006806:	e00b      	b.n	8006820 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	7b5b      	ldrb	r3, [r3, #13]
 8006816:	2001      	movs	r0, #1
 8006818:	9000      	str	r0, [sp, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 ff35 	bl	800868a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006828:	e057      	b.n	80068da <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	7b5b      	ldrb	r3, [r3, #13]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f005 f9bf 	bl	800bbb4 <USBH_LL_GetURBState>
 8006836:	4603      	mov	r3, r0
 8006838:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d136      	bne.n	80068ae <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	8b12      	ldrh	r2, [r2, #24]
 8006848:	4293      	cmp	r3, r2
 800684a:	d90e      	bls.n	800686a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	8b12      	ldrh	r2, [r2, #24]
 8006854:	1a9a      	subs	r2, r3, r2
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	8b12      	ldrh	r2, [r2, #24]
 8006862:	441a      	add	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	61da      	str	r2, [r3, #28]
 8006868:	e002      	b.n	8006870 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006880:	e006      	b.n	8006890 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f892 	bl	80069b4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2204      	movs	r2, #4
 8006894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068a4:	2300      	movs	r3, #0
 80068a6:	2200      	movs	r2, #0
 80068a8:	f002 f962 	bl	8008b70 <osMessageQueuePut>
      break;
 80068ac:	e014      	b.n	80068d8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d111      	bne.n	80068d8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068d0:	2300      	movs	r3, #0
 80068d2:	2200      	movs	r2, #0
 80068d4:	f002 f94c 	bl	8008b70 <osMessageQueuePut>
      break;
 80068d8:	bf00      	nop
  }
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d002      	beq.n	8006908 <CDC_ProcessReception+0x26>
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00e      	beq.n	8006924 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006906:	e051      	b.n	80069ac <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6a19      	ldr	r1, [r3, #32]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	8b5a      	ldrh	r2, [r3, #26]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	7b1b      	ldrb	r3, [r3, #12]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fedd 	bl	80086d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2204      	movs	r2, #4
 800691e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006922:	e043      	b.n	80069ac <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	7b1b      	ldrb	r3, [r3, #12]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f005 f942 	bl	800bbb4 <USBH_LL_GetURBState>
 8006930:	4603      	mov	r3, r0
 8006932:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d137      	bne.n	80069aa <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	7b1b      	ldrb	r3, [r3, #12]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f005 f8a5 	bl	800ba90 <USBH_LL_GetLastXferSize>
 8006946:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	429a      	cmp	r2, r3
 8006950:	d016      	beq.n	8006980 <CDC_ProcessReception+0x9e>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	8b5b      	ldrh	r3, [r3, #26]
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4293      	cmp	r3, r2
 800695c:	d910      	bls.n	8006980 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6a1a      	ldr	r2, [r3, #32]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	441a      	add	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2203      	movs	r2, #3
 800697a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800697e:	e006      	b.n	800698e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f81d 	bl	80069c8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2204      	movs	r2, #4
 8006992:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80069a2:	2300      	movs	r3, #0
 80069a4:	2200      	movs	r2, #0
 80069a6:	f002 f8e3 	bl	8008b70 <osMessageQueuePut>
      break;
 80069aa:	bf00      	nop
  }
}
 80069ac:	bf00      	nop
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a04:	2302      	movs	r3, #2
 8006a06:	e044      	b.n	8006a92 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	79fa      	ldrb	r2, [r7, #7]
 8006a0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f841 	bl	8006aa8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006a54:	2200      	movs	r2, #0
 8006a56:	2104      	movs	r1, #4
 8006a58:	2010      	movs	r0, #16
 8006a5a:	f002 f816 	bl	8008a8a <osMessageQueueNew>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <USBH_Init+0xac>)
 8006a68:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <USBH_Init+0xb0>)
 8006a6a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <USBH_Init+0xac>)
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <USBH_Init+0xac>)
 8006a74:	2218      	movs	r2, #24
 8006a76:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006a78:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <USBH_Init+0xac>)
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <USBH_Init+0xb4>)
 8006a7e:	f001 ff57 	bl	8008930 <osThreadNew>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f004 ff4c 	bl	800b928 <USBH_LL_Init>

  return USBH_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200001a4 	.word	0x200001a4
 8006aa0:	0800bff0 	.word	0x0800bff0
 8006aa4:	08007765 	.word	0x08007765

08006aa8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e009      	b.n	8006ace <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	33e0      	adds	r3, #224	; 0xe0
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b0f      	cmp	r3, #15
 8006ad2:	d9f2      	bls.n	8006aba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e009      	b.n	8006aee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d3f1      	bcc.n	8006ada <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	331c      	adds	r3, #28
 8006b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f005 f99d 	bl	800be8c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f005 f994 	bl	800be8c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006b6a:	2212      	movs	r2, #18
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f005 f98c 	bl	800be8c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b7a:	223e      	movs	r2, #62	; 0x3e
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f005 f984 	bl	800be8c <memset>

  return USBH_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10e      	bne.n	8006bca <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bb2:	1c59      	adds	r1, r3, #1
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	33de      	adds	r3, #222	; 0xde
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
 8006bc8:	e004      	b.n	8006bd4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	73fb      	strb	r3, [r7, #15]
 8006bce:	e001      	b.n	8006bd4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d204      	bcs.n	8006c08 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c06:	e001      	b.n	8006c0c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	461a      	mov	r2, r3
 8006c28:	4603      	mov	r3, r0
 8006c2a:	70fb      	strb	r3, [r7, #3]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70bb      	strb	r3, [r7, #2]
 8006c30:	4613      	mov	r3, r2
 8006c32:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c42:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c44:	e025      	b.n	8006c92 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	221a      	movs	r2, #26
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	3308      	adds	r3, #8
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	3302      	adds	r3, #2
 8006c56:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	795b      	ldrb	r3, [r3, #5]
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d002      	beq.n	8006c68 <USBH_FindInterface+0x4e>
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2bff      	cmp	r3, #255	; 0xff
 8006c66:	d111      	bne.n	8006c8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d002      	beq.n	8006c78 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c72:	78bb      	ldrb	r3, [r7, #2]
 8006c74:	2bff      	cmp	r3, #255	; 0xff
 8006c76:	d109      	bne.n	8006c8c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c7c:	787a      	ldrb	r2, [r7, #1]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d002      	beq.n	8006c88 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c82:	787b      	ldrb	r3, [r7, #1]
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d101      	bne.n	8006c8c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	e006      	b.n	8006c9a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d9d6      	bls.n	8006c46 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c98:	23ff      	movs	r3, #255	; 0xff
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f004 fe76 	bl	800b9a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f004 ff8f 	bl	800bbda <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d102      	bne.n	8006cea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b0b      	cmp	r3, #11
 8006cf2:	f200 8247 	bhi.w	8007184 <USBH_Process+0x4bc>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <USBH_Process+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d7b 	.word	0x08006d7b
 8006d04:	08006dff 	.word	0x08006dff
 8006d08:	08007103 	.word	0x08007103
 8006d0c:	08007185 	.word	0x08007185
 8006d10:	08006ebf 	.word	0x08006ebf
 8006d14:	0800708d 	.word	0x0800708d
 8006d18:	08006f11 	.word	0x08006f11
 8006d1c:	08006f4d 	.word	0x08006f4d
 8006d20:	08006f87 	.word	0x08006f87
 8006d24:	08006fe5 	.word	0x08006fe5
 8006d28:	080070eb 	.word	0x080070eb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8227 	beq.w	8007188 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d40:	20c8      	movs	r0, #200	; 0xc8
 8006d42:	f004 ff94 	bl	800bc6e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f004 fe87 	bl	800ba5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d70:	2300      	movs	r3, #0
 8006d72:	2200      	movs	r2, #0
 8006d74:	f001 fefc 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006d78:	e206      	b.n	8007188 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d107      	bne.n	8006d94 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e025      	b.n	8006de0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d9e:	d914      	bls.n	8006dca <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d903      	bls.n	8006dc2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	220d      	movs	r2, #13
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e00e      	b.n	8006de0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e00a      	b.n	8006de0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dd0:	f103 020a 	add.w	r2, r3, #10
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006dda:	200a      	movs	r0, #10
 8006ddc:	f004 ff47 	bl	800bc6e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006df4:	2300      	movs	r3, #0
 8006df6:	2200      	movs	r2, #0
 8006df8:	f001 feba 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 8006dfc:	e1cb      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e0e:	2104      	movs	r1, #4
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e14:	2064      	movs	r0, #100	; 0x64
 8006e16:	f004 ff2a 	bl	800bc6e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f004 fdf6 	bl	800ba0c <USBH_LL_GetSpeed>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2205      	movs	r2, #5
 8006e2e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e30:	2100      	movs	r1, #0
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fc9b 	bl	800876e <USBH_AllocPipe>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e40:	2180      	movs	r1, #128	; 0x80
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fc93 	bl	800876e <USBH_AllocPipe>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7919      	ldrb	r1, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e64:	b292      	uxth	r2, r2
 8006e66:	9202      	str	r2, [sp, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	9201      	str	r2, [sp, #4]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2280      	movs	r2, #128	; 0x80
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fc4c 	bl	8008710 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7959      	ldrb	r1, [r3, #5]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	9202      	str	r2, [sp, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	9201      	str	r2, [sp, #4]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4603      	mov	r3, r0
 8006e98:	2200      	movs	r2, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fc38 	bl	8008710 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f001 fe5a 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 8006ebc:	e16b      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f96e 	bl	80071a0 <USBH_HandleEnum>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 815d 	bne.w	800718c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d103      	bne.n	8006eec <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e002      	b.n	8006ef2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2207      	movs	r2, #7
 8006ef0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2205      	movs	r2, #5
 8006ef6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f001 fe31 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006f0e:	e13d      	b.n	800718c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 813a 	beq.w	8007190 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f22:	2101      	movs	r1, #1
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2205      	movs	r2, #5
 8006f32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f42:	2300      	movs	r3, #0
 8006f44:	2200      	movs	r2, #0
 8006f46:	f001 fe13 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006f4a:	e121      	b.n	8007190 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fd15 	bl	8007986 <USBH_SetCfg>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d102      	bne.n	8006f68 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2209      	movs	r2, #9
 8006f66:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f001 fdf6 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 8006f84:	e107      	b.n	8007196 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d015      	beq.n	8006fc0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fd18 	bl	80079cc <USBH_SetFeature>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220a      	movs	r2, #10
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e00a      	b.n	8006fc6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d106      	bne.n	8006fc6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	220a      	movs	r2, #10
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e002      	b.n	8006fc6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f001 fdc7 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 8006fe2:	e0d8      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d03f      	beq.n	800706e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	e016      	b.n	800702a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ffc:	7bfa      	ldrb	r2, [r7, #15]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32de      	adds	r2, #222	; 0xde
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	791a      	ldrb	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800700e:	429a      	cmp	r2, r3
 8007010:	d108      	bne.n	8007024 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007012:	7bfa      	ldrb	r2, [r7, #15]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	32de      	adds	r2, #222	; 0xde
 8007018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007022:	e005      	b.n	8007030 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	3301      	adds	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0e5      	beq.n	8006ffc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d016      	beq.n	8007068 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2206      	movs	r2, #6
 8007050:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007058:	2103      	movs	r1, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
 800705e:	e006      	b.n	800706e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	220d      	movs	r2, #13
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e002      	b.n	800706e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	220d      	movs	r2, #13
 800706c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2205      	movs	r2, #5
 8007072:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007082:	2300      	movs	r3, #0
 8007084:	2200      	movs	r2, #0
 8007086:	f001 fd73 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 800708a:	e084      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d017      	beq.n	80070c6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	220b      	movs	r2, #11
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e00a      	b.n	80070cc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d106      	bne.n	80070cc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e002      	b.n	80070cc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220d      	movs	r2, #13
 80070ca:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2205      	movs	r2, #5
 80070d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	f001 fd44 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 80070e8:	e055      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d04f      	beq.n	8007194 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
      }
      break;
 8007100:	e048      	b.n	8007194 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fccc 	bl	8006aa8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800713e:	2105      	movs	r1, #5
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	d107      	bne.n	8007160 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff fda4 	bl	8006ca6 <USBH_Start>
 800715e:	e002      	b.n	8007166 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f004 fc1d 	bl	800b9a0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800717a:	2300      	movs	r3, #0
 800717c:	2200      	movs	r2, #0
 800717e:	f001 fcf7 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      break;
 8007182:	e008      	b.n	8007196 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007184:	bf00      	nop
 8007186:	e006      	b.n	8007196 <USBH_Process+0x4ce>
      break;
 8007188:	bf00      	nop
 800718a:	e004      	b.n	8007196 <USBH_Process+0x4ce>
      break;
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <USBH_Process+0x4ce>
    break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <USBH_Process+0x4ce>
      break;
 8007194:	bf00      	nop
  }
  return USBH_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af04      	add	r7, sp, #16
 80071a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b07      	cmp	r3, #7
 80071b6:	f200 8208 	bhi.w	80075ca <USBH_HandleEnum+0x42a>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <USBH_HandleEnum+0x20>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071e1 	.word	0x080071e1
 80071c4:	0800729f 	.word	0x0800729f
 80071c8:	08007309 	.word	0x08007309
 80071cc:	08007397 	.word	0x08007397
 80071d0:	08007401 	.word	0x08007401
 80071d4:	08007471 	.word	0x08007471
 80071d8:	0800750d 	.word	0x0800750d
 80071dc:	0800758b 	.word	0x0800758b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071e0:	2108      	movs	r1, #8
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 faec 	bl	80077c0 <USBH_Get_DevDesc>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d130      	bne.n	8007254 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7919      	ldrb	r1, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007216:	b292      	uxth	r2, r2
 8007218:	9202      	str	r2, [sp, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4603      	mov	r3, r0
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fa73 	bl	8008710 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7959      	ldrb	r1, [r3, #5]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723e:	b292      	uxth	r2, r2
 8007240:	9202      	str	r2, [sp, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	9201      	str	r2, [sp, #4]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	4603      	mov	r3, r0
 800724a:	2200      	movs	r2, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fa5f 	bl	8008710 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007252:	e1bc      	b.n	80075ce <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b03      	cmp	r3, #3
 8007258:	f040 81b9 	bne.w	80075ce <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007262:	3301      	adds	r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007272:	2b03      	cmp	r3, #3
 8007274:	d903      	bls.n	800727e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220d      	movs	r2, #13
 800727a:	701a      	strb	r2, [r3, #0]
      break;
 800727c:	e1a7      	b.n	80075ce <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	795b      	ldrb	r3, [r3, #5]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fa93 	bl	80087b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	791b      	ldrb	r3, [r3, #4]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fa8d 	bl	80087b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
      break;
 800729c:	e197      	b.n	80075ce <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800729e:	2112      	movs	r1, #18
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa8d 	bl	80077c0 <USBH_Get_DevDesc>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072b6:	e18c      	b.n	80075d2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	f040 8189 	bne.w	80075d2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072c6:	3301      	adds	r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d903      	bls.n	80072e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	220d      	movs	r2, #13
 80072de:	701a      	strb	r2, [r3, #0]
      break;
 80072e0:	e177      	b.n	80075d2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	795b      	ldrb	r3, [r3, #5]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fa61 	bl	80087b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	791b      	ldrb	r3, [r3, #4]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fa5b 	bl	80087b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
      break;
 8007306:	e164      	b.n	80075d2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007308:	2101      	movs	r1, #1
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fb17 	bl	800793e <USBH_SetAddress>
 8007310:	4603      	mov	r3, r0
 8007312:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d132      	bne.n	8007380 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800731a:	2002      	movs	r0, #2
 800731c:	f004 fca7 	bl	800bc6e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2203      	movs	r2, #3
 800732c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7919      	ldrb	r1, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007342:	b292      	uxth	r2, r2
 8007344:	9202      	str	r2, [sp, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	9201      	str	r2, [sp, #4]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f9dd 	bl	8008710 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7959      	ldrb	r1, [r3, #5]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800736a:	b292      	uxth	r2, r2
 800736c:	9202      	str	r2, [sp, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	9201      	str	r2, [sp, #4]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	4603      	mov	r3, r0
 8007376:	2200      	movs	r2, #0
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 f9c9 	bl	8008710 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800737e:	e12a      	b.n	80075d6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b03      	cmp	r3, #3
 8007384:	f040 8127 	bne.w	80075d6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	220d      	movs	r2, #13
 800738c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	705a      	strb	r2, [r3, #1]
      break;
 8007394:	e11f      	b.n	80075d6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007396:	2109      	movs	r1, #9
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa3d 	bl	8007818 <USBH_Get_CfgDesc>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2204      	movs	r2, #4
 80073ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073ae:	e114      	b.n	80075da <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	f040 8111 	bne.w	80075da <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073be:	3301      	adds	r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d903      	bls.n	80073da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220d      	movs	r2, #13
 80073d6:	701a      	strb	r2, [r3, #0]
      break;
 80073d8:	e0ff      	b.n	80075da <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	795b      	ldrb	r3, [r3, #5]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f9e5 	bl	80087b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	791b      	ldrb	r3, [r3, #4]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 f9df 	bl	80087b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e0ec      	b.n	80075da <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa05 	bl	8007818 <USBH_Get_CfgDesc>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2205      	movs	r2, #5
 800741c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800741e:	e0de      	b.n	80075de <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b03      	cmp	r3, #3
 8007424:	f040 80db 	bne.w	80075de <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800742e:	3301      	adds	r3, #1
 8007430:	b2da      	uxtb	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800743e:	2b03      	cmp	r3, #3
 8007440:	d903      	bls.n	800744a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	220d      	movs	r2, #13
 8007446:	701a      	strb	r2, [r3, #0]
      break;
 8007448:	e0c9      	b.n	80075de <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	795b      	ldrb	r3, [r3, #5]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f9ad 	bl	80087b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f9a7 	bl	80087b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
      break;
 800746e:	e0b6      	b.n	80075de <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007476:	2b00      	cmp	r3, #0
 8007478:	d036      	beq.n	80074e8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9ef 	bl	800786c <USBH_Get_StringDesc>
 800748e:	4603      	mov	r3, r0
 8007490:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d111      	bne.n	80074bc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2206      	movs	r2, #6
 800749c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2205      	movs	r2, #5
 80074a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074b2:	2300      	movs	r3, #0
 80074b4:	2200      	movs	r2, #0
 80074b6:	f001 fb5b 	bl	8008b70 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074ba:	e092      	b.n	80075e2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f040 808f 	bne.w	80075e2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2206      	movs	r2, #6
 80074c8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2205      	movs	r2, #5
 80074ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	f001 fb45 	bl	8008b70 <osMessageQueuePut>
      break;
 80074e6:	e07c      	b.n	80075e2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2206      	movs	r2, #6
 80074ec:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2205      	movs	r2, #5
 80074f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007502:	2300      	movs	r3, #0
 8007504:	2200      	movs	r2, #0
 8007506:	f001 fb33 	bl	8008b70 <osMessageQueuePut>
      break;
 800750a:	e06a      	b.n	80075e2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007512:	2b00      	cmp	r3, #0
 8007514:	d027      	beq.n	8007566 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007522:	23ff      	movs	r3, #255	; 0xff
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9a1 	bl	800786c <USBH_Get_StringDesc>
 800752a:	4603      	mov	r3, r0
 800752c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d103      	bne.n	800753c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2207      	movs	r2, #7
 8007538:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800753a:	e054      	b.n	80075e6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b03      	cmp	r3, #3
 8007540:	d151      	bne.n	80075e6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2207      	movs	r2, #7
 8007546:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2205      	movs	r2, #5
 800754c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800755c:	2300      	movs	r3, #0
 800755e:	2200      	movs	r2, #0
 8007560:	f001 fb06 	bl	8008b70 <osMessageQueuePut>
      break;
 8007564:	e03f      	b.n	80075e6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2207      	movs	r2, #7
 800756a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2205      	movs	r2, #5
 8007570:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	f001 faf4 	bl	8008b70 <osMessageQueuePut>
      break;
 8007588:	e02d      	b.n	80075e6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075a0:	23ff      	movs	r3, #255	; 0xff
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f962 	bl	800786c <USBH_Get_StringDesc>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075b6:	e018      	b.n	80075ea <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d115      	bne.n	80075ea <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
      break;
 80075c2:	e012      	b.n	80075ea <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
      break;
 80075c8:	e00f      	b.n	80075ea <USBH_HandleEnum+0x44a>

    default:
      break;
 80075ca:	bf00      	nop
 80075cc:	e00e      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075ce:	bf00      	nop
 80075d0:	e00c      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075d2:	bf00      	nop
 80075d4:	e00a      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075d6:	bf00      	nop
 80075d8:	e008      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075da:	bf00      	nop
 80075dc:	e006      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <USBH_HandleEnum+0x44c>
      break;
 80075ea:	bf00      	nop
  }
  return Status;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop

080075f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f804 	bl	800763a <USBH_HandleSof>
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b0b      	cmp	r3, #11
 800764a:	d10a      	bne.n	8007662 <USBH_HandleSof+0x28>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
  }
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800768e:	2300      	movs	r3, #0
 8007690:	2200      	movs	r2, #0
 8007692:	f001 fa6d 	bl	8008b70 <osMessageQueuePut>
#endif
#endif

  return;
 8007696:	bf00      	nop
}
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80076ae:	bf00      	nop
}
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	f001 fa3d 	bl	8008b70 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f004 f958 	bl	800b9d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	791b      	ldrb	r3, [r3, #4]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f83f 	bl	80087b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	795b      	ldrb	r3, [r3, #5]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f839 	bl	80087b0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	f001 fa0b 	bl	8008b70 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777c:	2200      	movs	r2, #0
 800777e:	f001 fa57 	bl	8008c30 <osMessageQueueGet>
 8007782:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fa9c 	bl	8006cc8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007790:	e7ec      	b.n	800776c <USBH_Process_OS+0x8>

08007792 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077ae:	2300      	movs	r3, #0
 80077b0:	2200      	movs	r2, #0
 80077b2:	f001 f9dd 	bl	8008b70 <osMessageQueuePut>
#endif

  return USBH_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80077cc:	887b      	ldrh	r3, [r7, #2]
 80077ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d2:	d901      	bls.n	80077d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e01b      	b.n	8007810 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077de:	887b      	ldrh	r3, [r7, #2]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f872 	bl	80078d4 <USBH_GetDescriptor>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007800:	887a      	ldrh	r2, [r7, #2]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f929 	bl	8007a5c <USBH_ParseDevDesc>
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	331c      	adds	r3, #28
 8007828:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007830:	d901      	bls.n	8007836 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007832:	2303      	movs	r3, #3
 8007834:	e016      	b.n	8007864 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007840:	2100      	movs	r1, #0
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f846 	bl	80078d4 <USBH_GetDescriptor>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d107      	bne.n	8007862 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	461a      	mov	r2, r3
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9b3 	bl	8007bc4 <USBH_ParseCfgDesc>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	461a      	mov	r2, r3
 8007878:	460b      	mov	r3, r1
 800787a:	72fb      	strb	r3, [r7, #11]
 800787c:	4613      	mov	r3, r2
 800787e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007880:	893b      	ldrh	r3, [r7, #8]
 8007882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007886:	d802      	bhi.n	800788e <USBH_Get_StringDesc+0x22>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800788e:	2303      	movs	r3, #3
 8007890:	e01c      	b.n	80078cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800789a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078a2:	893b      	ldrh	r3, [r7, #8]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	460b      	mov	r3, r1
 80078a8:	2100      	movs	r1, #0
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f812 	bl	80078d4 <USBH_GetDescriptor>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d107      	bne.n	80078ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078c0:	893a      	ldrh	r2, [r7, #8]
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fb93 	bl	8007ff0 <USBH_ParseStringDesc>
  }

  return status;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	72fb      	strb	r3, [r7, #11]
 80078e2:	4613      	mov	r3, r2
 80078e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	789b      	ldrb	r3, [r3, #2]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d11c      	bne.n	8007928 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2206      	movs	r2, #6
 80078fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	893a      	ldrh	r2, [r7, #8]
 8007904:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007906:	893b      	ldrh	r3, [r7, #8]
 8007908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800790c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007910:	d104      	bne.n	800791c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f240 4209 	movw	r2, #1033	; 0x409
 8007918:	829a      	strh	r2, [r3, #20]
 800791a:	e002      	b.n	8007922 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8b3a      	ldrh	r2, [r7, #24]
 8007926:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007928:	8b3b      	ldrh	r3, [r7, #24]
 800792a:	461a      	mov	r2, r3
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 fbac 	bl	800808c <USBH_CtlReq>
 8007934:	4603      	mov	r3, r0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	789b      	ldrb	r3, [r3, #2]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d10f      	bne.n	8007972 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2205      	movs	r2, #5
 800795c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb88 	bl	800808c <USBH_CtlReq>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	789b      	ldrb	r3, [r3, #2]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10e      	bne.n	80079b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2209      	movs	r2, #9
 80079a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	887a      	ldrh	r2, [r7, #2]
 80079aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079b8:	2200      	movs	r2, #0
 80079ba:	2100      	movs	r1, #0
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fb65 	bl	800808c <USBH_CtlReq>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	789b      	ldrb	r3, [r3, #2]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10f      	bne.n	8007a00 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2203      	movs	r2, #3
 80079ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a00:	2200      	movs	r2, #0
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fb41 	bl	800808c <USBH_CtlReq>
 8007a0a:	4603      	mov	r3, r0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	789b      	ldrb	r3, [r3, #2]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fb1d 	bl	800808c <USBH_CtlReq>
 8007a52:	4603      	mov	r3, r0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007a70:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e098      	b.n	8007bb2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	785a      	ldrb	r2, [r3, #1]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	3302      	adds	r3, #2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	3303      	adds	r3, #3
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	791a      	ldrb	r2, [r3, #4]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	795a      	ldrb	r2, [r3, #5]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	799a      	ldrb	r2, [r3, #6]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	79da      	ldrb	r2, [r3, #7]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d11b      	bne.n	8007b18 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	79db      	ldrb	r3, [r3, #7]
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	dc0f      	bgt.n	8007b08 <USBH_ParseDevDesc+0xac>
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	db0f      	blt.n	8007b0c <USBH_ParseDevDesc+0xb0>
 8007aec:	3b08      	subs	r3, #8
 8007aee:	4a34      	ldr	r2, [pc, #208]	; (8007bc0 <USBH_ParseDevDesc+0x164>)
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bf14      	ite	ne
 8007afc:	2301      	movne	r3, #1
 8007afe:	2300      	moveq	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <USBH_ParseDevDesc+0xb8>
 8007b06:	e001      	b.n	8007b0c <USBH_ParseDevDesc+0xb0>
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d003      	beq.n	8007b14 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2208      	movs	r2, #8
 8007b10:	71da      	strb	r2, [r3, #7]
        break;
 8007b12:	e000      	b.n	8007b16 <USBH_ParseDevDesc+0xba>
        break;
 8007b14:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007b16:	e00e      	b.n	8007b36 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d107      	bne.n	8007b32 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	79db      	ldrb	r3, [r3, #7]
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d005      	beq.n	8007b36 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	71da      	strb	r2, [r3, #7]
 8007b30:	e001      	b.n	8007b36 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d939      	bls.n	8007bb0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3309      	adds	r3, #9
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	330a      	adds	r3, #10
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	330b      	adds	r3, #11
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	330c      	adds	r3, #12
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	330d      	adds	r3, #13
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	7b9a      	ldrb	r2, [r3, #14]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7bda      	ldrb	r2, [r3, #15]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	7c1a      	ldrb	r2, [r3, #16]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	7c5a      	ldrb	r2, [r3, #17]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	01000101 	.word	0x01000101

08007bc4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08c      	sub	sp, #48	; 0x30
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bd8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e0db      	b.n	8007dae <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	785a      	ldrb	r2, [r3, #1]
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	3303      	adds	r3, #3
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c26:	bf28      	it	cs
 8007c28:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	791a      	ldrb	r2, [r3, #4]
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	795a      	ldrb	r2, [r3, #5]
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	799a      	ldrb	r2, [r3, #6]
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	79da      	ldrb	r2, [r3, #7]
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	7a1a      	ldrb	r2, [r3, #8]
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b09      	cmp	r3, #9
 8007c60:	d002      	beq.n	8007c68 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2209      	movs	r2, #9
 8007c66:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	f240 809d 	bls.w	8007daa <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c70:	2309      	movs	r3, #9
 8007c72:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c78:	e081      	b.n	8007d7e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c7a:	f107 0316 	add.w	r3, r7, #22
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 f9e8 	bl	8008056 <USBH_GetNextDesc>
 8007c86:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d176      	bne.n	8007d7e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d002      	beq.n	8007c9e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	2209      	movs	r2, #9
 8007c9c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca2:	221a      	movs	r2, #26
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6a3a      	ldr	r2, [r7, #32]
 8007cac:	4413      	add	r3, r2
 8007cae:	3302      	adds	r3, #2
 8007cb0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb4:	69f8      	ldr	r0, [r7, #28]
 8007cb6:	f000 f87e 	bl	8007db6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cc4:	e043      	b.n	8007d4e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cc6:	f107 0316 	add.w	r3, r7, #22
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cce:	f000 f9c2 	bl	8008056 <USBH_GetNextDesc>
 8007cd2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d138      	bne.n	8007d4e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	795b      	ldrb	r3, [r3, #5]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d113      	bne.n	8007d0c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d003      	beq.n	8007cf4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	799b      	ldrb	r3, [r3, #6]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d10b      	bne.n	8007d0c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	79db      	ldrb	r3, [r3, #7]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <USBH_ParseCfgDesc+0x150>
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d007      	beq.n	8007d14 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	2209      	movs	r2, #9
 8007d08:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d0a:	e003      	b.n	8007d14 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	2207      	movs	r2, #7
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e000      	b.n	8007d16 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d14:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d1e:	3201      	adds	r2, #1
 8007d20:	00d2      	lsls	r2, r2, #3
 8007d22:	211a      	movs	r1, #26
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	6a3a      	ldr	r2, [r7, #32]
 8007d2e:	4413      	add	r3, r2
 8007d30:	3304      	adds	r3, #4
 8007d32:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d36:	69b9      	ldr	r1, [r7, #24]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f870 	bl	8007e1e <USBH_ParseEPDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d48:	3301      	adds	r3, #1
 8007d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d204      	bcs.n	8007d64 <USBH_ParseCfgDesc+0x1a0>
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	885a      	ldrh	r2, [r3, #2]
 8007d5e:	8afb      	ldrh	r3, [r7, #22]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d8b0      	bhi.n	8007cc6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d201      	bcs.n	8007d74 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e01c      	b.n	8007dae <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8007d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d805      	bhi.n	8007d92 <USBH_ParseCfgDesc+0x1ce>
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	885a      	ldrh	r2, [r3, #2]
 8007d8a:	8afb      	ldrh	r3, [r7, #22]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	f63f af74 	bhi.w	8007c7a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	bf28      	it	cs
 8007d9a:	2302      	movcs	r3, #2
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d201      	bcs.n	8007daa <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e001      	b.n	8007dae <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8007daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3730      	adds	r7, #48	; 0x30
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785a      	ldrb	r2, [r3, #1]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	789a      	ldrb	r2, [r3, #2]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	78da      	ldrb	r2, [r3, #3]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	3304      	adds	r3, #4
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	bf28      	it	cs
 8007dea:	2302      	movcs	r3, #2
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	795a      	ldrb	r2, [r3, #5]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	799a      	ldrb	r2, [r3, #6]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	79da      	ldrb	r2, [r3, #7]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	7a1a      	ldrb	r2, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	721a      	strb	r2, [r3, #8]
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b087      	sub	sp, #28
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	785a      	ldrb	r2, [r3, #1]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	789a      	ldrb	r2, [r3, #2]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	78da      	ldrb	r2, [r3, #3]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3304      	adds	r3, #4
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3305      	adds	r3, #5
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	799a      	ldrb	r2, [r3, #6]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	889b      	ldrh	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e82:	d804      	bhi.n	8007e8e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8c:	d901      	bls.n	8007e92 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d136      	bne.n	8007f0a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d108      	bne.n	8007eba <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	889b      	ldrh	r3, [r3, #4]
 8007eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb0:	f240 8097 	bls.w	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	75fb      	strb	r3, [r7, #23]
 8007eb8:	e093      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	78db      	ldrb	r3, [r3, #3]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	889b      	ldrh	r3, [r3, #4]
 8007eca:	2b40      	cmp	r3, #64	; 0x40
 8007ecc:	f240 8089 	bls.w	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	75fb      	strb	r3, [r7, #23]
 8007ed4:	e085      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	78db      	ldrb	r3, [r3, #3]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d005      	beq.n	8007eee <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	78db      	ldrb	r3, [r3, #3]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d10a      	bne.n	8007f04 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	799b      	ldrb	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <USBH_ParseEPDesc+0xe0>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	799b      	ldrb	r3, [r3, #6]
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d970      	bls.n	8007fe0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007efe:	2303      	movs	r3, #3
 8007f00:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f02:	e06d      	b.n	8007fe0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f04:	2303      	movs	r3, #3
 8007f06:	75fb      	strb	r3, [r7, #23]
 8007f08:	e06b      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d13c      	bne.n	8007f8e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	78db      	ldrb	r3, [r3, #3]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d005      	beq.n	8007f2c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	78db      	ldrb	r3, [r3, #3]
 8007f24:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	889b      	ldrh	r3, [r3, #4]
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d956      	bls.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007f34:	2303      	movs	r3, #3
 8007f36:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007f38:	e053      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	78db      	ldrb	r3, [r3, #3]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d10e      	bne.n	8007f64 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	799b      	ldrb	r3, [r3, #6]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d803      	bhi.n	8007f5e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d941      	bls.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	75fb      	strb	r3, [r7, #23]
 8007f62:	e03e      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	78db      	ldrb	r3, [r3, #3]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d10b      	bne.n	8007f88 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	799b      	ldrb	r3, [r3, #6]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <USBH_ParseEPDesc+0x164>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	889b      	ldrh	r3, [r3, #4]
 8007f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f80:	d32f      	bcc.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007f82:	2303      	movs	r3, #3
 8007f84:	75fb      	strb	r3, [r7, #23]
 8007f86:	e02c      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	e029      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d120      	bne.n	8007fda <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	78db      	ldrb	r3, [r3, #3]
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	889b      	ldrh	r3, [r3, #4]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d01a      	beq.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007fac:	2303      	movs	r3, #3
 8007fae:	75fb      	strb	r3, [r7, #23]
 8007fb0:	e017      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	78db      	ldrb	r3, [r3, #3]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d10a      	bne.n	8007fd4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	799b      	ldrb	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <USBH_ParseEPDesc+0x1b0>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	889b      	ldrh	r3, [r3, #4]
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d909      	bls.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	75fb      	strb	r3, [r7, #23]
 8007fd2:	e006      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	75fb      	strb	r3, [r7, #23]
 8007fd8:	e003      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	75fb      	strb	r3, [r7, #23]
 8007fde:	e000      	b.n	8007fe2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007fe0:	bf00      	nop
  }

  return status;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d120      	bne.n	800804a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	1e9a      	subs	r2, r3, #2
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	4293      	cmp	r3, r2
 8008012:	bf28      	it	cs
 8008014:	4613      	movcs	r3, r2
 8008016:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3302      	adds	r3, #2
 800801c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800801e:	2300      	movs	r3, #0
 8008020:	82fb      	strh	r3, [r7, #22]
 8008022:	e00b      	b.n	800803c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008024:	8afb      	ldrh	r3, [r7, #22]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3301      	adds	r3, #1
 8008034:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008036:	8afb      	ldrh	r3, [r7, #22]
 8008038:	3302      	adds	r3, #2
 800803a:	82fb      	strh	r3, [r7, #22]
 800803c:	8afa      	ldrh	r2, [r7, #22]
 800803e:	8abb      	ldrh	r3, [r7, #20]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3ef      	bcc.n	8008024 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
  }
}
 800804a:	bf00      	nop
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	881a      	ldrh	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	4413      	add	r3, r2
 800806c:	b29a      	uxth	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800807e:	68fb      	ldr	r3, [r7, #12]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	789b      	ldrb	r3, [r3, #2]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d002      	beq.n	80080ac <USBH_CtlReq+0x20>
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d01d      	beq.n	80080e6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80080aa:	e043      	b.n	8008134 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	88fa      	ldrh	r2, [r7, #6]
 80080b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2202      	movs	r2, #2
 80080c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2203      	movs	r2, #3
 80080cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	f000 fd46 	bl	8008b70 <osMessageQueuePut>
      break;
 80080e4:	e026      	b.n	8008134 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f82a 	bl	8008140 <USBH_HandleControl>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <USBH_CtlReq+0x70>
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d106      	bne.n	800810a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	761a      	strb	r2, [r3, #24]
 8008108:	e005      	b.n	8008116 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d102      	bne.n	8008116 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2203      	movs	r2, #3
 800811a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	f000 fd1f 	bl	8008b70 <osMessageQueuePut>
      break;
 8008132:	bf00      	nop
  }
  return status;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af02      	add	r7, sp, #8
 8008146:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008148:	2301      	movs	r3, #1
 800814a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800814c:	2300      	movs	r3, #0
 800814e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7e1b      	ldrb	r3, [r3, #24]
 8008154:	3b01      	subs	r3, #1
 8008156:	2b0a      	cmp	r3, #10
 8008158:	f200 8229 	bhi.w	80085ae <USBH_HandleControl+0x46e>
 800815c:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <USBH_HandleControl+0x24>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008191 	.word	0x08008191
 8008168:	080081ab 	.word	0x080081ab
 800816c:	0800824d 	.word	0x0800824d
 8008170:	08008273 	.word	0x08008273
 8008174:	080082ff 	.word	0x080082ff
 8008178:	08008329 	.word	0x08008329
 800817c:	080083eb 	.word	0x080083eb
 8008180:	0800840d 	.word	0x0800840d
 8008184:	0800849f 	.word	0x0800849f
 8008188:	080084c5 	.word	0x080084c5
 800818c:	08008557 	.word	0x08008557
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f103 0110 	add.w	r1, r3, #16
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	795b      	ldrb	r3, [r3, #5]
 800819a:	461a      	mov	r2, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa17 	bl	80085d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	761a      	strb	r2, [r3, #24]
      break;
 80081a8:	e20c      	b.n	80085c4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	795b      	ldrb	r3, [r3, #5]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f003 fcff 	bl	800bbb4 <USBH_LL_GetURBState>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d12c      	bne.n	800821a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7c1b      	ldrb	r3, [r3, #16]
 80081c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8adb      	ldrh	r3, [r3, #22]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081d2:	7b7b      	ldrb	r3, [r7, #13]
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d103      	bne.n	80081e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2203      	movs	r2, #3
 80081dc:	761a      	strb	r2, [r3, #24]
 80081de:	e00d      	b.n	80081fc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2205      	movs	r2, #5
 80081e4:	761a      	strb	r2, [r3, #24]
 80081e6:	e009      	b.n	80081fc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80081e8:	7b7b      	ldrb	r3, [r7, #13]
 80081ea:	2b80      	cmp	r3, #128	; 0x80
 80081ec:	d103      	bne.n	80081f6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2209      	movs	r2, #9
 80081f2:	761a      	strb	r2, [r3, #24]
 80081f4:	e002      	b.n	80081fc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2207      	movs	r2, #7
 80081fa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2203      	movs	r2, #3
 8008200:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008210:	2300      	movs	r3, #0
 8008212:	2200      	movs	r2, #0
 8008214:	f000 fcac 	bl	8008b70 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008218:	e1cb      	b.n	80085b2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d003      	beq.n	8008228 <USBH_HandleControl+0xe8>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b02      	cmp	r3, #2
 8008224:	f040 81c5 	bne.w	80085b2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	220b      	movs	r2, #11
 800822c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2203      	movs	r2, #3
 8008232:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	f000 fc93 	bl	8008b70 <osMessageQueuePut>
      break;
 800824a:	e1b2      	b.n	80085b2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6899      	ldr	r1, [r3, #8]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	899a      	ldrh	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	791b      	ldrb	r3, [r3, #4]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9f2 	bl	800864e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2204      	movs	r2, #4
 800826e:	761a      	strb	r2, [r3, #24]
      break;
 8008270:	e1a8      	b.n	80085c4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	791b      	ldrb	r3, [r3, #4]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f003 fc9b 	bl	800bbb4 <USBH_LL_GetURBState>
 800827e:	4603      	mov	r3, r0
 8008280:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d110      	bne.n	80082aa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2209      	movs	r2, #9
 800828c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2203      	movs	r2, #3
 8008292:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082a2:	2300      	movs	r3, #0
 80082a4:	2200      	movs	r2, #0
 80082a6:	f000 fc63 	bl	8008b70 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b05      	cmp	r3, #5
 80082ae:	d110      	bne.n	80082d2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082b0:	2303      	movs	r3, #3
 80082b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	f000 fc50 	bl	8008b70 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082d0:	e171      	b.n	80085b6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	f040 816e 	bne.w	80085b6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	220b      	movs	r2, #11
 80082de:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2203      	movs	r2, #3
 80082e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082f4:	2300      	movs	r3, #0
 80082f6:	2200      	movs	r2, #0
 80082f8:	f000 fc3a 	bl	8008b70 <osMessageQueuePut>
      break;
 80082fc:	e15b      	b.n	80085b6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6899      	ldr	r1, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	899a      	ldrh	r2, [r3, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	795b      	ldrb	r3, [r3, #5]
 800830a:	2001      	movs	r0, #1
 800830c:	9000      	str	r0, [sp, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f978 	bl	8008604 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2206      	movs	r2, #6
 8008324:	761a      	strb	r2, [r3, #24]
      break;
 8008326:	e14d      	b.n	80085c4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	795b      	ldrb	r3, [r3, #5]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f003 fc40 	bl	800bbb4 <USBH_LL_GetURBState>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d111      	bne.n	8008362 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2207      	movs	r2, #7
 8008342:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2203      	movs	r2, #3
 8008348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008358:	2300      	movs	r3, #0
 800835a:	2200      	movs	r2, #0
 800835c:	f000 fc08 	bl	8008b70 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008360:	e12b      	b.n	80085ba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b05      	cmp	r3, #5
 8008366:	d113      	bne.n	8008390 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	220c      	movs	r2, #12
 800836c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2203      	movs	r2, #3
 8008376:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008386:	2300      	movs	r3, #0
 8008388:	2200      	movs	r2, #0
 800838a:	f000 fbf1 	bl	8008b70 <osMessageQueuePut>
      break;
 800838e:	e114      	b.n	80085ba <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d111      	bne.n	80083ba <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2205      	movs	r2, #5
 800839a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2203      	movs	r2, #3
 80083a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	f000 fbdc 	bl	8008b70 <osMessageQueuePut>
      break;
 80083b8:	e0ff      	b.n	80085ba <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	f040 80fc 	bne.w	80085ba <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220b      	movs	r2, #11
 80083c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083c8:	2302      	movs	r3, #2
 80083ca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2203      	movs	r2, #3
 80083d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083e0:	2300      	movs	r3, #0
 80083e2:	2200      	movs	r2, #0
 80083e4:	f000 fbc4 	bl	8008b70 <osMessageQueuePut>
      break;
 80083e8:	e0e7      	b.n	80085ba <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	2100      	movs	r1, #0
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f92b 	bl	800864e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2208      	movs	r2, #8
 8008408:	761a      	strb	r2, [r3, #24]

      break;
 800840a:	e0db      	b.n	80085c4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	791b      	ldrb	r3, [r3, #4]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 fbce 	bl	800bbb4 <USBH_LL_GetURBState>
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d113      	bne.n	800844a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	220d      	movs	r2, #13
 8008426:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2203      	movs	r2, #3
 8008430:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008440:	2300      	movs	r3, #0
 8008442:	2200      	movs	r2, #0
 8008444:	f000 fb94 	bl	8008b70 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008448:	e0b9      	b.n	80085be <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d111      	bne.n	8008474 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220b      	movs	r2, #11
 8008454:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2203      	movs	r2, #3
 800845a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800846a:	2300      	movs	r3, #0
 800846c:	2200      	movs	r2, #0
 800846e:	f000 fb7f 	bl	8008b70 <osMessageQueuePut>
      break;
 8008472:	e0a4      	b.n	80085be <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b05      	cmp	r3, #5
 8008478:	f040 80a1 	bne.w	80085be <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800847c:	2303      	movs	r3, #3
 800847e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2203      	movs	r2, #3
 8008484:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008494:	2300      	movs	r3, #0
 8008496:	2200      	movs	r2, #0
 8008498:	f000 fb6a 	bl	8008b70 <osMessageQueuePut>
      break;
 800849c:	e08f      	b.n	80085be <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	2201      	movs	r2, #1
 80084a4:	9200      	str	r2, [sp, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f8aa 	bl	8008604 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	220a      	movs	r2, #10
 80084c0:	761a      	strb	r2, [r3, #24]
      break;
 80084c2:	e07f      	b.n	80085c4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	795b      	ldrb	r3, [r3, #5]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f003 fb72 	bl	800bbb4 <USBH_LL_GetURBState>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d113      	bne.n	8008502 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220d      	movs	r2, #13
 80084e2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2203      	movs	r2, #3
 80084e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084f8:	2300      	movs	r3, #0
 80084fa:	2200      	movs	r2, #0
 80084fc:	f000 fb38 	bl	8008b70 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008500:	e05f      	b.n	80085c2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d111      	bne.n	800852c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2209      	movs	r2, #9
 800850c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2203      	movs	r2, #3
 8008512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008522:	2300      	movs	r3, #0
 8008524:	2200      	movs	r2, #0
 8008526:	f000 fb23 	bl	8008b70 <osMessageQueuePut>
      break;
 800852a:	e04a      	b.n	80085c2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b04      	cmp	r3, #4
 8008530:	d147      	bne.n	80085c2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	220b      	movs	r2, #11
 8008536:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2203      	movs	r2, #3
 800853c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	f000 fb0e 	bl	8008b70 <osMessageQueuePut>
      break;
 8008554:	e035      	b.n	80085c2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7e5b      	ldrb	r3, [r3, #25]
 800855a:	3301      	adds	r3, #1
 800855c:	b2da      	uxtb	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	765a      	strb	r2, [r3, #25]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7e5b      	ldrb	r3, [r3, #25]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d806      	bhi.n	8008578 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008576:	e025      	b.n	80085c4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800857e:	2106      	movs	r1, #6
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f90d 	bl	80087b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f907 	bl	80087b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085a8:	2302      	movs	r3, #2
 80085aa:	73fb      	strb	r3, [r7, #15]
      break;
 80085ac:	e00a      	b.n	80085c4 <USBH_HandleControl+0x484>

    default:
      break;
 80085ae:	bf00      	nop
 80085b0:	e008      	b.n	80085c4 <USBH_HandleControl+0x484>
      break;
 80085b2:	bf00      	nop
 80085b4:	e006      	b.n	80085c4 <USBH_HandleControl+0x484>
      break;
 80085b6:	bf00      	nop
 80085b8:	e004      	b.n	80085c4 <USBH_HandleControl+0x484>
      break;
 80085ba:	bf00      	nop
 80085bc:	e002      	b.n	80085c4 <USBH_HandleControl+0x484>
      break;
 80085be:	bf00      	nop
 80085c0:	e000      	b.n	80085c4 <USBH_HandleControl+0x484>
      break;
 80085c2:	bf00      	nop
  }

  return status;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop

080085d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af04      	add	r7, sp, #16
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085de:	79f9      	ldrb	r1, [r7, #7]
 80085e0:	2300      	movs	r3, #0
 80085e2:	9303      	str	r3, [sp, #12]
 80085e4:	2308      	movs	r3, #8
 80085e6:	9302      	str	r3, [sp, #8]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	2300      	movs	r3, #0
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	2300      	movs	r3, #0
 80085f2:	2200      	movs	r2, #0
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f003 faac 	bl	800bb52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af04      	add	r7, sp, #16
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	460b      	mov	r3, r1
 8008614:	80fb      	strh	r3, [r7, #6]
 8008616:	4613      	mov	r3, r2
 8008618:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008628:	7979      	ldrb	r1, [r7, #5]
 800862a:	7e3b      	ldrb	r3, [r7, #24]
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	9302      	str	r3, [sp, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2301      	movs	r3, #1
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	2200      	movs	r2, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f003 fa87 	bl	800bb52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b088      	sub	sp, #32
 8008652:	af04      	add	r7, sp, #16
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	4611      	mov	r1, r2
 800865a:	461a      	mov	r2, r3
 800865c:	460b      	mov	r3, r1
 800865e:	80fb      	strh	r3, [r7, #6]
 8008660:	4613      	mov	r3, r2
 8008662:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008664:	7979      	ldrb	r1, [r7, #5]
 8008666:	2300      	movs	r3, #0
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	9302      	str	r3, [sp, #8]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	2301      	movs	r3, #1
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	2201      	movs	r2, #1
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f003 fa69 	bl	800bb52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008680:	2300      	movs	r3, #0

}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b088      	sub	sp, #32
 800868e:	af04      	add	r7, sp, #16
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4611      	mov	r1, r2
 8008696:	461a      	mov	r2, r3
 8008698:	460b      	mov	r3, r1
 800869a:	80fb      	strh	r3, [r7, #6]
 800869c:	4613      	mov	r3, r2
 800869e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ae:	7979      	ldrb	r1, [r7, #5]
 80086b0:	7e3b      	ldrb	r3, [r7, #24]
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	88fb      	ldrh	r3, [r7, #6]
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	2301      	movs	r3, #1
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	2302      	movs	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f003 fa44 	bl	800bb52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af04      	add	r7, sp, #16
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4611      	mov	r1, r2
 80086e0:	461a      	mov	r2, r3
 80086e2:	460b      	mov	r3, r1
 80086e4:	80fb      	strh	r3, [r7, #6]
 80086e6:	4613      	mov	r3, r2
 80086e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ea:	7979      	ldrb	r1, [r7, #5]
 80086ec:	2300      	movs	r3, #0
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	9302      	str	r3, [sp, #8]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	2301      	movs	r3, #1
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2302      	movs	r3, #2
 80086fe:	2201      	movs	r2, #1
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f003 fa26 	bl	800bb52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	461a      	mov	r2, r3
 800871e:	4603      	mov	r3, r0
 8008720:	70fb      	strb	r3, [r7, #3]
 8008722:	460b      	mov	r3, r1
 8008724:	70bb      	strb	r3, [r7, #2]
 8008726:	4613      	mov	r3, r2
 8008728:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800872a:	7878      	ldrb	r0, [r7, #1]
 800872c:	78ba      	ldrb	r2, [r7, #2]
 800872e:	78f9      	ldrb	r1, [r7, #3]
 8008730:	8b3b      	ldrh	r3, [r7, #24]
 8008732:	9302      	str	r3, [sp, #8]
 8008734:	7d3b      	ldrb	r3, [r7, #20]
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	7c3b      	ldrb	r3, [r7, #16]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f003 f9b9 	bl	800bab6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 f9d8 	bl	800bb14 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f836 	bl	80087ec <USBH_GetFreePipe>
 8008780:	4603      	mov	r3, r0
 8008782:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008784:	89fb      	ldrh	r3, [r7, #14]
 8008786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800878a:	4293      	cmp	r3, r2
 800878c:	d00a      	beq.n	80087a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	89fb      	ldrh	r3, [r7, #14]
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	33e0      	adds	r3, #224	; 0xe0
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087a4:	89fb      	ldrh	r3, [r7, #14]
 80087a6:	b2db      	uxtb	r3, r3
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d80d      	bhi.n	80087de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	33e0      	adds	r3, #224	; 0xe0
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	33e0      	adds	r3, #224	; 0xe0
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e00f      	b.n	800881e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	33e0      	adds	r3, #224	; 0xe0
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	b29b      	uxth	r3, r3
 8008816:	e007      	b.n	8008828 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	3301      	adds	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b0f      	cmp	r3, #15
 8008822:	d9ec      	bls.n	80087fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008824:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <__NVIC_SetPriority>:
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008844:	2b00      	cmp	r3, #0
 8008846:	db0a      	blt.n	800885e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	b2da      	uxtb	r2, r3
 800884c:	490c      	ldr	r1, [pc, #48]	; (8008880 <__NVIC_SetPriority+0x4c>)
 800884e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008852:	0112      	lsls	r2, r2, #4
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	440b      	add	r3, r1
 8008858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800885c:	e00a      	b.n	8008874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	b2da      	uxtb	r2, r3
 8008862:	4908      	ldr	r1, [pc, #32]	; (8008884 <__NVIC_SetPriority+0x50>)
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	3b04      	subs	r3, #4
 800886c:	0112      	lsls	r2, r2, #4
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	440b      	add	r3, r1
 8008872:	761a      	strb	r2, [r3, #24]
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	e000e100 	.word	0xe000e100
 8008884:	e000ed00 	.word	0xe000ed00

08008888 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800888c:	2100      	movs	r1, #0
 800888e:	f06f 0004 	mvn.w	r0, #4
 8008892:	f7ff ffcf 	bl	8008834 <__NVIC_SetPriority>
#endif
}
 8008896:	bf00      	nop
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a2:	f3ef 8305 	mrs	r3, IPSR
 80088a6:	603b      	str	r3, [r7, #0]
  return(result);
 80088a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088ae:	f06f 0305 	mvn.w	r3, #5
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	e00c      	b.n	80088d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <osKernelInitialize+0x44>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088be:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <osKernelInitialize+0x44>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	e002      	b.n	80088d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088d0:	687b      	ldr	r3, [r7, #4]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	200001c8 	.word	0x200001c8

080088e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088ea:	f3ef 8305 	mrs	r3, IPSR
 80088ee:	603b      	str	r3, [r7, #0]
  return(result);
 80088f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80088f6:	f06f 0305 	mvn.w	r3, #5
 80088fa:	607b      	str	r3, [r7, #4]
 80088fc:	e010      	b.n	8008920 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088fe:	4b0b      	ldr	r3, [pc, #44]	; (800892c <osKernelStart+0x48>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d109      	bne.n	800891a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008906:	f7ff ffbf 	bl	8008888 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800890a:	4b08      	ldr	r3, [pc, #32]	; (800892c <osKernelStart+0x48>)
 800890c:	2202      	movs	r2, #2
 800890e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008910:	f001 fa50 	bl	8009db4 <vTaskStartScheduler>
      stat = osOK;
 8008914:	2300      	movs	r3, #0
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	e002      	b.n	8008920 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800891e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008920:	687b      	ldr	r3, [r7, #4]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200001c8 	.word	0x200001c8

08008930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b08e      	sub	sp, #56	; 0x38
 8008934:	af04      	add	r7, sp, #16
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800893c:	2300      	movs	r3, #0
 800893e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008940:	f3ef 8305 	mrs	r3, IPSR
 8008944:	617b      	str	r3, [r7, #20]
  return(result);
 8008946:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008948:	2b00      	cmp	r3, #0
 800894a:	d17e      	bne.n	8008a4a <osThreadNew+0x11a>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d07b      	beq.n	8008a4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008952:	2380      	movs	r3, #128	; 0x80
 8008954:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008956:	2318      	movs	r3, #24
 8008958:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d045      	beq.n	80089f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <osThreadNew+0x48>
        name = attr->name;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d008      	beq.n	800899e <osThreadNew+0x6e>
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b38      	cmp	r3, #56	; 0x38
 8008990:	d805      	bhi.n	800899e <osThreadNew+0x6e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <osThreadNew+0x72>
        return (NULL);
 800899e:	2300      	movs	r3, #0
 80089a0:	e054      	b.n	8008a4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	089b      	lsrs	r3, r3, #2
 80089b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00e      	beq.n	80089d8 <osThreadNew+0xa8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b5b      	cmp	r3, #91	; 0x5b
 80089c0:	d90a      	bls.n	80089d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <osThreadNew+0xa8>
        mem = 1;
 80089d2:	2301      	movs	r3, #1
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e010      	b.n	80089fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10c      	bne.n	80089fa <osThreadNew+0xca>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d108      	bne.n	80089fa <osThreadNew+0xca>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <osThreadNew+0xca>
          mem = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	e001      	b.n	80089fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d110      	bne.n	8008a22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a08:	9202      	str	r2, [sp, #8]
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6a3a      	ldr	r2, [r7, #32]
 8008a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fff6 	bl	8009a08 <xTaskCreateStatic>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	e013      	b.n	8008a4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d110      	bne.n	8008a4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	f107 0310 	add.w	r3, r7, #16
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f001 f841 	bl	8009ac2 <xTaskCreate>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d001      	beq.n	8008a4a <osThreadNew+0x11a>
            hTask = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a4a:	693b      	ldr	r3, [r7, #16]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3728      	adds	r7, #40	; 0x28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a5c:	f3ef 8305 	mrs	r3, IPSR
 8008a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <osDelay+0x1c>
    stat = osErrorISR;
 8008a68:	f06f 0305 	mvn.w	r3, #5
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e007      	b.n	8008a80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 f966 	bl	8009d4c <vTaskDelay>
    }
  }

  return (stat);
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b08a      	sub	sp, #40	; 0x28
 8008a8e:	af02      	add	r7, sp, #8
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a9a:	f3ef 8305 	mrs	r3, IPSR
 8008a9e:	613b      	str	r3, [r7, #16]
  return(result);
 8008aa0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d15f      	bne.n	8008b66 <osMessageQueueNew+0xdc>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d05c      	beq.n	8008b66 <osMessageQueueNew+0xdc>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d059      	beq.n	8008b66 <osMessageQueueNew+0xdc>
    mem = -1;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d029      	beq.n	8008b12 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d012      	beq.n	8008aec <osMessageQueueNew+0x62>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b4f      	cmp	r3, #79	; 0x4f
 8008acc:	d90e      	bls.n	8008aec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695a      	ldr	r2, [r3, #20]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <osMessageQueueNew+0x62>
        mem = 1;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	e014      	b.n	8008b16 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d110      	bne.n	8008b16 <osMessageQueueNew+0x8c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10c      	bne.n	8008b16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d108      	bne.n	8008b16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <osMessageQueueNew+0x8c>
          mem = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e001      	b.n	8008b16 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d10b      	bne.n	8008b34 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2100      	movs	r1, #0
 8008b26:	9100      	str	r1, [sp, #0]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fa2e 	bl	8008f8c <xQueueGenericCreateStatic>
 8008b30:	61f8      	str	r0, [r7, #28]
 8008b32:	e008      	b.n	8008b46 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fa9c 	bl	800907c <xQueueGenericCreate>
 8008b44:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e001      	b.n	8008b5e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b5e:	6979      	ldr	r1, [r7, #20]
 8008b60:	69f8      	ldr	r0, [r7, #28]
 8008b62:	f000 fef3 	bl	800994c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b66:	69fb      	ldr	r3, [r7, #28]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b88:	f3ef 8305 	mrs	r3, IPSR
 8008b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d028      	beq.n	8008be6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <osMessageQueuePut+0x36>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <osMessageQueuePut+0x36>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008ba6:	f06f 0303 	mvn.w	r3, #3
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	e038      	b.n	8008c20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008bb2:	f107 0210 	add.w	r2, r7, #16
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	68b9      	ldr	r1, [r7, #8]
 8008bba:	69b8      	ldr	r0, [r7, #24]
 8008bbc:	f000 fbba 	bl	8009334 <xQueueGenericSendFromISR>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d003      	beq.n	8008bce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008bc6:	f06f 0302 	mvn.w	r3, #2
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e028      	b.n	8008c20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d025      	beq.n	8008c20 <osMessageQueuePut+0xb0>
 8008bd4:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <osMessageQueuePut+0xbc>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	e01c      	b.n	8008c20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <osMessageQueuePut+0x82>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008bf2:	f06f 0303 	mvn.w	r3, #3
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	e012      	b.n	8008c20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	69b8      	ldr	r0, [r7, #24]
 8008c02:	f000 fa99 	bl	8009138 <xQueueGenericSend>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d009      	beq.n	8008c20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c12:	f06f 0301 	mvn.w	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	e002      	b.n	8008c20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c1a:	f06f 0302 	mvn.w	r3, #2
 8008c1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c20:	69fb      	ldr	r3, [r7, #28]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	e000ed04 	.word	0xe000ed04

08008c30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c46:	f3ef 8305 	mrs	r3, IPSR
 8008c4a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d028      	beq.n	8008ca4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <osMessageQueueGet+0x34>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <osMessageQueueGet+0x34>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c64:	f06f 0303 	mvn.w	r3, #3
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e037      	b.n	8008cdc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c70:	f107 0310 	add.w	r3, r7, #16
 8008c74:	461a      	mov	r2, r3
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	69b8      	ldr	r0, [r7, #24]
 8008c7a:	f000 fcd7 	bl	800962c <xQueueReceiveFromISR>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d003      	beq.n	8008c8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c84:	f06f 0302 	mvn.w	r3, #2
 8008c88:	61fb      	str	r3, [r7, #28]
 8008c8a:	e027      	b.n	8008cdc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d024      	beq.n	8008cdc <osMessageQueueGet+0xac>
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <osMessageQueueGet+0xb8>)
 8008c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	e01b      	b.n	8008cdc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <osMessageQueueGet+0x80>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008cb0:	f06f 0303 	mvn.w	r3, #3
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	e011      	b.n	8008cdc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	69b8      	ldr	r0, [r7, #24]
 8008cbe:	f000 fbd5 	bl	800946c <xQueueReceive>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d009      	beq.n	8008cdc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008cce:	f06f 0301 	mvn.w	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	e002      	b.n	8008cdc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008cd6:	f06f 0302 	mvn.w	r3, #2
 8008cda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <vApplicationGetIdleTaskMemory+0x2c>)
 8008cfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	4a06      	ldr	r2, [pc, #24]	; (8008d1c <vApplicationGetIdleTaskMemory+0x30>)
 8008d02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2280      	movs	r2, #128	; 0x80
 8008d08:	601a      	str	r2, [r3, #0]
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	200001cc 	.word	0x200001cc
 8008d1c:	20000228 	.word	0x20000228

08008d20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4a07      	ldr	r2, [pc, #28]	; (8008d4c <vApplicationGetTimerTaskMemory+0x2c>)
 8008d30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <vApplicationGetTimerTaskMemory+0x30>)
 8008d36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d3e:	601a      	str	r2, [r3, #0]
}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000428 	.word	0x20000428
 8008d50:	20000484 	.word	0x20000484

08008d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f103 0208 	add.w	r2, r3, #8
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f103 0208 	add.w	r2, r3, #8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f103 0208 	add.w	r2, r3, #8
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	601a      	str	r2, [r3, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e0c:	d103      	bne.n	8008e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e00c      	b.n	8008e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e002      	b.n	8008e24 <vListInsert+0x2e>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d2f6      	bcs.n	8008e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6892      	ldr	r2, [r2, #8]
 8008e7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6852      	ldr	r2, [r2, #4]
 8008e88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d103      	bne.n	8008e9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ee6:	f002 f905 	bl	800b0f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ef6:	fb01 f303 	mul.w	r3, r1, r3
 8008efa:	441a      	add	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	3b01      	subs	r3, #1
 8008f18:	68f9      	ldr	r1, [r7, #12]
 8008f1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f1c:	fb01 f303 	mul.w	r3, r1, r3
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	22ff      	movs	r2, #255	; 0xff
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	22ff      	movs	r2, #255	; 0xff
 8008f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d114      	bne.n	8008f66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01a      	beq.n	8008f7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3310      	adds	r3, #16
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 f9bd 	bl	800a2c8 <xTaskRemoveFromEventList>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d012      	beq.n	8008f7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <xQueueGenericReset+0xcc>)
 8008f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	e009      	b.n	8008f7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3310      	adds	r3, #16
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fef2 	bl	8008d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff feed 	bl	8008d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f7a:	f002 f8eb 	bl	800b154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f7e:	2301      	movs	r3, #1
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08e      	sub	sp, #56	; 0x38
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <xQueueGenericCreateStatic+0x52>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <xQueueGenericCreateStatic+0x56>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueGenericCreateStatic+0x58>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	623b      	str	r3, [r7, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <xQueueGenericCreateStatic+0x7e>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <xQueueGenericCreateStatic+0x82>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <xQueueGenericCreateStatic+0x84>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	61fb      	str	r3, [r7, #28]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800902a:	2350      	movs	r3, #80	; 0x50
 800902c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b50      	cmp	r3, #80	; 0x50
 8009032:	d00a      	beq.n	800904a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	61bb      	str	r3, [r7, #24]
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800904a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00d      	beq.n	8009072 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800905e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	4613      	mov	r3, r2
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 f83f 	bl	80090f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009074:	4618      	mov	r0, r3
 8009076:	3730      	adds	r7, #48	; 0x30
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af02      	add	r7, sp, #8
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	613b      	str	r3, [r7, #16]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	3350      	adds	r3, #80	; 0x50
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 f93f 	bl	800b338 <pvPortMalloc>
 80090ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d011      	beq.n	80090e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	3350      	adds	r3, #80	; 0x50
 80090ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090d4:	79fa      	ldrb	r2, [r7, #7]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4613      	mov	r3, r2
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f805 	bl	80090f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090e6:	69bb      	ldr	r3, [r7, #24]
	}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e002      	b.n	8009112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800911e:	2101      	movs	r1, #1
 8009120:	69b8      	ldr	r0, [r7, #24]
 8009122:	f7ff fecb 	bl	8008ebc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	; 0x38
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009146:	2300      	movs	r3, #0
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xQueueGenericSend+0x32>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <xQueueGenericSend+0x40>
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <xQueueGenericSend+0x44>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <xQueueGenericSend+0x46>
 800917c:	2300      	movs	r3, #0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <xQueueGenericSend+0x60>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSend+0x6e>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <xQueueGenericSend+0x72>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueGenericSend+0x74>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	623b      	str	r3, [r7, #32]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091c6:	f001 fa3d 	bl	800a644 <xTaskGetSchedulerState>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <xQueueGenericSend+0x9e>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <xQueueGenericSend+0xa2>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <xQueueGenericSend+0xa4>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	61fb      	str	r3, [r7, #28]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091f6:	f001 ff7d 	bl	800b0f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	429a      	cmp	r2, r3
 8009204:	d302      	bcc.n	800920c <xQueueGenericSend+0xd4>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d129      	bne.n	8009260 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009212:	f000 fa8b 	bl	800972c <prvCopyDataToQueue>
 8009216:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	d010      	beq.n	8009242 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	3324      	adds	r3, #36	; 0x24
 8009224:	4618      	mov	r0, r3
 8009226:	f001 f84f 	bl	800a2c8 <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d013      	beq.n	8009258 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009230:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <xQueueGenericSend+0x1f8>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e00a      	b.n	8009258 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009248:	4b39      	ldr	r3, [pc, #228]	; (8009330 <xQueueGenericSend+0x1f8>)
 800924a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009258:	f001 ff7c 	bl	800b154 <vPortExitCritical>
				return pdPASS;
 800925c:	2301      	movs	r3, #1
 800925e:	e063      	b.n	8009328 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009266:	f001 ff75 	bl	800b154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800926a:	2300      	movs	r3, #0
 800926c:	e05c      	b.n	8009328 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009274:	f107 0314 	add.w	r3, r7, #20
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f889 	bl	800a390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800927e:	2301      	movs	r3, #1
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009282:	f001 ff67 	bl	800b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009286:	f000 fdfb 	bl	8009e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800928a:	f001 ff33 	bl	800b0f4 <vPortEnterCritical>
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009294:	b25b      	sxtb	r3, r3
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800929a:	d103      	bne.n	80092a4 <xQueueGenericSend+0x16c>
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b0:	d103      	bne.n	80092ba <xQueueGenericSend+0x182>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ba:	f001 ff4b 	bl	800b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092be:	1d3a      	adds	r2, r7, #4
 80092c0:	f107 0314 	add.w	r3, r7, #20
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 f878 	bl	800a3bc <xTaskCheckForTimeOut>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d124      	bne.n	800931c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092d4:	f000 fb22 	bl	800991c <prvIsQueueFull>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d018      	beq.n	8009310 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	3310      	adds	r3, #16
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 ff9e 	bl	800a228 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ee:	f000 faad 	bl	800984c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092f2:	f000 fdd3 	bl	8009e9c <xTaskResumeAll>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f47f af7c 	bne.w	80091f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80092fe:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <xQueueGenericSend+0x1f8>)
 8009300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	e772      	b.n	80091f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009312:	f000 fa9b 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009316:	f000 fdc1 	bl	8009e9c <xTaskResumeAll>
 800931a:	e76c      	b.n	80091f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800931c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800931e:	f000 fa95 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009322:	f000 fdbb 	bl	8009e9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009326:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009328:	4618      	mov	r0, r3
 800932a:	3738      	adds	r7, #56	; 0x38
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b090      	sub	sp, #64	; 0x40
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <xQueueGenericSendFromISR+0x3c>
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <xQueueGenericSendFromISR+0x40>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <xQueueGenericSendFromISR+0x42>
 8009374:	2300      	movs	r3, #0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d103      	bne.n	800939e <xQueueGenericSendFromISR+0x6a>
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <xQueueGenericSendFromISR+0x6e>
 800939e:	2301      	movs	r3, #1
 80093a0:	e000      	b.n	80093a4 <xQueueGenericSendFromISR+0x70>
 80093a2:	2300      	movs	r3, #0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	623b      	str	r3, [r7, #32]
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093be:	f001 ff7b 	bl	800b2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093c2:	f3ef 8211 	mrs	r2, BASEPRI
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	61fa      	str	r2, [r7, #28]
 80093d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <xQueueGenericSendFromISR+0xbc>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d12f      	bne.n	8009450 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009406:	f000 f991 	bl	800972c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800940a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009412:	d112      	bne.n	800943a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	d016      	beq.n	800944a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	4618      	mov	r0, r3
 8009422:	f000 ff51 	bl	800a2c8 <xTaskRemoveFromEventList>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00e      	beq.n	800944a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00b      	beq.n	800944a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e007      	b.n	800944a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800943a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800943e:	3301      	adds	r3, #1
 8009440:	b2db      	uxtb	r3, r3
 8009442:	b25a      	sxtb	r2, r3
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800944a:	2301      	movs	r3, #1
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800944e:	e001      	b.n	8009454 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009450:	2300      	movs	r3, #0
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800945e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009462:	4618      	mov	r0, r3
 8009464:	3740      	adds	r7, #64	; 0x40
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08c      	sub	sp, #48	; 0x30
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xQueueReceive+0x30>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	623b      	str	r3, [r7, #32]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d103      	bne.n	80094aa <xQueueReceive+0x3e>
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <xQueueReceive+0x42>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueReceive+0x44>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <xQueueReceive+0x5e>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61fb      	str	r3, [r7, #28]
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094ca:	f001 f8bb 	bl	800a644 <xTaskGetSchedulerState>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <xQueueReceive+0x6e>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <xQueueReceive+0x72>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueReceive+0x74>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueReceive+0x8e>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61bb      	str	r3, [r7, #24]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094fa:	f001 fdfb 	bl	800b0f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01f      	beq.n	800954a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950e:	f000 f977 	bl	8009800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	1e5a      	subs	r2, r3, #1
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00f      	beq.n	8009542 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	3310      	adds	r3, #16
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fece 	bl	800a2c8 <xTaskRemoveFromEventList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009532:	4b3d      	ldr	r3, [pc, #244]	; (8009628 <xQueueReceive+0x1bc>)
 8009534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009542:	f001 fe07 	bl	800b154 <vPortExitCritical>
				return pdPASS;
 8009546:	2301      	movs	r3, #1
 8009548:	e069      	b.n	800961e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d103      	bne.n	8009558 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009550:	f001 fe00 	bl	800b154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009554:	2300      	movs	r3, #0
 8009556:	e062      	b.n	800961e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d106      	bne.n	800956c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800955e:	f107 0310 	add.w	r3, r7, #16
 8009562:	4618      	mov	r0, r3
 8009564:	f000 ff14 	bl	800a390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009568:	2301      	movs	r3, #1
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800956c:	f001 fdf2 	bl	800b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009570:	f000 fc86 	bl	8009e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009574:	f001 fdbe 	bl	800b0f4 <vPortEnterCritical>
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800957e:	b25b      	sxtb	r3, r3
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009584:	d103      	bne.n	800958e <xQueueReceive+0x122>
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009594:	b25b      	sxtb	r3, r3
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800959a:	d103      	bne.n	80095a4 <xQueueReceive+0x138>
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a4:	f001 fdd6 	bl	800b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095a8:	1d3a      	adds	r2, r7, #4
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 ff03 	bl	800a3bc <xTaskCheckForTimeOut>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d123      	bne.n	8009604 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095be:	f000 f997 	bl	80098f0 <prvIsQueueEmpty>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d017      	beq.n	80095f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	3324      	adds	r3, #36	; 0x24
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 fe29 	bl	800a228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d8:	f000 f938 	bl	800984c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095dc:	f000 fc5e 	bl	8009e9c <xTaskResumeAll>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d189      	bne.n	80094fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80095e6:	4b10      	ldr	r3, [pc, #64]	; (8009628 <xQueueReceive+0x1bc>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	e780      	b.n	80094fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095fa:	f000 f927 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095fe:	f000 fc4d 	bl	8009e9c <xTaskResumeAll>
 8009602:	e77a      	b.n	80094fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009606:	f000 f921 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800960a:	f000 fc47 	bl	8009e9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800960e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009610:	f000 f96e 	bl	80098f0 <prvIsQueueEmpty>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	f43f af6f 	beq.w	80094fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800961c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800961e:	4618      	mov	r0, r3
 8009620:	3730      	adds	r7, #48	; 0x30
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08e      	sub	sp, #56	; 0x38
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	623b      	str	r3, [r7, #32]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <xQueueReceiveFromISR+0x3a>
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <xQueueReceiveFromISR+0x3e>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <xQueueReceiveFromISR+0x40>
 800966a:	2300      	movs	r3, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	61fb      	str	r3, [r7, #28]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009686:	f001 fe17 	bl	800b2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800968a:	f3ef 8211 	mrs	r2, BASEPRI
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	61ba      	str	r2, [r7, #24]
 80096a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80096a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d02f      	beq.n	8009712 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096bc:	68b9      	ldr	r1, [r7, #8]
 80096be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096c0:	f000 f89e 	bl	8009800 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	1e5a      	subs	r2, r3, #1
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80096cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d4:	d112      	bne.n	80096fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d016      	beq.n	800970c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	3310      	adds	r3, #16
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fdf0 	bl	800a2c8 <xTaskRemoveFromEventList>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00e      	beq.n	800970c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e007      	b.n	800970c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80096fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009700:	3301      	adds	r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	b25a      	sxtb	r2, r3
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	637b      	str	r3, [r7, #52]	; 0x34
 8009710:	e001      	b.n	8009716 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009712:	2300      	movs	r3, #0
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	613b      	str	r3, [r7, #16]
	__asm volatile
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f383 8811 	msr	BASEPRI, r3
}
 8009720:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009724:	4618      	mov	r0, r3
 8009726:	3738      	adds	r7, #56	; 0x38
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10d      	bne.n	8009766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d14d      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ff92 	bl	800a680 <xTaskPriorityDisinherit>
 800975c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	609a      	str	r2, [r3, #8]
 8009764:	e043      	b.n	80097ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d119      	bne.n	80097a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6858      	ldr	r0, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	461a      	mov	r2, r3
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	f002 fbcc 	bl	800bf14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d32b      	bcc.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	e026      	b.n	80097ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	68d8      	ldr	r0, [r3, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	461a      	mov	r2, r3
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	f002 fbb2 	bl	800bf14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	425b      	negs	r3, r3
 80097ba:	441a      	add	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d207      	bcs.n	80097dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	425b      	negs	r3, r3
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d105      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097f6:	697b      	ldr	r3, [r7, #20]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d018      	beq.n	8009844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	441a      	add	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d303      	bcc.n	8009834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68d9      	ldr	r1, [r3, #12]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	461a      	mov	r2, r3
 800983e:	6838      	ldr	r0, [r7, #0]
 8009840:	f002 fb68 	bl	800bf14 <memcpy>
	}
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009854:	f001 fc4e 	bl	800b0f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009860:	e011      	b.n	8009886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d012      	beq.n	8009890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fd2a 	bl	800a2c8 <xTaskRemoveFromEventList>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800987a:	f000 fe01 	bl	800a480 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	3b01      	subs	r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dce9      	bgt.n	8009862 <prvUnlockQueue+0x16>
 800988e:	e000      	b.n	8009892 <prvUnlockQueue+0x46>
					break;
 8009890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800989a:	f001 fc5b 	bl	800b154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800989e:	f001 fc29 	bl	800b0f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098aa:	e011      	b.n	80098d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d012      	beq.n	80098da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3310      	adds	r3, #16
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fd05 	bl	800a2c8 <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098c4:	f000 fddc 	bl	800a480 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dce9      	bgt.n	80098ac <prvUnlockQueue+0x60>
 80098d8:	e000      	b.n	80098dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	22ff      	movs	r2, #255	; 0xff
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098e4:	f001 fc36 	bl	800b154 <vPortExitCritical>
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098f8:	f001 fbfc 	bl	800b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e001      	b.n	800990e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f001 fc21 	bl	800b154 <vPortExitCritical>

	return xReturn;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009924:	f001 fbe6 	bl	800b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009930:	429a      	cmp	r2, r3
 8009932:	d102      	bne.n	800993a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e001      	b.n	800993e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800993e:	f001 fc09 	bl	800b154 <vPortExitCritical>

	return xReturn;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e014      	b.n	8009986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800995c:	4a0f      	ldr	r2, [pc, #60]	; (800999c <vQueueAddToRegistry+0x50>)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10b      	bne.n	8009980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009968:	490c      	ldr	r1, [pc, #48]	; (800999c <vQueueAddToRegistry+0x50>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009972:	4a0a      	ldr	r2, [pc, #40]	; (800999c <vQueueAddToRegistry+0x50>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800997e:	e006      	b.n	800998e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b07      	cmp	r3, #7
 800998a:	d9e7      	bls.n	800995c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20000884 	.word	0x20000884

080099a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099b0:	f001 fba0 	bl	800b0f4 <vPortEnterCritical>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ba:	b25b      	sxtb	r3, r3
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c0:	d103      	bne.n	80099ca <vQueueWaitForMessageRestricted+0x2a>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d0:	b25b      	sxtb	r3, r3
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d6:	d103      	bne.n	80099e0 <vQueueWaitForMessageRestricted+0x40>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e0:	f001 fbb8 	bl	800b154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fc3b 	bl	800a270 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff26 	bl	800984c <prvUnlockQueue>
	}
 8009a00:	bf00      	nop
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	; 0x38
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	623b      	str	r3, [r7, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xTaskCreateStatic+0x46>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	61fb      	str	r3, [r7, #28]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a4e:	235c      	movs	r3, #92	; 0x5c
 8009a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b5c      	cmp	r3, #92	; 0x5c
 8009a56:	d00a      	beq.n	8009a6e <xTaskCreateStatic+0x66>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	61bb      	str	r3, [r7, #24]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01e      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01b      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	f107 0314 	add.w	r3, r7, #20
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f850 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aae:	f000 f8dd 	bl	8009c6c <prvAddNewTaskToReadyList>
 8009ab2:	e001      	b.n	8009ab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ab8:	697b      	ldr	r3, [r7, #20]
	}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	; 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08c      	sub	sp, #48	; 0x30
 8009ac6:	af04      	add	r7, sp, #16
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fc2e 	bl	800b338 <pvPortMalloc>
 8009adc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ae4:	205c      	movs	r0, #92	; 0x5c
 8009ae6:	f001 fc27 	bl	800b338 <pvPortMalloc>
 8009aea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
 8009af8:	e005      	b.n	8009b06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	f001 fce8 	bl	800b4d0 <vPortFree>
 8009b00:	e001      	b.n	8009b06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d017      	beq.n	8009b3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f80e 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 f89b 	bl	8009c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e002      	b.n	8009b42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b42:	69bb      	ldr	r3, [r7, #24]
	}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3720      	adds	r7, #32
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	461a      	mov	r2, r3
 8009b64:	21a5      	movs	r1, #165	; 0xa5
 8009b66:	f002 f991 	bl	800be8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b74:	3b01      	subs	r3, #1
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f023 0307 	bic.w	r3, r3, #7
 8009b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01f      	beq.n	8009bea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e012      	b.n	8009bd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	7819      	ldrb	r1, [r3, #0]
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3334      	adds	r3, #52	; 0x34
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b0f      	cmp	r3, #15
 8009bda:	d9e9      	bls.n	8009bb0 <prvInitialiseNewTask+0x64>
 8009bdc:	e000      	b.n	8009be0 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009be8:	e003      	b.n	8009bf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	2b37      	cmp	r3, #55	; 0x37
 8009bf6:	d901      	bls.n	8009bfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bf8:	2337      	movs	r3, #55	; 0x37
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	3304      	adds	r3, #4
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f8be 	bl	8008d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	3318      	adds	r3, #24
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f8b9 	bl	8008d94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	69b8      	ldr	r0, [r7, #24]
 8009c4c:	f001 f928 	bl	800aea0 <pxPortInitialiseStack>
 8009c50:	4602      	mov	r2, r0
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c62:	bf00      	nop
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c74:	f001 fa3e 	bl	800b0f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c78:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <prvAddNewTaskToReadyList+0xc4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	4a2c      	ldr	r2, [pc, #176]	; (8009d30 <prvAddNewTaskToReadyList+0xc4>)
 8009c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c82:	4b2c      	ldr	r3, [pc, #176]	; (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c8a:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c90:	4b27      	ldr	r3, [pc, #156]	; (8009d30 <prvAddNewTaskToReadyList+0xc4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d110      	bne.n	8009cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c98:	f000 fc16 	bl	800a4c8 <prvInitialiseTaskLists>
 8009c9c:	e00d      	b.n	8009cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c9e:	4b26      	ldr	r3, [pc, #152]	; (8009d38 <prvAddNewTaskToReadyList+0xcc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ca6:	4b23      	ldr	r3, [pc, #140]	; (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d802      	bhi.n	8009cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cba:	4b20      	ldr	r3, [pc, #128]	; (8009d3c <prvAddNewTaskToReadyList+0xd0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	4a1e      	ldr	r2, [pc, #120]	; (8009d3c <prvAddNewTaskToReadyList+0xd0>)
 8009cc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cc4:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <prvAddNewTaskToReadyList+0xd0>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <prvAddNewTaskToReadyList+0xd4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d903      	bls.n	8009ce0 <prvAddNewTaskToReadyList+0x74>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	4a18      	ldr	r2, [pc, #96]	; (8009d40 <prvAddNewTaskToReadyList+0xd4>)
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4a15      	ldr	r2, [pc, #84]	; (8009d44 <prvAddNewTaskToReadyList+0xd8>)
 8009cee:	441a      	add	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7ff f859 	bl	8008dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cfc:	f001 fa2a 	bl	800b154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d00:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <prvAddNewTaskToReadyList+0xcc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00e      	beq.n	8009d26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <prvAddNewTaskToReadyList+0xc8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d207      	bcs.n	8009d26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <prvAddNewTaskToReadyList+0xdc>)
 8009d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000d98 	.word	0x20000d98
 8009d34:	200008c4 	.word	0x200008c4
 8009d38:	20000da4 	.word	0x20000da4
 8009d3c:	20000db4 	.word	0x20000db4
 8009d40:	20000da0 	.word	0x20000da0
 8009d44:	200008c8 	.word	0x200008c8
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d017      	beq.n	8009d8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <vTaskDelay+0x60>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <vTaskDelay+0x30>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	60bb      	str	r3, [r7, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d7c:	f000 f880 	bl	8009e80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d80:	2100      	movs	r1, #0
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fcea 	bl	800a75c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d88:	f000 f888 	bl	8009e9c <xTaskResumeAll>
 8009d8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d107      	bne.n	8009da4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d94:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <vTaskDelay+0x64>)
 8009d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000dc0 	.word	0x20000dc0
 8009db0:	e000ed04 	.word	0xe000ed04

08009db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	1d39      	adds	r1, r7, #4
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe ff8e 	bl	8008cec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	9202      	str	r2, [sp, #8]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	2300      	movs	r3, #0
 8009de0:	460a      	mov	r2, r1
 8009de2:	4921      	ldr	r1, [pc, #132]	; (8009e68 <vTaskStartScheduler+0xb4>)
 8009de4:	4821      	ldr	r0, [pc, #132]	; (8009e6c <vTaskStartScheduler+0xb8>)
 8009de6:	f7ff fe0f 	bl	8009a08 <xTaskCreateStatic>
 8009dea:	4603      	mov	r3, r0
 8009dec:	4a20      	ldr	r2, [pc, #128]	; (8009e70 <vTaskStartScheduler+0xbc>)
 8009dee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009df0:	4b1f      	ldr	r3, [pc, #124]	; (8009e70 <vTaskStartScheduler+0xbc>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e001      	b.n	8009e02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d102      	bne.n	8009e0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e08:	f000 fcfc 	bl	800a804 <xTimerCreateTimerTask>
 8009e0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d116      	bne.n	8009e42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	613b      	str	r3, [r7, #16]
}
 8009e26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e28:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <vTaskStartScheduler+0xc0>)
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e30:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <vTaskStartScheduler+0xc4>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <vTaskStartScheduler+0xc8>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e3c:	f001 f8b8 	bl	800afb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e40:	e00e      	b.n	8009e60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e48:	d10a      	bne.n	8009e60 <vTaskStartScheduler+0xac>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	60fb      	str	r3, [r7, #12]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <vTaskStartScheduler+0xaa>
}
 8009e60:	bf00      	nop
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	0800bffc 	.word	0x0800bffc
 8009e6c:	0800a499 	.word	0x0800a499
 8009e70:	20000dbc 	.word	0x20000dbc
 8009e74:	20000db8 	.word	0x20000db8
 8009e78:	20000da4 	.word	0x20000da4
 8009e7c:	20000d9c 	.word	0x20000d9c

08009e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <vTaskSuspendAll+0x18>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	4a03      	ldr	r2, [pc, #12]	; (8009e98 <vTaskSuspendAll+0x18>)
 8009e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e8e:	bf00      	nop
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	20000dc0 	.word	0x20000dc0

08009e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eaa:	4b42      	ldr	r3, [pc, #264]	; (8009fb4 <xTaskResumeAll+0x118>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	603b      	str	r3, [r7, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ec8:	f001 f914 	bl	800b0f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ecc:	4b39      	ldr	r3, [pc, #228]	; (8009fb4 <xTaskResumeAll+0x118>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	4a38      	ldr	r2, [pc, #224]	; (8009fb4 <xTaskResumeAll+0x118>)
 8009ed4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ed6:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <xTaskResumeAll+0x118>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d162      	bne.n	8009fa4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ede:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <xTaskResumeAll+0x11c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d05e      	beq.n	8009fa4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ee6:	e02f      	b.n	8009f48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee8:	4b34      	ldr	r3, [pc, #208]	; (8009fbc <xTaskResumeAll+0x120>)
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3318      	adds	r3, #24
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe ffb7 	bl	8008e68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe ffb2 	bl	8008e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b2d      	ldr	r3, [pc, #180]	; (8009fc0 <xTaskResumeAll+0x124>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <xTaskResumeAll+0x7c>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a2a      	ldr	r2, [pc, #168]	; (8009fc0 <xTaskResumeAll+0x124>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a27      	ldr	r2, [pc, #156]	; (8009fc4 <xTaskResumeAll+0x128>)
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe ff3d 	bl	8008dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f38:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <xTaskResumeAll+0x12c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f42:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <xTaskResumeAll+0x130>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <xTaskResumeAll+0x120>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1cb      	bne.n	8009ee8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f56:	f000 fb55 	bl	800a604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <xTaskResumeAll+0x134>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d010      	beq.n	8009f88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f66:	f000 f847 	bl	8009ff8 <xTaskIncrementTick>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f70:	4b16      	ldr	r3, [pc, #88]	; (8009fcc <xTaskResumeAll+0x130>)
 8009f72:	2201      	movs	r2, #1
 8009f74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f1      	bne.n	8009f66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <xTaskResumeAll+0x134>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f88:	4b10      	ldr	r3, [pc, #64]	; (8009fcc <xTaskResumeAll+0x130>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d009      	beq.n	8009fa4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <xTaskResumeAll+0x138>)
 8009f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fa4:	f001 f8d6 	bl	800b154 <vPortExitCritical>

	return xAlreadyYielded;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000dc0 	.word	0x20000dc0
 8009fb8:	20000d98 	.word	0x20000d98
 8009fbc:	20000d58 	.word	0x20000d58
 8009fc0:	20000da0 	.word	0x20000da0
 8009fc4:	200008c8 	.word	0x200008c8
 8009fc8:	200008c4 	.word	0x200008c4
 8009fcc:	20000dac 	.word	0x20000dac
 8009fd0:	20000da8 	.word	0x20000da8
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009fde:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <xTaskGetTickCount+0x1c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fe4:	687b      	ldr	r3, [r7, #4]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000d9c 	.word	0x20000d9c

08009ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a002:	4b4f      	ldr	r3, [pc, #316]	; (800a140 <xTaskIncrementTick+0x148>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f040 808f 	bne.w	800a12a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a00c:	4b4d      	ldr	r3, [pc, #308]	; (800a144 <xTaskIncrementTick+0x14c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3301      	adds	r3, #1
 800a012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a014:	4a4b      	ldr	r2, [pc, #300]	; (800a144 <xTaskIncrementTick+0x14c>)
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d120      	bne.n	800a062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a020:	4b49      	ldr	r3, [pc, #292]	; (800a148 <xTaskIncrementTick+0x150>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <xTaskIncrementTick+0x48>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	603b      	str	r3, [r7, #0]
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <xTaskIncrementTick+0x46>
 800a040:	4b41      	ldr	r3, [pc, #260]	; (800a148 <xTaskIncrementTick+0x150>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	4b41      	ldr	r3, [pc, #260]	; (800a14c <xTaskIncrementTick+0x154>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a3f      	ldr	r2, [pc, #252]	; (800a148 <xTaskIncrementTick+0x150>)
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	4a3f      	ldr	r2, [pc, #252]	; (800a14c <xTaskIncrementTick+0x154>)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	4b3e      	ldr	r3, [pc, #248]	; (800a150 <xTaskIncrementTick+0x158>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3301      	adds	r3, #1
 800a05a:	4a3d      	ldr	r2, [pc, #244]	; (800a150 <xTaskIncrementTick+0x158>)
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	f000 fad1 	bl	800a604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a062:	4b3c      	ldr	r3, [pc, #240]	; (800a154 <xTaskIncrementTick+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d349      	bcc.n	800a100 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a06c:	4b36      	ldr	r3, [pc, #216]	; (800a148 <xTaskIncrementTick+0x150>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d104      	bne.n	800a080 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a076:	4b37      	ldr	r3, [pc, #220]	; (800a154 <xTaskIncrementTick+0x15c>)
 800a078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a07c:	601a      	str	r2, [r3, #0]
					break;
 800a07e:	e03f      	b.n	800a100 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a080:	4b31      	ldr	r3, [pc, #196]	; (800a148 <xTaskIncrementTick+0x150>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d203      	bcs.n	800a0a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a098:	4a2e      	ldr	r2, [pc, #184]	; (800a154 <xTaskIncrementTick+0x15c>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a09e:	e02f      	b.n	800a100 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fedf 	bl	8008e68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	3318      	adds	r3, #24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fed6 	bl	8008e68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c0:	4b25      	ldr	r3, [pc, #148]	; (800a158 <xTaskIncrementTick+0x160>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d903      	bls.n	800a0d0 <xTaskIncrementTick+0xd8>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	4a22      	ldr	r2, [pc, #136]	; (800a158 <xTaskIncrementTick+0x160>)
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <xTaskIncrementTick+0x164>)
 800a0de:	441a      	add	r2, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fe fe61 	bl	8008dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <xTaskIncrementTick+0x168>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d3b8      	bcc.n	800a06c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0fe:	e7b5      	b.n	800a06c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a100:	4b17      	ldr	r3, [pc, #92]	; (800a160 <xTaskIncrementTick+0x168>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a106:	4915      	ldr	r1, [pc, #84]	; (800a15c <xTaskIncrementTick+0x164>)
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d901      	bls.n	800a11c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <xTaskIncrementTick+0x16c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d007      	beq.n	800a134 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	e004      	b.n	800a134 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <xTaskIncrementTick+0x170>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	4a0d      	ldr	r2, [pc, #52]	; (800a168 <xTaskIncrementTick+0x170>)
 800a132:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a134:	697b      	ldr	r3, [r7, #20]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20000dc0 	.word	0x20000dc0
 800a144:	20000d9c 	.word	0x20000d9c
 800a148:	20000d50 	.word	0x20000d50
 800a14c:	20000d54 	.word	0x20000d54
 800a150:	20000db0 	.word	0x20000db0
 800a154:	20000db8 	.word	0x20000db8
 800a158:	20000da0 	.word	0x20000da0
 800a15c:	200008c8 	.word	0x200008c8
 800a160:	200008c4 	.word	0x200008c4
 800a164:	20000dac 	.word	0x20000dac
 800a168:	20000da8 	.word	0x20000da8

0800a16c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a172:	4b28      	ldr	r3, [pc, #160]	; (800a214 <vTaskSwitchContext+0xa8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a17a:	4b27      	ldr	r3, [pc, #156]	; (800a218 <vTaskSwitchContext+0xac>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a180:	e041      	b.n	800a206 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a182:	4b25      	ldr	r3, [pc, #148]	; (800a218 <vTaskSwitchContext+0xac>)
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <vTaskSwitchContext+0xb0>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	e010      	b.n	800a1b2 <vTaskSwitchContext+0x46>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <vTaskSwitchContext+0x40>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	607b      	str	r3, [r7, #4]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <vTaskSwitchContext+0x3e>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	491b      	ldr	r1, [pc, #108]	; (800a220 <vTaskSwitchContext+0xb4>)
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0e4      	beq.n	800a190 <vTaskSwitchContext+0x24>
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4a13      	ldr	r2, [pc, #76]	; (800a220 <vTaskSwitchContext+0xb4>)
 800a1d2:	4413      	add	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	605a      	str	r2, [r3, #4]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d104      	bne.n	800a1f6 <vTaskSwitchContext+0x8a>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4a09      	ldr	r2, [pc, #36]	; (800a224 <vTaskSwitchContext+0xb8>)
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	4a06      	ldr	r2, [pc, #24]	; (800a21c <vTaskSwitchContext+0xb0>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6013      	str	r3, [r2, #0]
}
 800a206:	bf00      	nop
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000dc0 	.word	0x20000dc0
 800a218:	20000dac 	.word	0x20000dac
 800a21c:	20000da0 	.word	0x20000da0
 800a220:	200008c8 	.word	0x200008c8
 800a224:	200008c4 	.word	0x200008c4

0800a228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	60fb      	str	r3, [r7, #12]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <vTaskPlaceOnEventList+0x44>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3318      	adds	r3, #24
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7fe fdcd 	bl	8008df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a25c:	2101      	movs	r1, #1
 800a25e:	6838      	ldr	r0, [r7, #0]
 800a260:	f000 fa7c 	bl	800a75c <prvAddCurrentTaskToDelayedList>
}
 800a264:	bf00      	nop
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	200008c4 	.word	0x200008c4

0800a270 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	617b      	str	r3, [r7, #20]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3318      	adds	r3, #24
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f7fe fd84 	bl	8008dae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	68b8      	ldr	r0, [r7, #8]
 800a2b6:	f000 fa51 	bl	800a75c <prvAddCurrentTaskToDelayedList>
	}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200008c4 	.word	0x200008c4

0800a2c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	60fb      	str	r3, [r7, #12]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	3318      	adds	r3, #24
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fdb5 	bl	8008e68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2fe:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <xTaskRemoveFromEventList+0xb0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d11d      	bne.n	800a342 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fdac 	bl	8008e68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a314:	4b19      	ldr	r3, [pc, #100]	; (800a37c <xTaskRemoveFromEventList+0xb4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d903      	bls.n	800a324 <xTaskRemoveFromEventList+0x5c>
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	4a16      	ldr	r2, [pc, #88]	; (800a37c <xTaskRemoveFromEventList+0xb4>)
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4a13      	ldr	r2, [pc, #76]	; (800a380 <xTaskRemoveFromEventList+0xb8>)
 800a332:	441a      	add	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3304      	adds	r3, #4
 800a338:	4619      	mov	r1, r3
 800a33a:	4610      	mov	r0, r2
 800a33c:	f7fe fd37 	bl	8008dae <vListInsertEnd>
 800a340:	e005      	b.n	800a34e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3318      	adds	r3, #24
 800a346:	4619      	mov	r1, r3
 800a348:	480e      	ldr	r0, [pc, #56]	; (800a384 <xTaskRemoveFromEventList+0xbc>)
 800a34a:	f7fe fd30 	bl	8008dae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <xTaskRemoveFromEventList+0xc0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	429a      	cmp	r2, r3
 800a35a:	d905      	bls.n	800a368 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a360:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <xTaskRemoveFromEventList+0xc4>)
 800a362:	2201      	movs	r2, #1
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	e001      	b.n	800a36c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a36c:	697b      	ldr	r3, [r7, #20]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000dc0 	.word	0x20000dc0
 800a37c:	20000da0 	.word	0x20000da0
 800a380:	200008c8 	.word	0x200008c8
 800a384:	20000d58 	.word	0x20000d58
 800a388:	200008c4 	.word	0x200008c4
 800a38c:	20000dac 	.word	0x20000dac

0800a390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <vTaskInternalSetTimeOutState+0x24>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3a0:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <vTaskInternalSetTimeOutState+0x28>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	605a      	str	r2, [r3, #4]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	20000db0 	.word	0x20000db0
 800a3b8:	20000d9c 	.word	0x20000d9c

0800a3bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	613b      	str	r3, [r7, #16]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	60fb      	str	r3, [r7, #12]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3fe:	f000 fe79 	bl	800b0f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a402:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <xTaskCheckForTimeOut+0xbc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a41a:	d102      	bne.n	800a422 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	e023      	b.n	800a46a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b15      	ldr	r3, [pc, #84]	; (800a47c <xTaskCheckForTimeOut+0xc0>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d007      	beq.n	800a43e <xTaskCheckForTimeOut+0x82>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	429a      	cmp	r2, r3
 800a436:	d302      	bcc.n	800a43e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a438:	2301      	movs	r3, #1
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	e015      	b.n	800a46a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	429a      	cmp	r2, r3
 800a446:	d20b      	bcs.n	800a460 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff ff9b 	bl	800a390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	e004      	b.n	800a46a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a466:	2301      	movs	r3, #1
 800a468:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a46a:	f000 fe73 	bl	800b154 <vPortExitCritical>

	return xReturn;
 800a46e:	69fb      	ldr	r3, [r7, #28]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20000d9c 	.word	0x20000d9c
 800a47c:	20000db0 	.word	0x20000db0

0800a480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a484:	4b03      	ldr	r3, [pc, #12]	; (800a494 <vTaskMissedYield+0x14>)
 800a486:	2201      	movs	r2, #1
 800a488:	601a      	str	r2, [r3, #0]
}
 800a48a:	bf00      	nop
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	20000dac 	.word	0x20000dac

0800a498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4a0:	f000 f852 	bl	800a548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4a4:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <prvIdleTask+0x28>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d9f9      	bls.n	800a4a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <prvIdleTask+0x2c>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4bc:	e7f0      	b.n	800a4a0 <prvIdleTask+0x8>
 800a4be:	bf00      	nop
 800a4c0:	200008c8 	.word	0x200008c8
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	607b      	str	r3, [r7, #4]
 800a4d2:	e00c      	b.n	800a4ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4a12      	ldr	r2, [pc, #72]	; (800a528 <prvInitialiseTaskLists+0x60>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fc36 	bl	8008d54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	607b      	str	r3, [r7, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b37      	cmp	r3, #55	; 0x37
 800a4f2:	d9ef      	bls.n	800a4d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4f4:	480d      	ldr	r0, [pc, #52]	; (800a52c <prvInitialiseTaskLists+0x64>)
 800a4f6:	f7fe fc2d 	bl	8008d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4fa:	480d      	ldr	r0, [pc, #52]	; (800a530 <prvInitialiseTaskLists+0x68>)
 800a4fc:	f7fe fc2a 	bl	8008d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a500:	480c      	ldr	r0, [pc, #48]	; (800a534 <prvInitialiseTaskLists+0x6c>)
 800a502:	f7fe fc27 	bl	8008d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a506:	480c      	ldr	r0, [pc, #48]	; (800a538 <prvInitialiseTaskLists+0x70>)
 800a508:	f7fe fc24 	bl	8008d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a50c:	480b      	ldr	r0, [pc, #44]	; (800a53c <prvInitialiseTaskLists+0x74>)
 800a50e:	f7fe fc21 	bl	8008d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <prvInitialiseTaskLists+0x78>)
 800a514:	4a05      	ldr	r2, [pc, #20]	; (800a52c <prvInitialiseTaskLists+0x64>)
 800a516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <prvInitialiseTaskLists+0x7c>)
 800a51a:	4a05      	ldr	r2, [pc, #20]	; (800a530 <prvInitialiseTaskLists+0x68>)
 800a51c:	601a      	str	r2, [r3, #0]
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	200008c8 	.word	0x200008c8
 800a52c:	20000d28 	.word	0x20000d28
 800a530:	20000d3c 	.word	0x20000d3c
 800a534:	20000d58 	.word	0x20000d58
 800a538:	20000d6c 	.word	0x20000d6c
 800a53c:	20000d84 	.word	0x20000d84
 800a540:	20000d50 	.word	0x20000d50
 800a544:	20000d54 	.word	0x20000d54

0800a548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a54e:	e019      	b.n	800a584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a550:	f000 fdd0 	bl	800b0f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a554:	4b10      	ldr	r3, [pc, #64]	; (800a598 <prvCheckTasksWaitingTermination+0x50>)
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fc81 	bl	8008e68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a566:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <prvCheckTasksWaitingTermination+0x54>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	4a0b      	ldr	r2, [pc, #44]	; (800a59c <prvCheckTasksWaitingTermination+0x54>)
 800a56e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <prvCheckTasksWaitingTermination+0x58>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3b01      	subs	r3, #1
 800a576:	4a0a      	ldr	r2, [pc, #40]	; (800a5a0 <prvCheckTasksWaitingTermination+0x58>)
 800a578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a57a:	f000 fdeb 	bl	800b154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f810 	bl	800a5a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <prvCheckTasksWaitingTermination+0x58>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e1      	bne.n	800a550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20000d6c 	.word	0x20000d6c
 800a59c:	20000d98 	.word	0x20000d98
 800a5a0:	20000d80 	.word	0x20000d80

0800a5a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d108      	bne.n	800a5c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 ff88 	bl	800b4d0 <vPortFree>
				vPortFree( pxTCB );
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 ff85 	bl	800b4d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5c6:	e018      	b.n	800a5fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d103      	bne.n	800a5da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 ff7c 	bl	800b4d0 <vPortFree>
	}
 800a5d8:	e00f      	b.n	800a5fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d00a      	beq.n	800a5fa <prvDeleteTCB+0x56>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	60fb      	str	r3, [r7, #12]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <prvDeleteTCB+0x54>
	}
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a60a:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <prvResetNextTaskUnblockTime+0x38>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d104      	bne.n	800a61e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a614:	4b0a      	ldr	r3, [pc, #40]	; (800a640 <prvResetNextTaskUnblockTime+0x3c>)
 800a616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a61c:	e008      	b.n	800a630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <prvResetNextTaskUnblockTime+0x38>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4a04      	ldr	r2, [pc, #16]	; (800a640 <prvResetNextTaskUnblockTime+0x3c>)
 800a62e:	6013      	str	r3, [r2, #0]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	20000d50 	.word	0x20000d50
 800a640:	20000db8 	.word	0x20000db8

0800a644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <xTaskGetSchedulerState+0x34>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a652:	2301      	movs	r3, #1
 800a654:	607b      	str	r3, [r7, #4]
 800a656:	e008      	b.n	800a66a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a658:	4b08      	ldr	r3, [pc, #32]	; (800a67c <xTaskGetSchedulerState+0x38>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d102      	bne.n	800a666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a660:	2302      	movs	r3, #2
 800a662:	607b      	str	r3, [r7, #4]
 800a664:	e001      	b.n	800a66a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a66a:	687b      	ldr	r3, [r7, #4]
	}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20000da4 	.word	0x20000da4
 800a67c:	20000dc0 	.word	0x20000dc0

0800a680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d056      	beq.n	800a744 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a696:	4b2e      	ldr	r3, [pc, #184]	; (800a750 <xTaskPriorityDisinherit+0xd0>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d00a      	beq.n	800a6b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	60fb      	str	r3, [r7, #12]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	60bb      	str	r3, [r7, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d02c      	beq.n	800a744 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d128      	bne.n	800a744 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fbb6 	bl	8008e68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4b0f      	ldr	r3, [pc, #60]	; (800a754 <xTaskPriorityDisinherit+0xd4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d903      	bls.n	800a724 <xTaskPriorityDisinherit+0xa4>
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	4a0c      	ldr	r2, [pc, #48]	; (800a754 <xTaskPriorityDisinherit+0xd4>)
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a09      	ldr	r2, [pc, #36]	; (800a758 <xTaskPriorityDisinherit+0xd8>)
 800a732:	441a      	add	r2, r3
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe fb37 	bl	8008dae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a740:	2301      	movs	r3, #1
 800a742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a744:	697b      	ldr	r3, [r7, #20]
	}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	200008c4 	.word	0x200008c4
 800a754:	20000da0 	.word	0x20000da0
 800a758:	200008c8 	.word	0x200008c8

0800a75c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a766:	4b21      	ldr	r3, [pc, #132]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x90>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a76c:	4b20      	ldr	r3, [pc, #128]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3304      	adds	r3, #4
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fb78 	bl	8008e68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77e:	d10a      	bne.n	800a796 <prvAddCurrentTaskToDelayedList+0x3a>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d007      	beq.n	800a796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a786:	4b1a      	ldr	r3, [pc, #104]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4819      	ldr	r0, [pc, #100]	; (800a7f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a790:	f7fe fb0d 	bl	8008dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a794:	e026      	b.n	800a7e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4413      	add	r3, r2
 800a79c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a79e:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d209      	bcs.n	800a7c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ae:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fb1b 	bl	8008df6 <vListInsert>
}
 800a7c0:	e010      	b.n	800a7e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7c2:	4b0e      	ldr	r3, [pc, #56]	; (800a7fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	f7fe fb11 	bl	8008df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7d4:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d202      	bcs.n	800a7e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7de:	4a08      	ldr	r2, [pc, #32]	; (800a800 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	6013      	str	r3, [r2, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20000d9c 	.word	0x20000d9c
 800a7f0:	200008c4 	.word	0x200008c4
 800a7f4:	20000d84 	.word	0x20000d84
 800a7f8:	20000d54 	.word	0x20000d54
 800a7fc:	20000d50 	.word	0x20000d50
 800a800:	20000db8 	.word	0x20000db8

0800a804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	; 0x28
 800a808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a80e:	f000 fb07 	bl	800ae20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <xTimerCreateTimerTask+0x80>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d021      	beq.n	800a85e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a822:	1d3a      	adds	r2, r7, #4
 800a824:	f107 0108 	add.w	r1, r7, #8
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fa77 	bl	8008d20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	2302      	movs	r3, #2
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	460a      	mov	r2, r1
 800a844:	4910      	ldr	r1, [pc, #64]	; (800a888 <xTimerCreateTimerTask+0x84>)
 800a846:	4811      	ldr	r0, [pc, #68]	; (800a88c <xTimerCreateTimerTask+0x88>)
 800a848:	f7ff f8de 	bl	8009a08 <xTaskCreateStatic>
 800a84c:	4603      	mov	r3, r0
 800a84e:	4a10      	ldr	r2, [pc, #64]	; (800a890 <xTimerCreateTimerTask+0x8c>)
 800a850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a852:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <xTimerCreateTimerTask+0x8c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a85a:	2301      	movs	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	613b      	str	r3, [r7, #16]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a87a:	697b      	ldr	r3, [r7, #20]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20000df4 	.word	0x20000df4
 800a888:	0800c004 	.word	0x0800c004
 800a88c:	0800a9c9 	.word	0x0800a9c9
 800a890:	20000df8 	.word	0x20000df8

0800a894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	623b      	str	r3, [r7, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8c2:	4b1a      	ldr	r3, [pc, #104]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d02a      	beq.n	800a920 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	dc18      	bgt.n	800a90e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8dc:	f7ff feb2 	bl	800a644 <xTaskGetSchedulerState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d109      	bne.n	800a8fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	f107 0110 	add.w	r1, r7, #16
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f2:	f7fe fc21 	bl	8009138 <xQueueGenericSend>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f8:	e012      	b.n	800a920 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	f107 0110 	add.w	r1, r7, #16
 800a902:	2300      	movs	r3, #0
 800a904:	2200      	movs	r2, #0
 800a906:	f7fe fc17 	bl	8009138 <xQueueGenericSend>
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
 800a90c:	e008      	b.n	800a920 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <xTimerGenericCommand+0x98>)
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	f107 0110 	add.w	r1, r7, #16
 800a916:	2300      	movs	r3, #0
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	f7fe fd0b 	bl	8009334 <xQueueGenericSendFromISR>
 800a91e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a922:	4618      	mov	r0, r3
 800a924:	3728      	adds	r7, #40	; 0x28
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000df4 	.word	0x20000df4

0800a930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93a:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <prvProcessExpiredTimer+0x94>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	3304      	adds	r3, #4
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fa8d 	bl	8008e68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d022      	beq.n	800a9a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	18d1      	adds	r1, r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f000 f8d1 	bl	800ab10 <prvInsertTimerInActiveList>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01f      	beq.n	800a9b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a974:	2300      	movs	r3, #0
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	2300      	movs	r3, #0
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	2100      	movs	r1, #0
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff88 	bl	800a894 <xTimerGenericCommand>
 800a984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d113      	bne.n	800a9b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	60fb      	str	r3, [r7, #12]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a8:	f023 0301 	bic.w	r3, r3, #1
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	6978      	ldr	r0, [r7, #20]
 800a9ba:	4798      	blx	r3
}
 800a9bc:	bf00      	nop
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000dec 	.word	0x20000dec

0800a9c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 f857 	bl	800aa88 <prvGetNextExpireTime>
 800a9da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f803 	bl	800a9ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9e6:	f000 f8d5 	bl	800ab94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9ea:	e7f1      	b.n	800a9d0 <prvTimerTask+0x8>

0800a9ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9f6:	f7ff fa43 	bl	8009e80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f866 	bl	800aad0 <prvSampleTimeNow>
 800aa04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d130      	bne.n	800aa6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <prvProcessTimerOrBlockTask+0x3c>
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d806      	bhi.n	800aa28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa1a:	f7ff fa3f 	bl	8009e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff ff85 	bl	800a930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa26:	e024      	b.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <prvProcessTimerOrBlockTask+0x90>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <prvProcessTimerOrBlockTask+0x50>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e000      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x52>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <prvProcessTimerOrBlockTask+0x94>)
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7fe ffa7 	bl	80099a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa52:	f7ff fa23 	bl	8009e9c <xTaskResumeAll>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <prvProcessTimerOrBlockTask+0x98>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
}
 800aa6c:	e001      	b.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa6e:	f7ff fa15 	bl	8009e9c <xTaskResumeAll>
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000df0 	.word	0x20000df0
 800aa80:	20000df4 	.word	0x20000df4
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa90:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <prvGetNextExpireTime+0x44>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <prvGetNextExpireTime+0x16>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	e000      	b.n	800aaa0 <prvGetNextExpireTime+0x18>
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d105      	bne.n	800aab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaac:	4b07      	ldr	r3, [pc, #28]	; (800aacc <prvGetNextExpireTime+0x44>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e001      	b.n	800aabc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aabc:	68fb      	ldr	r3, [r7, #12]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000dec 	.word	0x20000dec

0800aad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aad8:	f7ff fa7e 	bl	8009fd8 <xTaskGetTickCount>
 800aadc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <prvSampleTimeNow+0x3c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d205      	bcs.n	800aaf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aae8:	f000 f936 	bl	800ad58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aafa:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <prvSampleTimeNow+0x3c>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab00:	68fb      	ldr	r3, [r7, #12]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000dfc 	.word	0x20000dfc

0800ab10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d812      	bhi.n	800ab5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	e01b      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab4a:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <prvInsertTimerInActiveList+0x7c>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7fe f94e 	bl	8008df6 <vListInsert>
 800ab5a:	e012      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d206      	bcs.n	800ab72 <prvInsertTimerInActiveList+0x62>
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d302      	bcc.n	800ab72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e007      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <prvInsertTimerInActiveList+0x80>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7fe f93a 	bl	8008df6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab82:	697b      	ldr	r3, [r7, #20]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000df0 	.word	0x20000df0
 800ab90:	20000dec 	.word	0x20000dec

0800ab94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08e      	sub	sp, #56	; 0x38
 800ab98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab9a:	e0ca      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	da18      	bge.n	800abd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aba2:	1d3b      	adds	r3, r7, #4
 800aba4:	3304      	adds	r3, #4
 800aba6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	61fb      	str	r3, [r7, #28]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abca:	6850      	ldr	r0, [r2, #4]
 800abcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abce:	6892      	ldr	r2, [r2, #8]
 800abd0:	4611      	mov	r1, r2
 800abd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f2c0 80ab 	blt.w	800ad32 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe f93b 	bl	8008e68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abf2:	463b      	mov	r3, r7
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7ff ff6b 	bl	800aad0 <prvSampleTimeNow>
 800abfa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b09      	cmp	r3, #9
 800ac00:	f200 8096 	bhi.w	800ad30 <prvProcessReceivedCommands+0x19c>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <prvProcessReceivedCommands+0x78>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac35 	.word	0x0800ac35
 800ac18:	0800aca9 	.word	0x0800aca9
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800ad07 	.word	0x0800ad07
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac35 	.word	0x0800ac35
 800ac2c:	0800aca9 	.word	0x0800aca9
 800ac30:	0800acbd 	.word	0x0800acbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	18d1      	adds	r1, r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac54:	f7ff ff5c 	bl	800ab10 <prvInsertTimerInActiveList>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d069      	beq.n	800ad32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d05e      	beq.n	800ad32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	441a      	add	r2, r3
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	2100      	movs	r1, #0
 800ac84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac86:	f7ff fe05 	bl	800a894 <xTimerGenericCommand>
 800ac8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d14f      	bne.n	800ad32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	61bb      	str	r3, [r7, #24]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acae:	f023 0301 	bic.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800acba:	e03a      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	617b      	str	r3, [r7, #20]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	18d1      	adds	r1, r2, r3
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad00:	f7ff ff06 	bl	800ab10 <prvInsertTimerInActiveList>
					break;
 800ad04:	e015      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d103      	bne.n	800ad1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad16:	f000 fbdb 	bl	800b4d0 <vPortFree>
 800ad1a:	e00a      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad22:	f023 0301 	bic.w	r3, r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad2e:	e000      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ad30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad32:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <prvProcessReceivedCommands+0x1c0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	1d39      	adds	r1, r7, #4
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fb96 	bl	800946c <xQueueReceive>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f47f af2a 	bne.w	800ab9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	3730      	adds	r7, #48	; 0x30
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000df4 	.word	0x20000df4

0800ad58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad5e:	e048      	b.n	800adf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6a:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3304      	adds	r3, #4
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe f875 	bl	8008e68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d02e      	beq.n	800adf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d90e      	bls.n	800adc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adb2:	4b19      	ldr	r3, [pc, #100]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3304      	adds	r3, #4
 800adba:	4619      	mov	r1, r3
 800adbc:	4610      	mov	r0, r2
 800adbe:	f7fe f81a 	bl	8008df6 <vListInsert>
 800adc2:	e016      	b.n	800adf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adc4:	2300      	movs	r3, #0
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	2100      	movs	r1, #0
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7ff fd60 	bl	800a894 <xTimerGenericCommand>
 800add4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	603b      	str	r3, [r7, #0]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1b1      	bne.n	800ad60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae02:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <prvSwitchTimerLists+0xc4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a04      	ldr	r2, [pc, #16]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ae08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae0a:	4a04      	ldr	r2, [pc, #16]	; (800ae1c <prvSwitchTimerLists+0xc4>)
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	20000dec 	.word	0x20000dec
 800ae1c:	20000df0 	.word	0x20000df0

0800ae20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae26:	f000 f965 	bl	800b0f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d120      	bne.n	800ae74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae32:	4814      	ldr	r0, [pc, #80]	; (800ae84 <prvCheckForValidListAndQueue+0x64>)
 800ae34:	f7fd ff8e 	bl	8008d54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae38:	4813      	ldr	r0, [pc, #76]	; (800ae88 <prvCheckForValidListAndQueue+0x68>)
 800ae3a:	f7fd ff8b 	bl	8008d54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <prvCheckForValidListAndQueue+0x6c>)
 800ae40:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <prvCheckForValidListAndQueue+0x64>)
 800ae42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <prvCheckForValidListAndQueue+0x70>)
 800ae46:	4a10      	ldr	r2, [pc, #64]	; (800ae88 <prvCheckForValidListAndQueue+0x68>)
 800ae48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <prvCheckForValidListAndQueue+0x74>)
 800ae50:	4a11      	ldr	r2, [pc, #68]	; (800ae98 <prvCheckForValidListAndQueue+0x78>)
 800ae52:	2110      	movs	r1, #16
 800ae54:	200a      	movs	r0, #10
 800ae56:	f7fe f899 	bl	8008f8c <xQueueGenericCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4a08      	ldr	r2, [pc, #32]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	490b      	ldr	r1, [pc, #44]	; (800ae9c <prvCheckForValidListAndQueue+0x7c>)
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fd6c 	bl	800994c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae74:	f000 f96e 	bl	800b154 <vPortExitCritical>
}
 800ae78:	bf00      	nop
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000df4 	.word	0x20000df4
 800ae84:	20000dc4 	.word	0x20000dc4
 800ae88:	20000dd8 	.word	0x20000dd8
 800ae8c:	20000dec 	.word	0x20000dec
 800ae90:	20000df0 	.word	0x20000df0
 800ae94:	20000ea0 	.word	0x20000ea0
 800ae98:	20000e00 	.word	0x20000e00
 800ae9c:	0800c00c 	.word	0x0800c00c

0800aea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3b04      	subs	r3, #4
 800aeb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aeb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3b04      	subs	r3, #4
 800aebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f023 0201 	bic.w	r2, r3, #1
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3b04      	subs	r3, #4
 800aece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aed0:	4a0c      	ldr	r2, [pc, #48]	; (800af04 <pxPortInitialiseStack+0x64>)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3b14      	subs	r3, #20
 800aeda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3b04      	subs	r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f06f 0202 	mvn.w	r2, #2
 800aeee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3b20      	subs	r3, #32
 800aef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	0800af09 	.word	0x0800af09

0800af08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af12:	4b12      	ldr	r3, [pc, #72]	; (800af5c <prvTaskExitError+0x54>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af1a:	d00a      	beq.n	800af32 <prvTaskExitError+0x2a>
	__asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	60fb      	str	r3, [r7, #12]
}
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <prvTaskExitError+0x28>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60bb      	str	r3, [r7, #8]
}
 800af44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af46:	bf00      	nop
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0fc      	beq.n	800af48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	2000002c 	.word	0x2000002c

0800af60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <pxCurrentTCBConst2>)
 800af62:	6819      	ldr	r1, [r3, #0]
 800af64:	6808      	ldr	r0, [r1, #0]
 800af66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	f380 8809 	msr	PSP, r0
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f04f 0000 	mov.w	r0, #0
 800af76:	f380 8811 	msr	BASEPRI, r0
 800af7a:	4770      	bx	lr
 800af7c:	f3af 8000 	nop.w

0800af80 <pxCurrentTCBConst2>:
 800af80:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af84:	bf00      	nop
 800af86:	bf00      	nop

0800af88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af88:	4808      	ldr	r0, [pc, #32]	; (800afac <prvPortStartFirstTask+0x24>)
 800af8a:	6800      	ldr	r0, [r0, #0]
 800af8c:	6800      	ldr	r0, [r0, #0]
 800af8e:	f380 8808 	msr	MSP, r0
 800af92:	f04f 0000 	mov.w	r0, #0
 800af96:	f380 8814 	msr	CONTROL, r0
 800af9a:	b662      	cpsie	i
 800af9c:	b661      	cpsie	f
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	df00      	svc	0
 800afa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afaa:	bf00      	nop
 800afac:	e000ed08 	.word	0xe000ed08

0800afb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afb6:	4b46      	ldr	r3, [pc, #280]	; (800b0d0 <xPortStartScheduler+0x120>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a46      	ldr	r2, [pc, #280]	; (800b0d4 <xPortStartScheduler+0x124>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d10a      	bne.n	800afd6 <xPortStartScheduler+0x26>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afd6:	4b3e      	ldr	r3, [pc, #248]	; (800b0d0 <xPortStartScheduler+0x120>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a3f      	ldr	r2, [pc, #252]	; (800b0d8 <xPortStartScheduler+0x128>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d10a      	bne.n	800aff6 <xPortStartScheduler+0x46>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aff6:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <xPortStartScheduler+0x12c>)
 800aff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	22ff      	movs	r2, #255	; 0xff
 800b006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	4b31      	ldr	r3, [pc, #196]	; (800b0e0 <xPortStartScheduler+0x130>)
 800b01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b01e:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b024:	e009      	b.n	800b03a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b026:	4b2f      	ldr	r3, [pc, #188]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	4a2d      	ldr	r2, [pc, #180]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b030:	78fb      	ldrb	r3, [r7, #3]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b042:	2b80      	cmp	r3, #128	; 0x80
 800b044:	d0ef      	beq.n	800b026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b046:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f1c3 0307 	rsb	r3, r3, #7
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d00a      	beq.n	800b068 <xPortStartScheduler+0xb8>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b068:	4b1e      	ldr	r3, [pc, #120]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b072:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b07a:	4a1a      	ldr	r2, [pc, #104]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b07c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b086:	4b18      	ldr	r3, [pc, #96]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a14      	ldr	r2, [pc, #80]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b09c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b09e:	f000 f8dd 	bl	800b25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0a2:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <xPortStartScheduler+0x13c>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0a8:	f000 f8fc 	bl	800b2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <xPortStartScheduler+0x140>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a0f      	ldr	r2, [pc, #60]	; (800b0f0 <xPortStartScheduler+0x140>)
 800b0b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0b8:	f7ff ff66 	bl	800af88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0bc:	f7ff f856 	bl	800a16c <vTaskSwitchContext>
	prvTaskExitError();
 800b0c0:	f7ff ff22 	bl	800af08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	e000ed00 	.word	0xe000ed00
 800b0d4:	410fc271 	.word	0x410fc271
 800b0d8:	410fc270 	.word	0x410fc270
 800b0dc:	e000e400 	.word	0xe000e400
 800b0e0:	20000ef0 	.word	0x20000ef0
 800b0e4:	20000ef4 	.word	0x20000ef4
 800b0e8:	e000ed20 	.word	0xe000ed20
 800b0ec:	2000002c 	.word	0x2000002c
 800b0f0:	e000ef34 	.word	0xe000ef34

0800b0f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	607b      	str	r3, [r7, #4]
}
 800b10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b10e:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <vPortEnterCritical+0x58>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3301      	adds	r3, #1
 800b114:	4a0d      	ldr	r2, [pc, #52]	; (800b14c <vPortEnterCritical+0x58>)
 800b116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b118:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <vPortEnterCritical+0x58>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d10f      	bne.n	800b140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <vPortEnterCritical+0x5c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <vPortEnterCritical+0x4c>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	603b      	str	r3, [r7, #0]
}
 800b13c:	bf00      	nop
 800b13e:	e7fe      	b.n	800b13e <vPortEnterCritical+0x4a>
	}
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	2000002c 	.word	0x2000002c
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b15a:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <vPortExitCritical+0x50>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <vPortExitCritical+0x24>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	607b      	str	r3, [r7, #4]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <vPortExitCritical+0x50>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	4a09      	ldr	r2, [pc, #36]	; (800b1a4 <vPortExitCritical+0x50>)
 800b180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b182:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <vPortExitCritical+0x50>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d105      	bne.n	800b196 <vPortExitCritical+0x42>
 800b18a:	2300      	movs	r3, #0
 800b18c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	f383 8811 	msr	BASEPRI, r3
}
 800b194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	2000002c 	.word	0x2000002c
	...

0800b1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1b0:	f3ef 8009 	mrs	r0, PSP
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <pxCurrentTCBConst>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	f01e 0f10 	tst.w	lr, #16
 800b1c0:	bf08      	it	eq
 800b1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	6010      	str	r0, [r2, #0]
 800b1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1d4:	f380 8811 	msr	BASEPRI, r0
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f7fe ffc4 	bl	800a16c <vTaskSwitchContext>
 800b1e4:	f04f 0000 	mov.w	r0, #0
 800b1e8:	f380 8811 	msr	BASEPRI, r0
 800b1ec:	bc09      	pop	{r0, r3}
 800b1ee:	6819      	ldr	r1, [r3, #0]
 800b1f0:	6808      	ldr	r0, [r1, #0]
 800b1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f6:	f01e 0f10 	tst.w	lr, #16
 800b1fa:	bf08      	it	eq
 800b1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b200:	f380 8809 	msr	PSP, r0
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	f3af 8000 	nop.w

0800b210 <pxCurrentTCBConst>:
 800b210:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop

0800b218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
}
 800b230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b232:	f7fe fee1 	bl	8009ff8 <xTaskIncrementTick>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <xPortSysTickHandler+0x40>)
 800b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	f383 8811 	msr	BASEPRI, r3
}
 800b24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b260:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <vPortSetupTimerInterrupt+0x34>)
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b266:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <vPortSetupTimerInterrupt+0x38>)
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b26c:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <vPortSetupTimerInterrupt+0x3c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <vPortSetupTimerInterrupt+0x40>)
 800b272:	fba2 2303 	umull	r2, r3, r2, r3
 800b276:	099b      	lsrs	r3, r3, #6
 800b278:	4a09      	ldr	r2, [pc, #36]	; (800b2a0 <vPortSetupTimerInterrupt+0x44>)
 800b27a:	3b01      	subs	r3, #1
 800b27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b27e:	4b04      	ldr	r3, [pc, #16]	; (800b290 <vPortSetupTimerInterrupt+0x34>)
 800b280:	2207      	movs	r2, #7
 800b282:	601a      	str	r2, [r3, #0]
}
 800b284:	bf00      	nop
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	e000e010 	.word	0xe000e010
 800b294:	e000e018 	.word	0xe000e018
 800b298:	20000000 	.word	0x20000000
 800b29c:	10624dd3 	.word	0x10624dd3
 800b2a0:	e000e014 	.word	0xe000e014

0800b2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2b4 <vPortEnableVFP+0x10>
 800b2a8:	6801      	ldr	r1, [r0, #0]
 800b2aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2ae:	6001      	str	r1, [r0, #0]
 800b2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2b2:	bf00      	nop
 800b2b4:	e000ed88 	.word	0xe000ed88

0800b2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2be:	f3ef 8305 	mrs	r3, IPSR
 800b2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d914      	bls.n	800b2f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <vPortValidateInterruptPriority+0x70>)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2d4:	4b15      	ldr	r3, [pc, #84]	; (800b32c <vPortValidateInterruptPriority+0x74>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	7afa      	ldrb	r2, [r7, #11]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d20a      	bcs.n	800b2f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2f4:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <vPortValidateInterruptPriority+0x78>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <vPortValidateInterruptPriority+0x7c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d90a      	bls.n	800b31a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	603b      	str	r3, [r7, #0]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <vPortValidateInterruptPriority+0x60>
	}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	e000e3f0 	.word	0xe000e3f0
 800b32c:	20000ef0 	.word	0x20000ef0
 800b330:	e000ed0c 	.word	0xe000ed0c
 800b334:	20000ef4 	.word	0x20000ef4

0800b338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08a      	sub	sp, #40	; 0x28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b340:	2300      	movs	r3, #0
 800b342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b344:	f7fe fd9c 	bl	8009e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b348:	4b5b      	ldr	r3, [pc, #364]	; (800b4b8 <pvPortMalloc+0x180>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b350:	f000 f920 	bl	800b594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b354:	4b59      	ldr	r3, [pc, #356]	; (800b4bc <pvPortMalloc+0x184>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4013      	ands	r3, r2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f040 8093 	bne.w	800b488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01d      	beq.n	800b3a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b368:	2208      	movs	r2, #8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4413      	add	r3, r2
 800b36e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f003 0307 	and.w	r3, r3, #7
 800b376:	2b00      	cmp	r3, #0
 800b378:	d014      	beq.n	800b3a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	3308      	adds	r3, #8
 800b382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	617b      	str	r3, [r7, #20]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d06e      	beq.n	800b488 <pvPortMalloc+0x150>
 800b3aa:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <pvPortMalloc+0x188>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d869      	bhi.n	800b488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3b4:	4b43      	ldr	r3, [pc, #268]	; (800b4c4 <pvPortMalloc+0x18c>)
 800b3b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3b8:	4b42      	ldr	r3, [pc, #264]	; (800b4c4 <pvPortMalloc+0x18c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3be:	e004      	b.n	800b3ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d903      	bls.n	800b3dc <pvPortMalloc+0xa4>
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f1      	bne.n	800b3c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3dc:	4b36      	ldr	r3, [pc, #216]	; (800b4b8 <pvPortMalloc+0x180>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d050      	beq.n	800b488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2208      	movs	r2, #8
 800b3ec:	4413      	add	r3, r2
 800b3ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	2308      	movs	r3, #8
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	d91f      	bls.n	800b448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4413      	add	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <pvPortMalloc+0xf8>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	613b      	str	r3, [r7, #16]
}
 800b42c:	bf00      	nop
 800b42e:	e7fe      	b.n	800b42e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b442:	69b8      	ldr	r0, [r7, #24]
 800b444:	f000 f908 	bl	800b658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b448:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <pvPortMalloc+0x188>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <pvPortMalloc+0x188>)
 800b454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b456:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <pvPortMalloc+0x188>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <pvPortMalloc+0x190>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d203      	bcs.n	800b46a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b462:	4b17      	ldr	r3, [pc, #92]	; (800b4c0 <pvPortMalloc+0x188>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <pvPortMalloc+0x190>)
 800b468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <pvPortMalloc+0x184>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	431a      	orrs	r2, r3
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <pvPortMalloc+0x194>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3301      	adds	r3, #1
 800b484:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <pvPortMalloc+0x194>)
 800b486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b488:	f7fe fd08 	bl	8009e9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f003 0307 	and.w	r3, r3, #7
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <pvPortMalloc+0x174>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60fb      	str	r3, [r7, #12]
}
 800b4a8:	bf00      	nop
 800b4aa:	e7fe      	b.n	800b4aa <pvPortMalloc+0x172>
	return pvReturn;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3728      	adds	r7, #40	; 0x28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20004b00 	.word	0x20004b00
 800b4bc:	20004b14 	.word	0x20004b14
 800b4c0:	20004b04 	.word	0x20004b04
 800b4c4:	20004af8 	.word	0x20004af8
 800b4c8:	20004b08 	.word	0x20004b08
 800b4cc:	20004b0c 	.word	0x20004b0c

0800b4d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d04d      	beq.n	800b57e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	4b24      	ldr	r3, [pc, #144]	; (800b588 <vPortFree+0xb8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10a      	bne.n	800b514 <vPortFree+0x44>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60fb      	str	r3, [r7, #12]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <vPortFree+0x62>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60bb      	str	r3, [r7, #8]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <vPortFree+0xb8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01e      	beq.n	800b57e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d11a      	bne.n	800b57e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <vPortFree+0xb8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	43db      	mvns	r3, r3
 800b552:	401a      	ands	r2, r3
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b558:	f7fe fc92 	bl	8009e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <vPortFree+0xbc>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4413      	add	r3, r2
 800b566:	4a09      	ldr	r2, [pc, #36]	; (800b58c <vPortFree+0xbc>)
 800b568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b56a:	6938      	ldr	r0, [r7, #16]
 800b56c:	f000 f874 	bl	800b658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <vPortFree+0xc0>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	4a06      	ldr	r2, [pc, #24]	; (800b590 <vPortFree+0xc0>)
 800b578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b57a:	f7fe fc8f 	bl	8009e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b57e:	bf00      	nop
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20004b14 	.word	0x20004b14
 800b58c:	20004b04 	.word	0x20004b04
 800b590:	20004b10 	.word	0x20004b10

0800b594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b59a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5a0:	4b27      	ldr	r3, [pc, #156]	; (800b640 <prvHeapInit+0xac>)
 800b5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	4a1f      	ldr	r2, [pc, #124]	; (800b640 <prvHeapInit+0xac>)
 800b5c4:	4413      	add	r3, r2
 800b5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <prvHeapInit+0xb0>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <prvHeapInit+0xb0>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4a15      	ldr	r2, [pc, #84]	; (800b648 <prvHeapInit+0xb4>)
 800b5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <prvHeapInit+0xb4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5fe:	4b12      	ldr	r3, [pc, #72]	; (800b648 <prvHeapInit+0xb4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b614:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <prvHeapInit+0xb4>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4a0a      	ldr	r2, [pc, #40]	; (800b64c <prvHeapInit+0xb8>)
 800b622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	4a09      	ldr	r2, [pc, #36]	; (800b650 <prvHeapInit+0xbc>)
 800b62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <prvHeapInit+0xc0>)
 800b62e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b632:	601a      	str	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20000ef8 	.word	0x20000ef8
 800b644:	20004af8 	.word	0x20004af8
 800b648:	20004b00 	.word	0x20004b00
 800b64c:	20004b08 	.word	0x20004b08
 800b650:	20004b04 	.word	0x20004b04
 800b654:	20004b14 	.word	0x20004b14

0800b658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b660:	4b28      	ldr	r3, [pc, #160]	; (800b704 <prvInsertBlockIntoFreeList+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e002      	b.n	800b66c <prvInsertBlockIntoFreeList+0x14>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d8f7      	bhi.n	800b666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	4413      	add	r3, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d108      	bne.n	800b69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	441a      	add	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d118      	bne.n	800b6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b15      	ldr	r3, [pc, #84]	; (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d00d      	beq.n	800b6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	441a      	add	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e008      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	e003      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d002      	beq.n	800b6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20004af8 	.word	0x20004af8
 800b708:	20004b00 	.word	0x20004b00

0800b70c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b710:	2201      	movs	r2, #1
 800b712:	490e      	ldr	r1, [pc, #56]	; (800b74c <MX_USB_HOST_Init+0x40>)
 800b714:	480e      	ldr	r0, [pc, #56]	; (800b750 <MX_USB_HOST_Init+0x44>)
 800b716:	f7fb f96b 	bl	80069f0 <USBH_Init>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b720:	f7f5 f974 	bl	8000a0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b724:	490b      	ldr	r1, [pc, #44]	; (800b754 <MX_USB_HOST_Init+0x48>)
 800b726:	480a      	ldr	r0, [pc, #40]	; (800b750 <MX_USB_HOST_Init+0x44>)
 800b728:	f7fb fa31 	bl	8006b8e <USBH_RegisterClass>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b732:	f7f5 f96b 	bl	8000a0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b736:	4806      	ldr	r0, [pc, #24]	; (800b750 <MX_USB_HOST_Init+0x44>)
 800b738:	f7fb fab5 	bl	8006ca6 <USBH_Start>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b742:	f7f5 f963 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b746:	bf00      	nop
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800b759 	.word	0x0800b759
 800b750:	20004b18 	.word	0x20004b18
 800b754:	2000000c 	.word	0x2000000c

0800b758 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	3b01      	subs	r3, #1
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d819      	bhi.n	800b7a0 <USBH_UserProcess+0x48>
 800b76c:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <USBH_UserProcess+0x1c>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b7a1 	.word	0x0800b7a1
 800b778:	0800b791 	.word	0x0800b791
 800b77c:	0800b7a1 	.word	0x0800b7a1
 800b780:	0800b799 	.word	0x0800b799
 800b784:	0800b789 	.word	0x0800b789
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <USBH_UserProcess+0x58>)
 800b78a:	2203      	movs	r2, #3
 800b78c:	701a      	strb	r2, [r3, #0]
  break;
 800b78e:	e008      	b.n	800b7a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <USBH_UserProcess+0x58>)
 800b792:	2202      	movs	r2, #2
 800b794:	701a      	strb	r2, [r3, #0]
  break;
 800b796:	e004      	b.n	800b7a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <USBH_UserProcess+0x58>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	701a      	strb	r2, [r3, #0]
  break;
 800b79e:	e000      	b.n	800b7a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b7a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	20004efc 	.word	0x20004efc

0800b7b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	605a      	str	r2, [r3, #4]
 800b7c6:	609a      	str	r2, [r3, #8]
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d4:	d147      	bne.n	800b866 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	4b25      	ldr	r3, [pc, #148]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	4a24      	ldr	r2, [pc, #144]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b7e0:	f043 0301 	orr.w	r3, r3, #1
 800b7e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7e6:	4b22      	ldr	r3, [pc, #136]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b800:	f107 0314 	add.w	r3, r7, #20
 800b804:	4619      	mov	r1, r3
 800b806:	481b      	ldr	r0, [pc, #108]	; (800b874 <HAL_HCD_MspInit+0xc0>)
 800b808:	f7f5 fc8a 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b80c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b812:	2302      	movs	r3, #2
 800b814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b816:	2300      	movs	r3, #0
 800b818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b81a:	2300      	movs	r3, #0
 800b81c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b81e:	230a      	movs	r3, #10
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b822:	f107 0314 	add.w	r3, r7, #20
 800b826:	4619      	mov	r1, r3
 800b828:	4812      	ldr	r0, [pc, #72]	; (800b874 <HAL_HCD_MspInit+0xc0>)
 800b82a:	f7f5 fc79 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b82e:	4b10      	ldr	r3, [pc, #64]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	4a0f      	ldr	r2, [pc, #60]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	6353      	str	r3, [r2, #52]	; 0x34
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b842:	4a0b      	ldr	r2, [pc, #44]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b848:	6453      	str	r3, [r2, #68]	; 0x44
 800b84a:	4b09      	ldr	r3, [pc, #36]	; (800b870 <HAL_HCD_MspInit+0xbc>)
 800b84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b856:	2200      	movs	r2, #0
 800b858:	2105      	movs	r1, #5
 800b85a:	2043      	movs	r0, #67	; 0x43
 800b85c:	f7f5 fc29 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b860:	2043      	movs	r0, #67	; 0x43
 800b862:	f7f5 fc42 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b866:	bf00      	nop
 800b868:	3728      	adds	r7, #40	; 0x28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	40023800 	.word	0x40023800
 800b874:	40020000 	.word	0x40020000

0800b878 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b886:	4618      	mov	r0, r3
 800b888:	f7fb fec5 	bl	8007616 <USBH_LL_IncTimer>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fb ff09 	bl	80076ba <USBH_LL_Connect>
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fb ff1e 	bl	8007700 <USBH_LL_Disconnect>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fb ff55 	bl	8007792 <USBH_LL_NotifyURBChange>
#endif
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fb feb3 	bl	800766a <USBH_LL_PortEnabled>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fb febf 	bl	800769e <USBH_LL_PortDisabled>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b936:	2b01      	cmp	r3, #1
 800b938:	d12a      	bne.n	800b990 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b93a:	4a18      	ldr	r2, [pc, #96]	; (800b99c <USBH_LL_Init+0x74>)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a15      	ldr	r2, [pc, #84]	; (800b99c <USBH_LL_Init+0x74>)
 800b946:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b94a:	4b14      	ldr	r3, [pc, #80]	; (800b99c <USBH_LL_Init+0x74>)
 800b94c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b950:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b952:	4b12      	ldr	r3, [pc, #72]	; (800b99c <USBH_LL_Init+0x74>)
 800b954:	2208      	movs	r2, #8
 800b956:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b958:	4b10      	ldr	r3, [pc, #64]	; (800b99c <USBH_LL_Init+0x74>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b95e:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <USBH_LL_Init+0x74>)
 800b960:	2200      	movs	r2, #0
 800b962:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b964:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <USBH_LL_Init+0x74>)
 800b966:	2202      	movs	r2, #2
 800b968:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <USBH_LL_Init+0x74>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b970:	480a      	ldr	r0, [pc, #40]	; (800b99c <USBH_LL_Init+0x74>)
 800b972:	f7f5 fdbc 	bl	80014ee <HAL_HCD_Init>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b97c:	f7f5 f846 	bl	8000a0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b980:	4806      	ldr	r0, [pc, #24]	; (800b99c <USBH_LL_Init+0x74>)
 800b982:	f7f6 fa1d 	bl	8001dc0 <HAL_HCD_GetCurrentFrame>
 800b986:	4603      	mov	r3, r0
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7fb fe34 	bl	80075f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20004f00 	.word	0x20004f00

0800b9a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f6 f98a 	bl	8001cd0 <HAL_HCD_Start>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f95e 	bl	800bc84 <USBH_Get_USB_Status>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f6 f992 	bl	8001d16 <HAL_HCD_Stop>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 f943 	bl	800bc84 <USBH_Get_USB_Status>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f6 f9dc 	bl	8001ddc <HAL_HCD_GetCurrentSpeed>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d00c      	beq.n	800ba44 <USBH_LL_GetSpeed+0x38>
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d80d      	bhi.n	800ba4a <USBH_LL_GetSpeed+0x3e>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <USBH_LL_GetSpeed+0x2c>
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d003      	beq.n	800ba3e <USBH_LL_GetSpeed+0x32>
 800ba36:	e008      	b.n	800ba4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3c:	e008      	b.n	800ba50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	73fb      	strb	r3, [r7, #15]
    break;
 800ba42:	e005      	b.n	800ba50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba44:	2302      	movs	r3, #2
 800ba46:	73fb      	strb	r3, [r7, #15]
    break;
 800ba48:	e002      	b.n	800ba50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4e:	bf00      	nop
  }
  return  speed;
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7f6 f96d 	bl	8001d50 <HAL_HCD_ResetPort>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f901 	bl	800bc84 <USBH_Get_USB_Status>
 800ba82:	4603      	mov	r3, r0
 800ba84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baa2:	78fa      	ldrb	r2, [r7, #3]
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f6 f975 	bl	8001d96 <HAL_HCD_HC_GetXferCount>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bab6:	b590      	push	{r4, r7, lr}
 800bab8:	b089      	sub	sp, #36	; 0x24
 800baba:	af04      	add	r7, sp, #16
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	461a      	mov	r2, r3
 800bac4:	4603      	mov	r3, r0
 800bac6:	70fb      	strb	r3, [r7, #3]
 800bac8:	460b      	mov	r3, r1
 800baca:	70bb      	strb	r3, [r7, #2]
 800bacc:	4613      	mov	r3, r2
 800bace:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bade:	787c      	ldrb	r4, [r7, #1]
 800bae0:	78ba      	ldrb	r2, [r7, #2]
 800bae2:	78f9      	ldrb	r1, [r7, #3]
 800bae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	4623      	mov	r3, r4
 800baf6:	f7f5 fd61 	bl	80015bc <HAL_HCD_HC_Init>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f8bf 	bl	800bc84 <USBH_Get_USB_Status>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd90      	pop	{r4, r7, pc}

0800bb14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb2e:	78fa      	ldrb	r2, [r7, #3]
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7f5 fdfa 	bl	800172c <HAL_HCD_HC_Halt>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 f8a0 	bl	800bc84 <USBH_Get_USB_Status>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb52:	b590      	push	{r4, r7, lr}
 800bb54:	b089      	sub	sp, #36	; 0x24
 800bb56:	af04      	add	r7, sp, #16
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4603      	mov	r3, r0
 800bb62:	70fb      	strb	r3, [r7, #3]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70bb      	strb	r3, [r7, #2]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb7a:	787c      	ldrb	r4, [r7, #1]
 800bb7c:	78ba      	ldrb	r2, [r7, #2]
 800bb7e:	78f9      	ldrb	r1, [r7, #3]
 800bb80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb84:	9303      	str	r3, [sp, #12]
 800bb86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	4623      	mov	r3, r4
 800bb96:	f7f5 fded 	bl	8001774 <HAL_HCD_HC_SubmitRequest>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f86f 	bl	800bc84 <USBH_Get_USB_Status>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd90      	pop	{r4, r7, pc}

0800bbb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbc6:	78fa      	ldrb	r2, [r7, #3]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f6 f8ce 	bl	8001d6c <HAL_HCD_HC_GetURBState>
 800bbd0:	4603      	mov	r3, r0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d103      	bne.n	800bbf8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 f872 	bl	800bcdc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bbf8:	20c8      	movs	r0, #200	; 0xc8
 800bbfa:	f7f5 f95b 	bl	8000eb4 <HAL_Delay>
  return USBH_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
 800bc14:	4613      	mov	r3, r2
 800bc16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc20:	78fa      	ldrb	r2, [r7, #3]
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	4613      	mov	r3, r2
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	1a9b      	subs	r3, r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3317      	adds	r3, #23
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00a      	beq.n	800bc4c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc36:	78fa      	ldrb	r2, [r7, #3]
 800bc38:	68f9      	ldr	r1, [r7, #12]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	1a9b      	subs	r3, r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	440b      	add	r3, r1
 800bc44:	333c      	adds	r3, #60	; 0x3c
 800bc46:	78ba      	ldrb	r2, [r7, #2]
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	e009      	b.n	800bc60 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	4613      	mov	r3, r2
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	1a9b      	subs	r3, r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	440b      	add	r3, r1
 800bc5a:	333d      	adds	r3, #61	; 0x3d
 800bc5c:	78ba      	ldrb	r2, [r7, #2]
 800bc5e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f5 f91c 	bl	8000eb4 <HAL_Delay>
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	2b03      	cmp	r3, #3
 800bc96:	d817      	bhi.n	800bcc8 <USBH_Get_USB_Status+0x44>
 800bc98:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <USBH_Get_USB_Status+0x1c>)
 800bc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9e:	bf00      	nop
 800bca0:	0800bcb1 	.word	0x0800bcb1
 800bca4:	0800bcb7 	.word	0x0800bcb7
 800bca8:	0800bcbd 	.word	0x0800bcbd
 800bcac:	0800bcc3 	.word	0x0800bcc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb4:	e00b      	b.n	800bcce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcba:	e008      	b.n	800bcce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	e005      	b.n	800bcce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc6:	e002      	b.n	800bcce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	bf00      	nop
  }
  return usb_status;
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d102      	bne.n	800bcf6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]
 800bcf4:	e001      	b.n	800bcfa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	2101      	movs	r1, #1
 800bd00:	4803      	ldr	r0, [pc, #12]	; (800bd10 <MX_DriverVbusFS+0x34>)
 800bd02:	f7f5 fbc1 	bl	8001488 <HAL_GPIO_WritePin>
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	40020800 	.word	0x40020800

0800bd14 <malloc>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <malloc+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f000 b82b 	b.w	800bd74 <_malloc_r>
 800bd1e:	bf00      	nop
 800bd20:	2000007c 	.word	0x2000007c

0800bd24 <free>:
 800bd24:	4b02      	ldr	r3, [pc, #8]	; (800bd30 <free+0xc>)
 800bd26:	4601      	mov	r1, r0
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	f000 b901 	b.w	800bf30 <_free_r>
 800bd2e:	bf00      	nop
 800bd30:	2000007c 	.word	0x2000007c

0800bd34 <sbrk_aligned>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	4e0e      	ldr	r6, [pc, #56]	; (800bd70 <sbrk_aligned+0x3c>)
 800bd38:	460c      	mov	r4, r1
 800bd3a:	6831      	ldr	r1, [r6, #0]
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	b911      	cbnz	r1, 800bd46 <sbrk_aligned+0x12>
 800bd40:	f000 f8ac 	bl	800be9c <_sbrk_r>
 800bd44:	6030      	str	r0, [r6, #0]
 800bd46:	4621      	mov	r1, r4
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 f8a7 	bl	800be9c <_sbrk_r>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d00a      	beq.n	800bd68 <sbrk_aligned+0x34>
 800bd52:	1cc4      	adds	r4, r0, #3
 800bd54:	f024 0403 	bic.w	r4, r4, #3
 800bd58:	42a0      	cmp	r0, r4
 800bd5a:	d007      	beq.n	800bd6c <sbrk_aligned+0x38>
 800bd5c:	1a21      	subs	r1, r4, r0
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f000 f89c 	bl	800be9c <_sbrk_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d101      	bne.n	800bd6c <sbrk_aligned+0x38>
 800bd68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	200052e4 	.word	0x200052e4

0800bd74 <_malloc_r>:
 800bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd78:	1ccd      	adds	r5, r1, #3
 800bd7a:	f025 0503 	bic.w	r5, r5, #3
 800bd7e:	3508      	adds	r5, #8
 800bd80:	2d0c      	cmp	r5, #12
 800bd82:	bf38      	it	cc
 800bd84:	250c      	movcc	r5, #12
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	4607      	mov	r7, r0
 800bd8a:	db01      	blt.n	800bd90 <_malloc_r+0x1c>
 800bd8c:	42a9      	cmp	r1, r5
 800bd8e:	d905      	bls.n	800bd9c <_malloc_r+0x28>
 800bd90:	230c      	movs	r3, #12
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	2600      	movs	r6, #0
 800bd96:	4630      	mov	r0, r6
 800bd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be70 <_malloc_r+0xfc>
 800bda0:	f000 f868 	bl	800be74 <__malloc_lock>
 800bda4:	f8d8 3000 	ldr.w	r3, [r8]
 800bda8:	461c      	mov	r4, r3
 800bdaa:	bb5c      	cbnz	r4, 800be04 <_malloc_r+0x90>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f7ff ffc0 	bl	800bd34 <sbrk_aligned>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	d155      	bne.n	800be66 <_malloc_r+0xf2>
 800bdba:	f8d8 4000 	ldr.w	r4, [r8]
 800bdbe:	4626      	mov	r6, r4
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	d145      	bne.n	800be50 <_malloc_r+0xdc>
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	d048      	beq.n	800be5a <_malloc_r+0xe6>
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4638      	mov	r0, r7
 800bdce:	eb04 0903 	add.w	r9, r4, r3
 800bdd2:	f000 f863 	bl	800be9c <_sbrk_r>
 800bdd6:	4581      	cmp	r9, r0
 800bdd8:	d13f      	bne.n	800be5a <_malloc_r+0xe6>
 800bdda:	6821      	ldr	r1, [r4, #0]
 800bddc:	1a6d      	subs	r5, r5, r1
 800bdde:	4629      	mov	r1, r5
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff ffa7 	bl	800bd34 <sbrk_aligned>
 800bde6:	3001      	adds	r0, #1
 800bde8:	d037      	beq.n	800be5a <_malloc_r+0xe6>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	442b      	add	r3, r5
 800bdee:	6023      	str	r3, [r4, #0]
 800bdf0:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d038      	beq.n	800be6a <_malloc_r+0xf6>
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	42a2      	cmp	r2, r4
 800bdfc:	d12b      	bne.n	800be56 <_malloc_r+0xe2>
 800bdfe:	2200      	movs	r2, #0
 800be00:	605a      	str	r2, [r3, #4]
 800be02:	e00f      	b.n	800be24 <_malloc_r+0xb0>
 800be04:	6822      	ldr	r2, [r4, #0]
 800be06:	1b52      	subs	r2, r2, r5
 800be08:	d41f      	bmi.n	800be4a <_malloc_r+0xd6>
 800be0a:	2a0b      	cmp	r2, #11
 800be0c:	d917      	bls.n	800be3e <_malloc_r+0xca>
 800be0e:	1961      	adds	r1, r4, r5
 800be10:	42a3      	cmp	r3, r4
 800be12:	6025      	str	r5, [r4, #0]
 800be14:	bf18      	it	ne
 800be16:	6059      	strne	r1, [r3, #4]
 800be18:	6863      	ldr	r3, [r4, #4]
 800be1a:	bf08      	it	eq
 800be1c:	f8c8 1000 	streq.w	r1, [r8]
 800be20:	5162      	str	r2, [r4, r5]
 800be22:	604b      	str	r3, [r1, #4]
 800be24:	4638      	mov	r0, r7
 800be26:	f104 060b 	add.w	r6, r4, #11
 800be2a:	f000 f829 	bl	800be80 <__malloc_unlock>
 800be2e:	f026 0607 	bic.w	r6, r6, #7
 800be32:	1d23      	adds	r3, r4, #4
 800be34:	1af2      	subs	r2, r6, r3
 800be36:	d0ae      	beq.n	800bd96 <_malloc_r+0x22>
 800be38:	1b9b      	subs	r3, r3, r6
 800be3a:	50a3      	str	r3, [r4, r2]
 800be3c:	e7ab      	b.n	800bd96 <_malloc_r+0x22>
 800be3e:	42a3      	cmp	r3, r4
 800be40:	6862      	ldr	r2, [r4, #4]
 800be42:	d1dd      	bne.n	800be00 <_malloc_r+0x8c>
 800be44:	f8c8 2000 	str.w	r2, [r8]
 800be48:	e7ec      	b.n	800be24 <_malloc_r+0xb0>
 800be4a:	4623      	mov	r3, r4
 800be4c:	6864      	ldr	r4, [r4, #4]
 800be4e:	e7ac      	b.n	800bdaa <_malloc_r+0x36>
 800be50:	4634      	mov	r4, r6
 800be52:	6876      	ldr	r6, [r6, #4]
 800be54:	e7b4      	b.n	800bdc0 <_malloc_r+0x4c>
 800be56:	4613      	mov	r3, r2
 800be58:	e7cc      	b.n	800bdf4 <_malloc_r+0x80>
 800be5a:	230c      	movs	r3, #12
 800be5c:	603b      	str	r3, [r7, #0]
 800be5e:	4638      	mov	r0, r7
 800be60:	f000 f80e 	bl	800be80 <__malloc_unlock>
 800be64:	e797      	b.n	800bd96 <_malloc_r+0x22>
 800be66:	6025      	str	r5, [r4, #0]
 800be68:	e7dc      	b.n	800be24 <_malloc_r+0xb0>
 800be6a:	605b      	str	r3, [r3, #4]
 800be6c:	deff      	udf	#255	; 0xff
 800be6e:	bf00      	nop
 800be70:	200052e0 	.word	0x200052e0

0800be74 <__malloc_lock>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__malloc_lock+0x8>)
 800be76:	f000 b84b 	b.w	800bf10 <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	20005420 	.word	0x20005420

0800be80 <__malloc_unlock>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__malloc_unlock+0x8>)
 800be82:	f000 b846 	b.w	800bf12 <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	20005420 	.word	0x20005420

0800be8c <memset>:
 800be8c:	4402      	add	r2, r0
 800be8e:	4603      	mov	r3, r0
 800be90:	4293      	cmp	r3, r2
 800be92:	d100      	bne.n	800be96 <memset+0xa>
 800be94:	4770      	bx	lr
 800be96:	f803 1b01 	strb.w	r1, [r3], #1
 800be9a:	e7f9      	b.n	800be90 <memset+0x4>

0800be9c <_sbrk_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d06      	ldr	r5, [pc, #24]	; (800beb8 <_sbrk_r+0x1c>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f4 ff20 	bl	8000cec <_sbrk>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_sbrk_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_sbrk_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	20005424 	.word	0x20005424

0800bebc <__errno>:
 800bebc:	4b01      	ldr	r3, [pc, #4]	; (800bec4 <__errno+0x8>)
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	2000007c 	.word	0x2000007c

0800bec8 <__libc_init_array>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	4d0d      	ldr	r5, [pc, #52]	; (800bf00 <__libc_init_array+0x38>)
 800becc:	4c0d      	ldr	r4, [pc, #52]	; (800bf04 <__libc_init_array+0x3c>)
 800bece:	1b64      	subs	r4, r4, r5
 800bed0:	10a4      	asrs	r4, r4, #2
 800bed2:	2600      	movs	r6, #0
 800bed4:	42a6      	cmp	r6, r4
 800bed6:	d109      	bne.n	800beec <__libc_init_array+0x24>
 800bed8:	4d0b      	ldr	r5, [pc, #44]	; (800bf08 <__libc_init_array+0x40>)
 800beda:	4c0c      	ldr	r4, [pc, #48]	; (800bf0c <__libc_init_array+0x44>)
 800bedc:	f000 f874 	bl	800bfc8 <_init>
 800bee0:	1b64      	subs	r4, r4, r5
 800bee2:	10a4      	asrs	r4, r4, #2
 800bee4:	2600      	movs	r6, #0
 800bee6:	42a6      	cmp	r6, r4
 800bee8:	d105      	bne.n	800bef6 <__libc_init_array+0x2e>
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef0:	4798      	blx	r3
 800bef2:	3601      	adds	r6, #1
 800bef4:	e7ee      	b.n	800bed4 <__libc_init_array+0xc>
 800bef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800befa:	4798      	blx	r3
 800befc:	3601      	adds	r6, #1
 800befe:	e7f2      	b.n	800bee6 <__libc_init_array+0x1e>
 800bf00:	0800c07c 	.word	0x0800c07c
 800bf04:	0800c07c 	.word	0x0800c07c
 800bf08:	0800c07c 	.word	0x0800c07c
 800bf0c:	0800c080 	.word	0x0800c080

0800bf10 <__retarget_lock_acquire_recursive>:
 800bf10:	4770      	bx	lr

0800bf12 <__retarget_lock_release_recursive>:
 800bf12:	4770      	bx	lr

0800bf14 <memcpy>:
 800bf14:	440a      	add	r2, r1
 800bf16:	4291      	cmp	r1, r2
 800bf18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bf1c:	d100      	bne.n	800bf20 <memcpy+0xc>
 800bf1e:	4770      	bx	lr
 800bf20:	b510      	push	{r4, lr}
 800bf22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf2a:	4291      	cmp	r1, r2
 800bf2c:	d1f9      	bne.n	800bf22 <memcpy+0xe>
 800bf2e:	bd10      	pop	{r4, pc}

0800bf30 <_free_r>:
 800bf30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf32:	2900      	cmp	r1, #0
 800bf34:	d044      	beq.n	800bfc0 <_free_r+0x90>
 800bf36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3a:	9001      	str	r0, [sp, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f1a1 0404 	sub.w	r4, r1, #4
 800bf42:	bfb8      	it	lt
 800bf44:	18e4      	addlt	r4, r4, r3
 800bf46:	f7ff ff95 	bl	800be74 <__malloc_lock>
 800bf4a:	4a1e      	ldr	r2, [pc, #120]	; (800bfc4 <_free_r+0x94>)
 800bf4c:	9801      	ldr	r0, [sp, #4]
 800bf4e:	6813      	ldr	r3, [r2, #0]
 800bf50:	b933      	cbnz	r3, 800bf60 <_free_r+0x30>
 800bf52:	6063      	str	r3, [r4, #4]
 800bf54:	6014      	str	r4, [r2, #0]
 800bf56:	b003      	add	sp, #12
 800bf58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf5c:	f7ff bf90 	b.w	800be80 <__malloc_unlock>
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	d908      	bls.n	800bf76 <_free_r+0x46>
 800bf64:	6825      	ldr	r5, [r4, #0]
 800bf66:	1961      	adds	r1, r4, r5
 800bf68:	428b      	cmp	r3, r1
 800bf6a:	bf01      	itttt	eq
 800bf6c:	6819      	ldreq	r1, [r3, #0]
 800bf6e:	685b      	ldreq	r3, [r3, #4]
 800bf70:	1949      	addeq	r1, r1, r5
 800bf72:	6021      	streq	r1, [r4, #0]
 800bf74:	e7ed      	b.n	800bf52 <_free_r+0x22>
 800bf76:	461a      	mov	r2, r3
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	b10b      	cbz	r3, 800bf80 <_free_r+0x50>
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	d9fa      	bls.n	800bf76 <_free_r+0x46>
 800bf80:	6811      	ldr	r1, [r2, #0]
 800bf82:	1855      	adds	r5, r2, r1
 800bf84:	42a5      	cmp	r5, r4
 800bf86:	d10b      	bne.n	800bfa0 <_free_r+0x70>
 800bf88:	6824      	ldr	r4, [r4, #0]
 800bf8a:	4421      	add	r1, r4
 800bf8c:	1854      	adds	r4, r2, r1
 800bf8e:	42a3      	cmp	r3, r4
 800bf90:	6011      	str	r1, [r2, #0]
 800bf92:	d1e0      	bne.n	800bf56 <_free_r+0x26>
 800bf94:	681c      	ldr	r4, [r3, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	6053      	str	r3, [r2, #4]
 800bf9a:	440c      	add	r4, r1
 800bf9c:	6014      	str	r4, [r2, #0]
 800bf9e:	e7da      	b.n	800bf56 <_free_r+0x26>
 800bfa0:	d902      	bls.n	800bfa8 <_free_r+0x78>
 800bfa2:	230c      	movs	r3, #12
 800bfa4:	6003      	str	r3, [r0, #0]
 800bfa6:	e7d6      	b.n	800bf56 <_free_r+0x26>
 800bfa8:	6825      	ldr	r5, [r4, #0]
 800bfaa:	1961      	adds	r1, r4, r5
 800bfac:	428b      	cmp	r3, r1
 800bfae:	bf04      	itt	eq
 800bfb0:	6819      	ldreq	r1, [r3, #0]
 800bfb2:	685b      	ldreq	r3, [r3, #4]
 800bfb4:	6063      	str	r3, [r4, #4]
 800bfb6:	bf04      	itt	eq
 800bfb8:	1949      	addeq	r1, r1, r5
 800bfba:	6021      	streq	r1, [r4, #0]
 800bfbc:	6054      	str	r4, [r2, #4]
 800bfbe:	e7ca      	b.n	800bf56 <_free_r+0x26>
 800bfc0:	b003      	add	sp, #12
 800bfc2:	bd30      	pop	{r4, r5, pc}
 800bfc4:	200052e0 	.word	0x200052e0

0800bfc8 <_init>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	bf00      	nop
 800bfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfce:	bc08      	pop	{r3}
 800bfd0:	469e      	mov	lr, r3
 800bfd2:	4770      	bx	lr

0800bfd4 <_fini>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	bf00      	nop
 800bfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfda:	bc08      	pop	{r3}
 800bfdc:	469e      	mov	lr, r3
 800bfde:	4770      	bx	lr
